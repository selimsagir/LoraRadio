
LoraRadio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e78  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005134  08005134  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08005134  08005134  00015134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800513c  0800513c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005140  08005140  00015140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005144  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000458  20000070  080051b4  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  080051b4  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b9c4  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002020  00000000  00000000  0002ba5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0002da80  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008d8  00000000  00000000  0002e480  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017cb5  00000000  00000000  0002ed58  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000acfa  00000000  00000000  00046a0d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c51e  00000000  00000000  00051707  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cdc25  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a50  00000000  00000000  000cdca0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004f20 	.word	0x08004f20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08004f20 	.word	0x08004f20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f806 	bl	8000260 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__udivmoddi4>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	464f      	mov	r7, r9
 8000264:	4646      	mov	r6, r8
 8000266:	46d6      	mov	lr, sl
 8000268:	b5c0      	push	{r6, r7, lr}
 800026a:	0004      	movs	r4, r0
 800026c:	b082      	sub	sp, #8
 800026e:	000d      	movs	r5, r1
 8000270:	4691      	mov	r9, r2
 8000272:	4698      	mov	r8, r3
 8000274:	428b      	cmp	r3, r1
 8000276:	d82f      	bhi.n	80002d8 <__udivmoddi4+0x78>
 8000278:	d02c      	beq.n	80002d4 <__udivmoddi4+0x74>
 800027a:	4641      	mov	r1, r8
 800027c:	4648      	mov	r0, r9
 800027e:	f000 f8b1 	bl	80003e4 <__clzdi2>
 8000282:	0029      	movs	r1, r5
 8000284:	0006      	movs	r6, r0
 8000286:	0020      	movs	r0, r4
 8000288:	f000 f8ac 	bl	80003e4 <__clzdi2>
 800028c:	1a33      	subs	r3, r6, r0
 800028e:	469c      	mov	ip, r3
 8000290:	3b20      	subs	r3, #32
 8000292:	469a      	mov	sl, r3
 8000294:	d500      	bpl.n	8000298 <__udivmoddi4+0x38>
 8000296:	e076      	b.n	8000386 <__udivmoddi4+0x126>
 8000298:	464b      	mov	r3, r9
 800029a:	4652      	mov	r2, sl
 800029c:	4093      	lsls	r3, r2
 800029e:	001f      	movs	r7, r3
 80002a0:	464b      	mov	r3, r9
 80002a2:	4662      	mov	r2, ip
 80002a4:	4093      	lsls	r3, r2
 80002a6:	001e      	movs	r6, r3
 80002a8:	42af      	cmp	r7, r5
 80002aa:	d828      	bhi.n	80002fe <__udivmoddi4+0x9e>
 80002ac:	d025      	beq.n	80002fa <__udivmoddi4+0x9a>
 80002ae:	4653      	mov	r3, sl
 80002b0:	1ba4      	subs	r4, r4, r6
 80002b2:	41bd      	sbcs	r5, r7
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	da00      	bge.n	80002ba <__udivmoddi4+0x5a>
 80002b8:	e07b      	b.n	80003b2 <__udivmoddi4+0x152>
 80002ba:	2200      	movs	r2, #0
 80002bc:	2300      	movs	r3, #0
 80002be:	9200      	str	r2, [sp, #0]
 80002c0:	9301      	str	r3, [sp, #4]
 80002c2:	2301      	movs	r3, #1
 80002c4:	4652      	mov	r2, sl
 80002c6:	4093      	lsls	r3, r2
 80002c8:	9301      	str	r3, [sp, #4]
 80002ca:	2301      	movs	r3, #1
 80002cc:	4662      	mov	r2, ip
 80002ce:	4093      	lsls	r3, r2
 80002d0:	9300      	str	r3, [sp, #0]
 80002d2:	e018      	b.n	8000306 <__udivmoddi4+0xa6>
 80002d4:	4282      	cmp	r2, r0
 80002d6:	d9d0      	bls.n	800027a <__udivmoddi4+0x1a>
 80002d8:	2200      	movs	r2, #0
 80002da:	2300      	movs	r3, #0
 80002dc:	9200      	str	r2, [sp, #0]
 80002de:	9301      	str	r3, [sp, #4]
 80002e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	d001      	beq.n	80002ea <__udivmoddi4+0x8a>
 80002e6:	601c      	str	r4, [r3, #0]
 80002e8:	605d      	str	r5, [r3, #4]
 80002ea:	9800      	ldr	r0, [sp, #0]
 80002ec:	9901      	ldr	r1, [sp, #4]
 80002ee:	b002      	add	sp, #8
 80002f0:	bc1c      	pop	{r2, r3, r4}
 80002f2:	4690      	mov	r8, r2
 80002f4:	4699      	mov	r9, r3
 80002f6:	46a2      	mov	sl, r4
 80002f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002fa:	42a3      	cmp	r3, r4
 80002fc:	d9d7      	bls.n	80002ae <__udivmoddi4+0x4e>
 80002fe:	2200      	movs	r2, #0
 8000300:	2300      	movs	r3, #0
 8000302:	9200      	str	r2, [sp, #0]
 8000304:	9301      	str	r3, [sp, #4]
 8000306:	4663      	mov	r3, ip
 8000308:	2b00      	cmp	r3, #0
 800030a:	d0e9      	beq.n	80002e0 <__udivmoddi4+0x80>
 800030c:	07fb      	lsls	r3, r7, #31
 800030e:	4698      	mov	r8, r3
 8000310:	4641      	mov	r1, r8
 8000312:	0872      	lsrs	r2, r6, #1
 8000314:	430a      	orrs	r2, r1
 8000316:	087b      	lsrs	r3, r7, #1
 8000318:	4666      	mov	r6, ip
 800031a:	e00e      	b.n	800033a <__udivmoddi4+0xda>
 800031c:	42ab      	cmp	r3, r5
 800031e:	d101      	bne.n	8000324 <__udivmoddi4+0xc4>
 8000320:	42a2      	cmp	r2, r4
 8000322:	d80c      	bhi.n	800033e <__udivmoddi4+0xde>
 8000324:	1aa4      	subs	r4, r4, r2
 8000326:	419d      	sbcs	r5, r3
 8000328:	2001      	movs	r0, #1
 800032a:	1924      	adds	r4, r4, r4
 800032c:	416d      	adcs	r5, r5
 800032e:	2100      	movs	r1, #0
 8000330:	3e01      	subs	r6, #1
 8000332:	1824      	adds	r4, r4, r0
 8000334:	414d      	adcs	r5, r1
 8000336:	2e00      	cmp	r6, #0
 8000338:	d006      	beq.n	8000348 <__udivmoddi4+0xe8>
 800033a:	42ab      	cmp	r3, r5
 800033c:	d9ee      	bls.n	800031c <__udivmoddi4+0xbc>
 800033e:	3e01      	subs	r6, #1
 8000340:	1924      	adds	r4, r4, r4
 8000342:	416d      	adcs	r5, r5
 8000344:	2e00      	cmp	r6, #0
 8000346:	d1f8      	bne.n	800033a <__udivmoddi4+0xda>
 8000348:	9800      	ldr	r0, [sp, #0]
 800034a:	9901      	ldr	r1, [sp, #4]
 800034c:	4653      	mov	r3, sl
 800034e:	1900      	adds	r0, r0, r4
 8000350:	4169      	adcs	r1, r5
 8000352:	2b00      	cmp	r3, #0
 8000354:	db23      	blt.n	800039e <__udivmoddi4+0x13e>
 8000356:	002b      	movs	r3, r5
 8000358:	4652      	mov	r2, sl
 800035a:	40d3      	lsrs	r3, r2
 800035c:	002a      	movs	r2, r5
 800035e:	4664      	mov	r4, ip
 8000360:	40e2      	lsrs	r2, r4
 8000362:	001c      	movs	r4, r3
 8000364:	4653      	mov	r3, sl
 8000366:	0015      	movs	r5, r2
 8000368:	2b00      	cmp	r3, #0
 800036a:	db2d      	blt.n	80003c8 <__udivmoddi4+0x168>
 800036c:	0026      	movs	r6, r4
 800036e:	4657      	mov	r7, sl
 8000370:	40be      	lsls	r6, r7
 8000372:	0033      	movs	r3, r6
 8000374:	0026      	movs	r6, r4
 8000376:	4667      	mov	r7, ip
 8000378:	40be      	lsls	r6, r7
 800037a:	0032      	movs	r2, r6
 800037c:	1a80      	subs	r0, r0, r2
 800037e:	4199      	sbcs	r1, r3
 8000380:	9000      	str	r0, [sp, #0]
 8000382:	9101      	str	r1, [sp, #4]
 8000384:	e7ac      	b.n	80002e0 <__udivmoddi4+0x80>
 8000386:	4662      	mov	r2, ip
 8000388:	2320      	movs	r3, #32
 800038a:	1a9b      	subs	r3, r3, r2
 800038c:	464a      	mov	r2, r9
 800038e:	40da      	lsrs	r2, r3
 8000390:	4661      	mov	r1, ip
 8000392:	0013      	movs	r3, r2
 8000394:	4642      	mov	r2, r8
 8000396:	408a      	lsls	r2, r1
 8000398:	0017      	movs	r7, r2
 800039a:	431f      	orrs	r7, r3
 800039c:	e780      	b.n	80002a0 <__udivmoddi4+0x40>
 800039e:	4662      	mov	r2, ip
 80003a0:	2320      	movs	r3, #32
 80003a2:	1a9b      	subs	r3, r3, r2
 80003a4:	002a      	movs	r2, r5
 80003a6:	4666      	mov	r6, ip
 80003a8:	409a      	lsls	r2, r3
 80003aa:	0023      	movs	r3, r4
 80003ac:	40f3      	lsrs	r3, r6
 80003ae:	4313      	orrs	r3, r2
 80003b0:	e7d4      	b.n	800035c <__udivmoddi4+0xfc>
 80003b2:	4662      	mov	r2, ip
 80003b4:	2320      	movs	r3, #32
 80003b6:	2100      	movs	r1, #0
 80003b8:	1a9b      	subs	r3, r3, r2
 80003ba:	2200      	movs	r2, #0
 80003bc:	9100      	str	r1, [sp, #0]
 80003be:	9201      	str	r2, [sp, #4]
 80003c0:	2201      	movs	r2, #1
 80003c2:	40da      	lsrs	r2, r3
 80003c4:	9201      	str	r2, [sp, #4]
 80003c6:	e780      	b.n	80002ca <__udivmoddi4+0x6a>
 80003c8:	2320      	movs	r3, #32
 80003ca:	4662      	mov	r2, ip
 80003cc:	0026      	movs	r6, r4
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	40de      	lsrs	r6, r3
 80003d2:	002f      	movs	r7, r5
 80003d4:	46b0      	mov	r8, r6
 80003d6:	4666      	mov	r6, ip
 80003d8:	40b7      	lsls	r7, r6
 80003da:	4646      	mov	r6, r8
 80003dc:	003b      	movs	r3, r7
 80003de:	4333      	orrs	r3, r6
 80003e0:	e7c8      	b.n	8000374 <__udivmoddi4+0x114>
 80003e2:	46c0      	nop			; (mov r8, r8)

080003e4 <__clzdi2>:
 80003e4:	b510      	push	{r4, lr}
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d103      	bne.n	80003f2 <__clzdi2+0xe>
 80003ea:	f000 f807 	bl	80003fc <__clzsi2>
 80003ee:	3020      	adds	r0, #32
 80003f0:	e002      	b.n	80003f8 <__clzdi2+0x14>
 80003f2:	1c08      	adds	r0, r1, #0
 80003f4:	f000 f802 	bl	80003fc <__clzsi2>
 80003f8:	bd10      	pop	{r4, pc}
 80003fa:	46c0      	nop			; (mov r8, r8)

080003fc <__clzsi2>:
 80003fc:	211c      	movs	r1, #28
 80003fe:	2301      	movs	r3, #1
 8000400:	041b      	lsls	r3, r3, #16
 8000402:	4298      	cmp	r0, r3
 8000404:	d301      	bcc.n	800040a <__clzsi2+0xe>
 8000406:	0c00      	lsrs	r0, r0, #16
 8000408:	3910      	subs	r1, #16
 800040a:	0a1b      	lsrs	r3, r3, #8
 800040c:	4298      	cmp	r0, r3
 800040e:	d301      	bcc.n	8000414 <__clzsi2+0x18>
 8000410:	0a00      	lsrs	r0, r0, #8
 8000412:	3908      	subs	r1, #8
 8000414:	091b      	lsrs	r3, r3, #4
 8000416:	4298      	cmp	r0, r3
 8000418:	d301      	bcc.n	800041e <__clzsi2+0x22>
 800041a:	0900      	lsrs	r0, r0, #4
 800041c:	3904      	subs	r1, #4
 800041e:	a202      	add	r2, pc, #8	; (adr r2, 8000428 <__clzsi2+0x2c>)
 8000420:	5c10      	ldrb	r0, [r2, r0]
 8000422:	1840      	adds	r0, r0, r1
 8000424:	4770      	bx	lr
 8000426:	46c0      	nop			; (mov r8, r8)
 8000428:	02020304 	.word	0x02020304
 800042c:	01010101 	.word	0x01010101
	...

08000438 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000438:	b590      	push	{r4, r7, lr}
 800043a:	b08b      	sub	sp, #44	; 0x2c
 800043c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800043e:	2414      	movs	r4, #20
 8000440:	193b      	adds	r3, r7, r4
 8000442:	0018      	movs	r0, r3
 8000444:	2314      	movs	r3, #20
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f003 fc1e 	bl	8003c8a <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800044e:	4b50      	ldr	r3, [pc, #320]	; (8000590 <MX_GPIO_Init+0x158>)
 8000450:	695a      	ldr	r2, [r3, #20]
 8000452:	4b4f      	ldr	r3, [pc, #316]	; (8000590 <MX_GPIO_Init+0x158>)
 8000454:	2180      	movs	r1, #128	; 0x80
 8000456:	0309      	lsls	r1, r1, #12
 8000458:	430a      	orrs	r2, r1
 800045a:	615a      	str	r2, [r3, #20]
 800045c:	4b4c      	ldr	r3, [pc, #304]	; (8000590 <MX_GPIO_Init+0x158>)
 800045e:	695a      	ldr	r2, [r3, #20]
 8000460:	2380      	movs	r3, #128	; 0x80
 8000462:	031b      	lsls	r3, r3, #12
 8000464:	4013      	ands	r3, r2
 8000466:	613b      	str	r3, [r7, #16]
 8000468:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800046a:	4b49      	ldr	r3, [pc, #292]	; (8000590 <MX_GPIO_Init+0x158>)
 800046c:	695a      	ldr	r2, [r3, #20]
 800046e:	4b48      	ldr	r3, [pc, #288]	; (8000590 <MX_GPIO_Init+0x158>)
 8000470:	2180      	movs	r1, #128	; 0x80
 8000472:	03c9      	lsls	r1, r1, #15
 8000474:	430a      	orrs	r2, r1
 8000476:	615a      	str	r2, [r3, #20]
 8000478:	4b45      	ldr	r3, [pc, #276]	; (8000590 <MX_GPIO_Init+0x158>)
 800047a:	695a      	ldr	r2, [r3, #20]
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	03db      	lsls	r3, r3, #15
 8000480:	4013      	ands	r3, r2
 8000482:	60fb      	str	r3, [r7, #12]
 8000484:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b42      	ldr	r3, [pc, #264]	; (8000590 <MX_GPIO_Init+0x158>)
 8000488:	695a      	ldr	r2, [r3, #20]
 800048a:	4b41      	ldr	r3, [pc, #260]	; (8000590 <MX_GPIO_Init+0x158>)
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0289      	lsls	r1, r1, #10
 8000490:	430a      	orrs	r2, r1
 8000492:	615a      	str	r2, [r3, #20]
 8000494:	4b3e      	ldr	r3, [pc, #248]	; (8000590 <MX_GPIO_Init+0x158>)
 8000496:	695a      	ldr	r2, [r3, #20]
 8000498:	2380      	movs	r3, #128	; 0x80
 800049a:	029b      	lsls	r3, r3, #10
 800049c:	4013      	ands	r3, r2
 800049e:	60bb      	str	r3, [r7, #8]
 80004a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004a2:	4b3b      	ldr	r3, [pc, #236]	; (8000590 <MX_GPIO_Init+0x158>)
 80004a4:	695a      	ldr	r2, [r3, #20]
 80004a6:	4b3a      	ldr	r3, [pc, #232]	; (8000590 <MX_GPIO_Init+0x158>)
 80004a8:	2180      	movs	r1, #128	; 0x80
 80004aa:	02c9      	lsls	r1, r1, #11
 80004ac:	430a      	orrs	r2, r1
 80004ae:	615a      	str	r2, [r3, #20]
 80004b0:	4b37      	ldr	r3, [pc, #220]	; (8000590 <MX_GPIO_Init+0x158>)
 80004b2:	695a      	ldr	r2, [r3, #20]
 80004b4:	2380      	movs	r3, #128	; 0x80
 80004b6:	02db      	lsls	r3, r3, #11
 80004b8:	4013      	ands	r3, r2
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|RESET_Pin, GPIO_PIN_RESET);
 80004be:	4935      	ldr	r1, [pc, #212]	; (8000594 <MX_GPIO_Init+0x15c>)
 80004c0:	2390      	movs	r3, #144	; 0x90
 80004c2:	05db      	lsls	r3, r3, #23
 80004c4:	2200      	movs	r2, #0
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fecd 	bl	8001266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_RESET);
 80004cc:	4b32      	ldr	r3, [pc, #200]	; (8000598 <MX_GPIO_Init+0x160>)
 80004ce:	2200      	movs	r2, #0
 80004d0:	2140      	movs	r1, #64	; 0x40
 80004d2:	0018      	movs	r0, r3
 80004d4:	f000 fec7 	bl	8001266 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004d8:	193b      	adds	r3, r7, r4
 80004da:	2280      	movs	r2, #128	; 0x80
 80004dc:	0192      	lsls	r2, r2, #6
 80004de:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004e0:	193b      	adds	r3, r7, r4
 80004e2:	4a2e      	ldr	r2, [pc, #184]	; (800059c <MX_GPIO_Init+0x164>)
 80004e4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e6:	193b      	adds	r3, r7, r4
 80004e8:	2200      	movs	r2, #0
 80004ea:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004ec:	193b      	adds	r3, r7, r4
 80004ee:	4a2c      	ldr	r2, [pc, #176]	; (80005a0 <MX_GPIO_Init+0x168>)
 80004f0:	0019      	movs	r1, r3
 80004f2:	0010      	movs	r0, r2
 80004f4:	f000 fd22 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 80004f8:	193b      	adds	r3, r7, r4
 80004fa:	4a26      	ldr	r2, [pc, #152]	; (8000594 <MX_GPIO_Init+0x15c>)
 80004fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004fe:	193b      	adds	r3, r7, r4
 8000500:	2201      	movs	r2, #1
 8000502:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000504:	193b      	adds	r3, r7, r4
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050a:	193b      	adds	r3, r7, r4
 800050c:	2200      	movs	r2, #0
 800050e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000510:	193a      	adds	r2, r7, r4
 8000512:	2390      	movs	r3, #144	; 0x90
 8000514:	05db      	lsls	r3, r3, #23
 8000516:	0011      	movs	r1, r2
 8000518:	0018      	movs	r0, r3
 800051a:	f000 fd0f 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MODE_Pin;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2202      	movs	r2, #2
 8000522:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2200      	movs	r2, #0
 8000528:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800052a:	193b      	adds	r3, r7, r4
 800052c:	2200      	movs	r2, #0
 800052e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000530:	193a      	adds	r2, r7, r4
 8000532:	2390      	movs	r3, #144	; 0x90
 8000534:	05db      	lsls	r3, r3, #23
 8000536:	0011      	movs	r1, r2
 8000538:	0018      	movs	r0, r3
 800053a:	f000 fcff 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 800053e:	0021      	movs	r1, r4
 8000540:	187b      	adds	r3, r7, r1
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000546:	187b      	adds	r3, r7, r1
 8000548:	2200      	movs	r2, #0
 800054a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	187b      	adds	r3, r7, r1
 800054e:	2200      	movs	r2, #0
 8000550:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000552:	000c      	movs	r4, r1
 8000554:	187b      	adds	r3, r7, r1
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <MX_GPIO_Init+0x168>)
 8000558:	0019      	movs	r1, r3
 800055a:	0010      	movs	r0, r2
 800055c:	f000 fcee 	bl	8000f3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000560:	0021      	movs	r1, r4
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2240      	movs	r2, #64	; 0x40
 8000566:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2201      	movs	r2, #1
 800056c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	187b      	adds	r3, r7, r1
 8000570:	2200      	movs	r2, #0
 8000572:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2200      	movs	r2, #0
 8000578:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 800057a:	187b      	adds	r3, r7, r1
 800057c:	4a06      	ldr	r2, [pc, #24]	; (8000598 <MX_GPIO_Init+0x160>)
 800057e:	0019      	movs	r1, r3
 8000580:	0010      	movs	r0, r2
 8000582:	f000 fcdb 	bl	8000f3c <HAL_GPIO_Init>

}
 8000586:	46c0      	nop			; (mov r8, r8)
 8000588:	46bd      	mov	sp, r7
 800058a:	b00b      	add	sp, #44	; 0x2c
 800058c:	bd90      	pop	{r4, r7, pc}
 800058e:	46c0      	nop			; (mov r8, r8)
 8000590:	40021000 	.word	0x40021000
 8000594:	00000201 	.word	0x00000201
 8000598:	48000400 	.word	0x48000400
 800059c:	10210000 	.word	0x10210000
 80005a0:	48000800 	.word	0x48000800

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fb8d 	bl	8000cc8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f91b 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f7ff ff41 	bl	8000438 <MX_GPIO_Init>
  MX_SPI1_Init();
 80005b6:	f000 f983 	bl	80008c0 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 80005ba:	f000 fadf 	bl	8000b7c <MX_USART2_UART_Init>
		printf("Mode: Slave\r\n");
		HAL_GPIO_WritePin(MODE_GPIO_Port, MODE_Pin, GPIO_PIN_SET);
	}
*/
	//initialize LoRa module
	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 80005be:	4b71      	ldr	r3, [pc, #452]	; (8000784 <main+0x1e0>)
 80005c0:	4a71      	ldr	r2, [pc, #452]	; (8000788 <main+0x1e4>)
 80005c2:	60da      	str	r2, [r3, #12]
	SX1278_hw.dio0.pin = DIO0_Pin;
 80005c4:	4b6f      	ldr	r3, [pc, #444]	; (8000784 <main+0x1e0>)
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	609a      	str	r2, [r3, #8]
	SX1278_hw.nss.port = NSS_GPIO_Port;
 80005ca:	4b6e      	ldr	r3, [pc, #440]	; (8000784 <main+0x1e0>)
 80005cc:	4a6f      	ldr	r2, [pc, #444]	; (800078c <main+0x1e8>)
 80005ce:	615a      	str	r2, [r3, #20]
	SX1278_hw.nss.pin = NSS_Pin;
 80005d0:	4b6c      	ldr	r3, [pc, #432]	; (8000784 <main+0x1e0>)
 80005d2:	2240      	movs	r2, #64	; 0x40
 80005d4:	611a      	str	r2, [r3, #16]
	SX1278_hw.reset.port = RESET_GPIO_Port;
 80005d6:	4b6b      	ldr	r3, [pc, #428]	; (8000784 <main+0x1e0>)
 80005d8:	2290      	movs	r2, #144	; 0x90
 80005da:	05d2      	lsls	r2, r2, #23
 80005dc:	605a      	str	r2, [r3, #4]
	SX1278_hw.reset.pin = RESET_Pin;
 80005de:	4b69      	ldr	r3, [pc, #420]	; (8000784 <main+0x1e0>)
 80005e0:	2280      	movs	r2, #128	; 0x80
 80005e2:	0092      	lsls	r2, r2, #2
 80005e4:	601a      	str	r2, [r3, #0]
	SX1278_hw.spi = &hspi1;
 80005e6:	4b67      	ldr	r3, [pc, #412]	; (8000784 <main+0x1e0>)
 80005e8:	4a69      	ldr	r2, [pc, #420]	; (8000790 <main+0x1ec>)
 80005ea:	619a      	str	r2, [r3, #24]

	SX1278.hw = &SX1278_hw;
 80005ec:	4b69      	ldr	r3, [pc, #420]	; (8000794 <main+0x1f0>)
 80005ee:	4a65      	ldr	r2, [pc, #404]	; (8000784 <main+0x1e0>)
 80005f0:	601a      	str	r2, [r3, #0]

	printf("Configuring LoRa module\r\n");
 80005f2:	4b69      	ldr	r3, [pc, #420]	; (8000798 <main+0x1f4>)
 80005f4:	0018      	movs	r0, r3
 80005f6:	f003 fbcb 	bl	8003d90 <puts>
	SX1278_init(&SX1278, 434000000, SX1278_POWER_17DBM, SX1278_LORA_SF_7,
 80005fa:	4968      	ldr	r1, [pc, #416]	; (800079c <main+0x1f8>)
 80005fc:	2200      	movs	r2, #0
 80005fe:	4865      	ldr	r0, [pc, #404]	; (8000794 <main+0x1f0>)
 8000600:	230a      	movs	r3, #10
 8000602:	9305      	str	r3, [sp, #20]
 8000604:	2300      	movs	r3, #0
 8000606:	9304      	str	r3, [sp, #16]
 8000608:	2300      	movs	r3, #0
 800060a:	9303      	str	r3, [sp, #12]
 800060c:	2307      	movs	r3, #7
 800060e:	9302      	str	r3, [sp, #8]
 8000610:	2301      	movs	r3, #1
 8000612:	9301      	str	r3, [sp, #4]
 8000614:	2301      	movs	r3, #1
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	0013      	movs	r3, r2
 800061a:	000a      	movs	r2, r1
 800061c:	f003 f9de 	bl	80039dc <SX1278_init>
			SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 10);
	printf("Done configuring LoRaModule\r\n");
 8000620:	4b5f      	ldr	r3, [pc, #380]	; (80007a0 <main+0x1fc>)
 8000622:	0018      	movs	r0, r3
 8000624:	f003 fbb4 	bl	8003d90 <puts>

	master = 0;
 8000628:	4b5e      	ldr	r3, [pc, #376]	; (80007a4 <main+0x200>)
 800062a:	2200      	movs	r2, #0
 800062c:	601a      	str	r2, [r3, #0]
	if (master == 1) {
 800062e:	4b5d      	ldr	r3, [pc, #372]	; (80007a4 <main+0x200>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	2b01      	cmp	r3, #1
 8000634:	d111      	bne.n	800065a <main+0xb6>
		ret = SX1278_LoRaEntryTx(&SX1278, 16, 1000);
 8000636:	23fa      	movs	r3, #250	; 0xfa
 8000638:	009a      	lsls	r2, r3, #2
 800063a:	4b56      	ldr	r3, [pc, #344]	; (8000794 <main+0x1f0>)
 800063c:	2110      	movs	r1, #16
 800063e:	0018      	movs	r0, r3
 8000640:	f003 f91b 	bl	800387a <SX1278_LoRaEntryTx>
 8000644:	0002      	movs	r2, r0
 8000646:	4b58      	ldr	r3, [pc, #352]	; (80007a8 <main+0x204>)
 8000648:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_SET);
 800064a:	2390      	movs	r3, #144	; 0x90
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	2201      	movs	r2, #1
 8000650:	2101      	movs	r1, #1
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fe07 	bl	8001266 <HAL_GPIO_WritePin>
 8000658:	e010      	b.n	800067c <main+0xd8>
	} else {
		ret = SX1278_LoRaEntryRx(&SX1278, 16, 1000);
 800065a:	23fa      	movs	r3, #250	; 0xfa
 800065c:	009a      	lsls	r2, r3, #2
 800065e:	4b4d      	ldr	r3, [pc, #308]	; (8000794 <main+0x1f0>)
 8000660:	2110      	movs	r1, #16
 8000662:	0018      	movs	r0, r3
 8000664:	f003 f83e 	bl	80036e4 <SX1278_LoRaEntryRx>
 8000668:	0002      	movs	r2, r0
 800066a:	4b4f      	ldr	r3, [pc, #316]	; (80007a8 <main+0x204>)
 800066c:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 800066e:	2390      	movs	r3, #144	; 0x90
 8000670:	05db      	lsls	r3, r3, #23
 8000672:	2200      	movs	r2, #0
 8000674:	2101      	movs	r1, #1
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fdf5 	bl	8001266 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 		if (master == 1) {
 800067c:	4b49      	ldr	r3, [pc, #292]	; (80007a4 <main+0x200>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	2b01      	cmp	r3, #1
 8000682:	d14c      	bne.n	800071e <main+0x17a>
			printf("Master ...\r\n");
 8000684:	4b49      	ldr	r3, [pc, #292]	; (80007ac <main+0x208>)
 8000686:	0018      	movs	r0, r3
 8000688:	f003 fb82 	bl	8003d90 <puts>
			HAL_Delay(1000);
 800068c:	23fa      	movs	r3, #250	; 0xfa
 800068e:	009b      	lsls	r3, r3, #2
 8000690:	0018      	movs	r0, r3
 8000692:	f000 fb7d 	bl	8000d90 <HAL_Delay>
			printf("Sending package...\r\n");
 8000696:	4b46      	ldr	r3, [pc, #280]	; (80007b0 <main+0x20c>)
 8000698:	0018      	movs	r0, r3
 800069a:	f003 fb79 	bl	8003d90 <puts>

			message_length = sprintf(buffer, "Hello %d", message);
 800069e:	4b45      	ldr	r3, [pc, #276]	; (80007b4 <main+0x210>)
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	4945      	ldr	r1, [pc, #276]	; (80007b8 <main+0x214>)
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x218>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f003 fb7c 	bl	8003da4 <siprintf>
 80006ac:	0002      	movs	r2, r0
 80006ae:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <main+0x21c>)
 80006b0:	601a      	str	r2, [r3, #0]
			ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 80006b2:	4b43      	ldr	r3, [pc, #268]	; (80007c0 <main+0x21c>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	b2d9      	uxtb	r1, r3
 80006b8:	23fa      	movs	r3, #250	; 0xfa
 80006ba:	00da      	lsls	r2, r3, #3
 80006bc:	4b35      	ldr	r3, [pc, #212]	; (8000794 <main+0x1f0>)
 80006be:	0018      	movs	r0, r3
 80006c0:	f003 f8db 	bl	800387a <SX1278_LoRaEntryTx>
 80006c4:	0002      	movs	r2, r0
 80006c6:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <main+0x204>)
 80006c8:	601a      	str	r2, [r3, #0]
			printf("Entry: %d\r\n", ret);
 80006ca:	4b37      	ldr	r3, [pc, #220]	; (80007a8 <main+0x204>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4b3d      	ldr	r3, [pc, #244]	; (80007c4 <main+0x220>)
 80006d0:	0011      	movs	r1, r2
 80006d2:	0018      	movs	r0, r3
 80006d4:	f003 fae2 	bl	8003c9c <iprintf>

			printf("Sending %s\r\n", buffer);
 80006d8:	4a38      	ldr	r2, [pc, #224]	; (80007bc <main+0x218>)
 80006da:	4b3b      	ldr	r3, [pc, #236]	; (80007c8 <main+0x224>)
 80006dc:	0011      	movs	r1, r2
 80006de:	0018      	movs	r0, r3
 80006e0:	f003 fadc 	bl	8003c9c <iprintf>
			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 80006e4:	4b36      	ldr	r3, [pc, #216]	; (80007c0 <main+0x21c>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	23fa      	movs	r3, #250	; 0xfa
 80006ec:	00db      	lsls	r3, r3, #3
 80006ee:	4933      	ldr	r1, [pc, #204]	; (80007bc <main+0x218>)
 80006f0:	4828      	ldr	r0, [pc, #160]	; (8000794 <main+0x1f0>)
 80006f2:	f003 f92f 	bl	8003954 <SX1278_LoRaTxPacket>
 80006f6:	0002      	movs	r2, r0
 80006f8:	4b2b      	ldr	r3, [pc, #172]	; (80007a8 <main+0x204>)
 80006fa:	601a      	str	r2, [r3, #0]
					message_length, 2000);
			message += 1;
 80006fc:	4b2d      	ldr	r3, [pc, #180]	; (80007b4 <main+0x210>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	1c5a      	adds	r2, r3, #1
 8000702:	4b2c      	ldr	r3, [pc, #176]	; (80007b4 <main+0x210>)
 8000704:	601a      	str	r2, [r3, #0]

			printf("Transmission: %d\r\n", ret);
 8000706:	4b28      	ldr	r3, [pc, #160]	; (80007a8 <main+0x204>)
 8000708:	681a      	ldr	r2, [r3, #0]
 800070a:	4b30      	ldr	r3, [pc, #192]	; (80007cc <main+0x228>)
 800070c:	0011      	movs	r1, r2
 800070e:	0018      	movs	r0, r3
 8000710:	f003 fac4 	bl	8003c9c <iprintf>
			printf("Package sent...\r\n");
 8000714:	4b2e      	ldr	r3, [pc, #184]	; (80007d0 <main+0x22c>)
 8000716:	0018      	movs	r0, r3
 8000718:	f003 fb3a 	bl	8003d90 <puts>
 800071c:	e7ae      	b.n	800067c <main+0xd8>

		} else {
			printf("Slave ...\r\n");
 800071e:	4b2d      	ldr	r3, [pc, #180]	; (80007d4 <main+0x230>)
 8000720:	0018      	movs	r0, r3
 8000722:	f003 fb35 	bl	8003d90 <puts>
			HAL_Delay(100);
 8000726:	2064      	movs	r0, #100	; 0x64
 8000728:	f000 fb32 	bl	8000d90 <HAL_Delay>
			printf("Receiving package...\r\n");
 800072c:	4b2a      	ldr	r3, [pc, #168]	; (80007d8 <main+0x234>)
 800072e:	0018      	movs	r0, r3
 8000730:	f003 fb2e 	bl	8003d90 <puts>

			ret = SX1278_LoRaRxPacket(&SX1278);
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <main+0x1f0>)
 8000736:	0018      	movs	r0, r3
 8000738:	f003 f84c 	bl	80037d4 <SX1278_LoRaRxPacket>
 800073c:	0003      	movs	r3, r0
 800073e:	001a      	movs	r2, r3
 8000740:	4b19      	ldr	r3, [pc, #100]	; (80007a8 <main+0x204>)
 8000742:	601a      	str	r2, [r3, #0]
			printf("Received: %d\r\n", ret);
 8000744:	4b18      	ldr	r3, [pc, #96]	; (80007a8 <main+0x204>)
 8000746:	681a      	ldr	r2, [r3, #0]
 8000748:	4b24      	ldr	r3, [pc, #144]	; (80007dc <main+0x238>)
 800074a:	0011      	movs	r1, r2
 800074c:	0018      	movs	r0, r3
 800074e:	f003 faa5 	bl	8003c9c <iprintf>
			if (ret > 0) {
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <main+0x204>)
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	2b00      	cmp	r3, #0
 8000758:	dd0e      	ble.n	8000778 <main+0x1d4>
				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 800075a:	4b13      	ldr	r3, [pc, #76]	; (80007a8 <main+0x204>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4916      	ldr	r1, [pc, #88]	; (80007bc <main+0x218>)
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <main+0x1f0>)
 8000764:	0018      	movs	r0, r3
 8000766:	f003 f96f 	bl	8003a48 <SX1278_read>
				printf("Content (%d): %s\r\n", ret, buffer);
 800076a:	4b0f      	ldr	r3, [pc, #60]	; (80007a8 <main+0x204>)
 800076c:	6819      	ldr	r1, [r3, #0]
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <main+0x218>)
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <main+0x23c>)
 8000772:	0018      	movs	r0, r3
 8000774:	f003 fa92 	bl	8003c9c <iprintf>
			}
			printf("Package received ...\r\n");
 8000778:	4b1a      	ldr	r3, [pc, #104]	; (80007e4 <main+0x240>)
 800077a:	0018      	movs	r0, r3
 800077c:	f003 fb08 	bl	8003d90 <puts>
 		if (master == 1) {
 8000780:	e77c      	b.n	800067c <main+0xd8>
 8000782:	46c0      	nop			; (mov r8, r8)
 8000784:	200003bc 	.word	0x200003bc
 8000788:	48000800 	.word	0x48000800
 800078c:	48000400 	.word	0x48000400
 8000790:	200003dc 	.word	0x200003dc
 8000794:	200002a0 	.word	0x200002a0
 8000798:	08004f38 	.word	0x08004f38
 800079c:	19de5080 	.word	0x19de5080
 80007a0:	08004f54 	.word	0x08004f54
 80007a4:	200003d8 	.word	0x200003d8
 80007a8:	200003b8 	.word	0x200003b8
 80007ac:	08004f74 	.word	0x08004f74
 80007b0:	08004f80 	.word	0x08004f80
 80007b4:	2000009c 	.word	0x2000009c
 80007b8:	08004f94 	.word	0x08004f94
 80007bc:	200000a0 	.word	0x200000a0
 80007c0:	20000098 	.word	0x20000098
 80007c4:	08004fa0 	.word	0x08004fa0
 80007c8:	08004fac 	.word	0x08004fac
 80007cc:	08004fbc 	.word	0x08004fbc
 80007d0:	08004fd0 	.word	0x08004fd0
 80007d4:	08004fe4 	.word	0x08004fe4
 80007d8:	08004ff0 	.word	0x08004ff0
 80007dc:	08005008 	.word	0x08005008
 80007e0:	08005018 	.word	0x08005018
 80007e4:	0800502c 	.word	0x0800502c

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b099      	sub	sp, #100	; 0x64
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	242c      	movs	r4, #44	; 0x2c
 80007f0:	193b      	adds	r3, r7, r4
 80007f2:	0018      	movs	r0, r3
 80007f4:	2334      	movs	r3, #52	; 0x34
 80007f6:	001a      	movs	r2, r3
 80007f8:	2100      	movs	r1, #0
 80007fa:	f003 fa46 	bl	8003c8a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fe:	231c      	movs	r3, #28
 8000800:	18fb      	adds	r3, r7, r3
 8000802:	0018      	movs	r0, r3
 8000804:	2310      	movs	r3, #16
 8000806:	001a      	movs	r2, r3
 8000808:	2100      	movs	r1, #0
 800080a:	f003 fa3e 	bl	8003c8a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800080e:	003b      	movs	r3, r7
 8000810:	0018      	movs	r0, r3
 8000812:	231c      	movs	r3, #28
 8000814:	001a      	movs	r2, r3
 8000816:	2100      	movs	r1, #0
 8000818:	f003 fa37 	bl	8003c8a <memset>

  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800081c:	193b      	adds	r3, r7, r4
 800081e:	2220      	movs	r2, #32
 8000820:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2201      	movs	r2, #1
 8000826:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000828:	193b      	adds	r3, r7, r4
 800082a:	2200      	movs	r2, #0
 800082c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	193b      	adds	r3, r7, r4
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fd35 	bl	80012a0 <HAL_RCC_OscConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800083a:	f000 f83d 	bl	80008b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	211c      	movs	r1, #28
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2207      	movs	r2, #7
 8000844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2203      	movs	r2, #3
 800084a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2101      	movs	r1, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f001 f8a5 	bl	80019ac <HAL_RCC_ClockConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000866:	f000 f827 	bl	80008b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800086a:	003b      	movs	r3, r7
 800086c:	2202      	movs	r2, #2
 800086e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000870:	003b      	movs	r3, r7
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	003b      	movs	r3, r7
 8000878:	0018      	movs	r0, r3
 800087a:	f001 fa0f 	bl	8001c9c <HAL_RCCEx_PeriphCLKConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000882:	f000 f819 	bl	80008b8 <Error_Handler>
  }
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b019      	add	sp, #100	; 0x64
 800088c:	bd90      	pop	{r4, r7, pc}
	...

08000890 <__io_putchar>:
 * @brief Retargets the C library printf function to the USART.
 * @param None
 * @retval None
 */
PUTCHAR_PROTOTYPE
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b082      	sub	sp, #8
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
 /* Place your implementation of fputc here */
 /* e.g. write a character to the USART2 and Loop until the end of transmission */
 HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000898:	4b05      	ldr	r3, [pc, #20]	; (80008b0 <__io_putchar+0x20>)
 800089a:	1d39      	adds	r1, r7, #4
 800089c:	4805      	ldr	r0, [pc, #20]	; (80008b4 <__io_putchar+0x24>)
 800089e:	2201      	movs	r2, #1
 80008a0:	f002 f8dc 	bl	8002a5c <HAL_UART_Transmit>

return ch;
 80008a4:	687b      	ldr	r3, [r7, #4]
}
 80008a6:	0018      	movs	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b002      	add	sp, #8
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	0000ffff 	.word	0x0000ffff
 80008b4:	20000440 	.word	0x20000440

080008b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	while (1) {
 80008bc:	e7fe      	b.n	80008bc <Error_Handler+0x4>
	...

080008c0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 80008c4:	4b1b      	ldr	r3, [pc, #108]	; (8000934 <MX_SPI1_Init+0x74>)
 80008c6:	4a1c      	ldr	r2, [pc, #112]	; (8000938 <MX_SPI1_Init+0x78>)
 80008c8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008ca:	4b1a      	ldr	r3, [pc, #104]	; (8000934 <MX_SPI1_Init+0x74>)
 80008cc:	2282      	movs	r2, #130	; 0x82
 80008ce:	0052      	lsls	r2, r2, #1
 80008d0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008d2:	4b18      	ldr	r3, [pc, #96]	; (8000934 <MX_SPI1_Init+0x74>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008d8:	4b16      	ldr	r3, [pc, #88]	; (8000934 <MX_SPI1_Init+0x74>)
 80008da:	22e0      	movs	r2, #224	; 0xe0
 80008dc:	00d2      	lsls	r2, r2, #3
 80008de:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008e0:	4b14      	ldr	r3, [pc, #80]	; (8000934 <MX_SPI1_Init+0x74>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008e6:	4b13      	ldr	r3, [pc, #76]	; (8000934 <MX_SPI1_Init+0x74>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <MX_SPI1_Init+0x74>)
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0092      	lsls	r2, r2, #2
 80008f2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80008f4:	4b0f      	ldr	r3, [pc, #60]	; (8000934 <MX_SPI1_Init+0x74>)
 80008f6:	2208      	movs	r2, #8
 80008f8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008fa:	4b0e      	ldr	r3, [pc, #56]	; (8000934 <MX_SPI1_Init+0x74>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000900:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <MX_SPI1_Init+0x74>)
 8000902:	2200      	movs	r2, #0
 8000904:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000906:	4b0b      	ldr	r3, [pc, #44]	; (8000934 <MX_SPI1_Init+0x74>)
 8000908:	2200      	movs	r2, #0
 800090a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800090c:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_SPI1_Init+0x74>)
 800090e:	2207      	movs	r2, #7
 8000910:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000912:	4b08      	ldr	r3, [pc, #32]	; (8000934 <MX_SPI1_Init+0x74>)
 8000914:	2200      	movs	r2, #0
 8000916:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <MX_SPI1_Init+0x74>)
 800091a:	2208      	movs	r2, #8
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800091e:	4b05      	ldr	r3, [pc, #20]	; (8000934 <MX_SPI1_Init+0x74>)
 8000920:	0018      	movs	r0, r3
 8000922:	f001 fabb 	bl	8001e9c <HAL_SPI_Init>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f7ff ffc5 	bl	80008b8 <Error_Handler>
  }

}
 800092e:	46c0      	nop			; (mov r8, r8)
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	200003dc 	.word	0x200003dc
 8000938:	40013000 	.word	0x40013000

0800093c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	2314      	movs	r3, #20
 8000946:	18fb      	adds	r3, r7, r3
 8000948:	0018      	movs	r0, r3
 800094a:	2314      	movs	r3, #20
 800094c:	001a      	movs	r2, r3
 800094e:	2100      	movs	r1, #0
 8000950:	f003 f99b 	bl	8003c8a <memset>
  if(spiHandle->Instance==SPI1)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	4a1c      	ldr	r2, [pc, #112]	; (80009cc <HAL_SPI_MspInit+0x90>)
 800095a:	4293      	cmp	r3, r2
 800095c:	d132      	bne.n	80009c4 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800095e:	4b1c      	ldr	r3, [pc, #112]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000960:	699a      	ldr	r2, [r3, #24]
 8000962:	4b1b      	ldr	r3, [pc, #108]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0149      	lsls	r1, r1, #5
 8000968:	430a      	orrs	r2, r1
 800096a:	619a      	str	r2, [r3, #24]
 800096c:	4b18      	ldr	r3, [pc, #96]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800096e:	699a      	ldr	r2, [r3, #24]
 8000970:	2380      	movs	r3, #128	; 0x80
 8000972:	015b      	lsls	r3, r3, #5
 8000974:	4013      	ands	r3, r2
 8000976:	613b      	str	r3, [r7, #16]
 8000978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800097a:	4b15      	ldr	r3, [pc, #84]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800097c:	695a      	ldr	r2, [r3, #20]
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 8000980:	2180      	movs	r1, #128	; 0x80
 8000982:	0289      	lsls	r1, r1, #10
 8000984:	430a      	orrs	r2, r1
 8000986:	615a      	str	r2, [r3, #20]
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <HAL_SPI_MspInit+0x94>)
 800098a:	695a      	ldr	r2, [r3, #20]
 800098c:	2380      	movs	r3, #128	; 0x80
 800098e:	029b      	lsls	r3, r3, #10
 8000990:	4013      	ands	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]
 8000994:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000996:	2114      	movs	r1, #20
 8000998:	187b      	adds	r3, r7, r1
 800099a:	22e0      	movs	r2, #224	; 0xe0
 800099c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	187b      	adds	r3, r7, r1
 80009a0:	2202      	movs	r2, #2
 80009a2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a4:	187b      	adds	r3, r7, r1
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009aa:	187b      	adds	r3, r7, r1
 80009ac:	2203      	movs	r2, #3
 80009ae:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009b0:	187b      	adds	r3, r7, r1
 80009b2:	2200      	movs	r2, #0
 80009b4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	187a      	adds	r2, r7, r1
 80009b8:	2390      	movs	r3, #144	; 0x90
 80009ba:	05db      	lsls	r3, r3, #23
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f000 fabc 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	b00a      	add	sp, #40	; 0x28
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40013000 	.word	0x40013000
 80009d0:	40021000 	.word	0x40021000

080009d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009da:	4b0f      	ldr	r3, [pc, #60]	; (8000a18 <HAL_MspInit+0x44>)
 80009dc:	699a      	ldr	r2, [r3, #24]
 80009de:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_MspInit+0x44>)
 80009e0:	2101      	movs	r1, #1
 80009e2:	430a      	orrs	r2, r1
 80009e4:	619a      	str	r2, [r3, #24]
 80009e6:	4b0c      	ldr	r3, [pc, #48]	; (8000a18 <HAL_MspInit+0x44>)
 80009e8:	699b      	ldr	r3, [r3, #24]
 80009ea:	2201      	movs	r2, #1
 80009ec:	4013      	ands	r3, r2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f2:	4b09      	ldr	r3, [pc, #36]	; (8000a18 <HAL_MspInit+0x44>)
 80009f4:	69da      	ldr	r2, [r3, #28]
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_MspInit+0x44>)
 80009f8:	2180      	movs	r1, #128	; 0x80
 80009fa:	0549      	lsls	r1, r1, #21
 80009fc:	430a      	orrs	r2, r1
 80009fe:	61da      	str	r2, [r3, #28]
 8000a00:	4b05      	ldr	r3, [pc, #20]	; (8000a18 <HAL_MspInit+0x44>)
 8000a02:	69da      	ldr	r2, [r3, #28]
 8000a04:	2380      	movs	r3, #128	; 0x80
 8000a06:	055b      	lsls	r3, r3, #21
 8000a08:	4013      	ands	r3, r2
 8000a0a:	603b      	str	r3, [r7, #0]
 8000a0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b002      	add	sp, #8
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40021000 	.word	0x40021000

08000a1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2a:	e7fe      	b.n	8000a2a <HardFault_Handler+0x4>

08000a2c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a30:	46c0      	nop			; (mov r8, r8)
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a3a:	46c0      	nop			; (mov r8, r8)
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f988 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	46c0      	nop			; (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	b086      	sub	sp, #24
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	60f8      	str	r0, [r7, #12]
 8000a56:	60b9      	str	r1, [r7, #8]
 8000a58:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e00a      	b.n	8000a76 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a60:	e000      	b.n	8000a64 <_read+0x16>
 8000a62:	bf00      	nop
 8000a64:	0001      	movs	r1, r0
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	60ba      	str	r2, [r7, #8]
 8000a6c:	b2ca      	uxtb	r2, r1
 8000a6e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbf0      	blt.n	8000a60 <_read+0x12>
	}

return len;
 8000a7e:	687b      	ldr	r3, [r7, #4]
}
 8000a80:	0018      	movs	r0, r3
 8000a82:	46bd      	mov	sp, r7
 8000a84:	b006      	add	sp, #24
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b086      	sub	sp, #24
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	60f8      	str	r0, [r7, #12]
 8000a90:	60b9      	str	r1, [r7, #8]
 8000a92:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]
 8000a98:	e009      	b.n	8000aae <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000a9a:	68bb      	ldr	r3, [r7, #8]
 8000a9c:	1c5a      	adds	r2, r3, #1
 8000a9e:	60ba      	str	r2, [r7, #8]
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	0018      	movs	r0, r3
 8000aa4:	f7ff fef4 	bl	8000890 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
 8000aae:	697a      	ldr	r2, [r7, #20]
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	429a      	cmp	r2, r3
 8000ab4:	dbf1      	blt.n	8000a9a <_write+0x12>
	}
	return len;
 8000ab6:	687b      	ldr	r3, [r7, #4]
}
 8000ab8:	0018      	movs	r0, r3
 8000aba:	46bd      	mov	sp, r7
 8000abc:	b006      	add	sp, #24
 8000abe:	bd80      	pop	{r7, pc}

08000ac0 <_close>:

int _close(int file)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b082      	sub	sp, #8
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	6078      	str	r0, [r7, #4]
	return -1;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	425b      	negs	r3, r3
}
 8000acc:	0018      	movs	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	b002      	add	sp, #8
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b082      	sub	sp, #8
 8000ad8:	af00      	add	r7, sp, #0
 8000ada:	6078      	str	r0, [r7, #4]
 8000adc:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ade:	683b      	ldr	r3, [r7, #0]
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	0192      	lsls	r2, r2, #6
 8000ae4:	605a      	str	r2, [r3, #4]
	return 0;
 8000ae6:	2300      	movs	r3, #0
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b002      	add	sp, #8
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_isatty>:

int _isatty(int file)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b082      	sub	sp, #8
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
	return 1;
 8000af8:	2301      	movs	r3, #1
}
 8000afa:	0018      	movs	r0, r3
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}

08000b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b02:	b580      	push	{r7, lr}
 8000b04:	b084      	sub	sp, #16
 8000b06:	af00      	add	r7, sp, #0
 8000b08:	60f8      	str	r0, [r7, #12]
 8000b0a:	60b9      	str	r1, [r7, #8]
 8000b0c:	607a      	str	r2, [r7, #4]
	return 0;
 8000b0e:	2300      	movs	r3, #0
}
 8000b10:	0018      	movs	r0, r3
 8000b12:	46bd      	mov	sp, r7
 8000b14:	b004      	add	sp, #16
 8000b16:	bd80      	pop	{r7, pc}

08000b18 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b084      	sub	sp, #16
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000b20:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <_sbrk+0x50>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d102      	bne.n	8000b2e <_sbrk+0x16>
		heap_end = &end;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <_sbrk+0x50>)
 8000b2a:	4a10      	ldr	r2, [pc, #64]	; (8000b6c <_sbrk+0x54>)
 8000b2c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <_sbrk+0x50>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <_sbrk+0x50>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	18d3      	adds	r3, r2, r3
 8000b3c:	466a      	mov	r2, sp
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d907      	bls.n	8000b52 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000b42:	f003 f86f 	bl	8003c24 <__errno>
 8000b46:	0003      	movs	r3, r0
 8000b48:	220c      	movs	r2, #12
 8000b4a:	601a      	str	r2, [r3, #0]
		return (caddr_t) -1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	425b      	negs	r3, r3
 8000b50:	e006      	b.n	8000b60 <_sbrk+0x48>
	}

	heap_end += incr;
 8000b52:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <_sbrk+0x50>)
 8000b54:	681a      	ldr	r2, [r3, #0]
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	18d2      	adds	r2, r2, r3
 8000b5a:	4b03      	ldr	r3, [pc, #12]	; (8000b68 <_sbrk+0x50>)
 8000b5c:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
}
 8000b60:	0018      	movs	r0, r3
 8000b62:	46bd      	mov	sp, r7
 8000b64:	b004      	add	sp, #16
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	2000008c 	.word	0x2000008c
 8000b6c:	200004c8 	.word	0x200004c8

08000b70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
	...

08000b7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000b80:	4b14      	ldr	r3, [pc, #80]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b82:	4a15      	ldr	r2, [pc, #84]	; (8000bd8 <MX_USART2_UART_Init+0x5c>)
 8000b84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000b86:	4b13      	ldr	r3, [pc, #76]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b88:	2296      	movs	r2, #150	; 0x96
 8000b8a:	0212      	lsls	r2, r2, #8
 8000b8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba2:	220c      	movs	r2, #12
 8000ba4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ba6:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bb2:	4b08      	ldr	r3, [pc, #32]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bb8:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bbe:	4b05      	ldr	r3, [pc, #20]	; (8000bd4 <MX_USART2_UART_Init+0x58>)
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	f001 fef7 	bl	80029b4 <HAL_UART_Init>
 8000bc6:	1e03      	subs	r3, r0, #0
 8000bc8:	d001      	beq.n	8000bce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bca:	f7ff fe75 	bl	80008b8 <Error_Handler>
  }

}
 8000bce:	46c0      	nop			; (mov r8, r8)
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20000440 	.word	0x20000440
 8000bd8:	40004400 	.word	0x40004400

08000bdc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b08a      	sub	sp, #40	; 0x28
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be4:	2314      	movs	r3, #20
 8000be6:	18fb      	adds	r3, r7, r3
 8000be8:	0018      	movs	r0, r3
 8000bea:	2314      	movs	r3, #20
 8000bec:	001a      	movs	r2, r3
 8000bee:	2100      	movs	r1, #0
 8000bf0:	f003 f84b 	bl	8003c8a <memset>
  if(uartHandle->Instance==USART2)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	681b      	ldr	r3, [r3, #0]
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <HAL_UART_MspInit+0x90>)
 8000bfa:	4293      	cmp	r3, r2
 8000bfc:	d132      	bne.n	8000c64 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c00:	69da      	ldr	r2, [r3, #28]
 8000c02:	4b1b      	ldr	r3, [pc, #108]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c04:	2180      	movs	r1, #128	; 0x80
 8000c06:	0289      	lsls	r1, r1, #10
 8000c08:	430a      	orrs	r2, r1
 8000c0a:	61da      	str	r2, [r3, #28]
 8000c0c:	4b18      	ldr	r3, [pc, #96]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c0e:	69da      	ldr	r2, [r3, #28]
 8000c10:	2380      	movs	r3, #128	; 0x80
 8000c12:	029b      	lsls	r3, r3, #10
 8000c14:	4013      	ands	r3, r2
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1a:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c1c:	695a      	ldr	r2, [r3, #20]
 8000c1e:	4b14      	ldr	r3, [pc, #80]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c20:	2180      	movs	r1, #128	; 0x80
 8000c22:	0289      	lsls	r1, r1, #10
 8000c24:	430a      	orrs	r2, r1
 8000c26:	615a      	str	r2, [r3, #20]
 8000c28:	4b11      	ldr	r3, [pc, #68]	; (8000c70 <HAL_UART_MspInit+0x94>)
 8000c2a:	695a      	ldr	r2, [r3, #20]
 8000c2c:	2380      	movs	r3, #128	; 0x80
 8000c2e:	029b      	lsls	r3, r3, #10
 8000c30:	4013      	ands	r3, r2
 8000c32:	60fb      	str	r3, [r7, #12]
 8000c34:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c36:	2114      	movs	r1, #20
 8000c38:	187b      	adds	r3, r7, r1
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	187b      	adds	r3, r7, r1
 8000c40:	2202      	movs	r2, #2
 8000c42:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c44:	187b      	adds	r3, r7, r1
 8000c46:	2200      	movs	r2, #0
 8000c48:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	187b      	adds	r3, r7, r1
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000c50:	187b      	adds	r3, r7, r1
 8000c52:	2201      	movs	r2, #1
 8000c54:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c56:	187a      	adds	r2, r7, r1
 8000c58:	2390      	movs	r3, #144	; 0x90
 8000c5a:	05db      	lsls	r3, r3, #23
 8000c5c:	0011      	movs	r1, r2
 8000c5e:	0018      	movs	r0, r3
 8000c60:	f000 f96c 	bl	8000f3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c64:	46c0      	nop			; (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	b00a      	add	sp, #40	; 0x28
 8000c6a:	bd80      	pop	{r7, pc}
 8000c6c:	40004400 	.word	0x40004400
 8000c70:	40021000 	.word	0x40021000

08000c74 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c74:	480d      	ldr	r0, [pc, #52]	; (8000cac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c76:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c78:	480d      	ldr	r0, [pc, #52]	; (8000cb0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c7a:	490e      	ldr	r1, [pc, #56]	; (8000cb4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c7c:	4a0e      	ldr	r2, [pc, #56]	; (8000cb8 <LoopForever+0xe>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c80:	e002      	b.n	8000c88 <LoopCopyDataInit>

08000c82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c86:	3304      	adds	r3, #4

08000c88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c8c:	d3f9      	bcc.n	8000c82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c8e:	4a0b      	ldr	r2, [pc, #44]	; (8000cbc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c90:	4c0b      	ldr	r4, [pc, #44]	; (8000cc0 <LoopForever+0x16>)
  movs r3, #0
 8000c92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c94:	e001      	b.n	8000c9a <LoopFillZerobss>

08000c96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c98:	3204      	adds	r2, #4

08000c9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c9c:	d3fb      	bcc.n	8000c96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c9e:	f7ff ff67 	bl	8000b70 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000ca2:	f002 ffc5 	bl	8003c30 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ca6:	f7ff fc7d 	bl	80005a4 <main>

08000caa <LoopForever>:

LoopForever:
    b LoopForever
 8000caa:	e7fe      	b.n	8000caa <LoopForever>
  ldr   r0, =_estack
 8000cac:	20004000 	.word	0x20004000
  ldr r0, =_sdata
 8000cb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cb4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000cb8:	08005144 	.word	0x08005144
  ldr r2, =_sbss
 8000cbc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000cc0:	200004c8 	.word	0x200004c8

08000cc4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cc4:	e7fe      	b.n	8000cc4 <ADC1_COMP_IRQHandler>
	...

08000cc8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ccc:	4b07      	ldr	r3, [pc, #28]	; (8000cec <HAL_Init+0x24>)
 8000cce:	681a      	ldr	r2, [r3, #0]
 8000cd0:	4b06      	ldr	r3, [pc, #24]	; (8000cec <HAL_Init+0x24>)
 8000cd2:	2110      	movs	r1, #16
 8000cd4:	430a      	orrs	r2, r1
 8000cd6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000cd8:	2000      	movs	r0, #0
 8000cda:	f000 f809 	bl	8000cf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cde:	f7ff fe79 	bl	80009d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ce2:	2300      	movs	r3, #0
}
 8000ce4:	0018      	movs	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	46c0      	nop			; (mov r8, r8)
 8000cec:	40022000 	.word	0x40022000

08000cf0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf0:	b590      	push	{r4, r7, lr}
 8000cf2:	b083      	sub	sp, #12
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_InitTick+0x5c>)
 8000cfa:	681c      	ldr	r4, [r3, #0]
 8000cfc:	4b14      	ldr	r3, [pc, #80]	; (8000d50 <HAL_InitTick+0x60>)
 8000cfe:	781b      	ldrb	r3, [r3, #0]
 8000d00:	0019      	movs	r1, r3
 8000d02:	23fa      	movs	r3, #250	; 0xfa
 8000d04:	0098      	lsls	r0, r3, #2
 8000d06:	f7ff f9ff 	bl	8000108 <__udivsi3>
 8000d0a:	0003      	movs	r3, r0
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0020      	movs	r0, r4
 8000d10:	f7ff f9fa 	bl	8000108 <__udivsi3>
 8000d14:	0003      	movs	r3, r0
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 f903 	bl	8000f22 <HAL_SYSTICK_Config>
 8000d1c:	1e03      	subs	r3, r0, #0
 8000d1e:	d001      	beq.n	8000d24 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d20:	2301      	movs	r3, #1
 8000d22:	e00f      	b.n	8000d44 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	2b03      	cmp	r3, #3
 8000d28:	d80b      	bhi.n	8000d42 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	425b      	negs	r3, r3
 8000d30:	2200      	movs	r2, #0
 8000d32:	0018      	movs	r0, r3
 8000d34:	f000 f8e0 	bl	8000ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4b06      	ldr	r3, [pc, #24]	; (8000d54 <HAL_InitTick+0x64>)
 8000d3a:	687a      	ldr	r2, [r7, #4]
 8000d3c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	0018      	movs	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b003      	add	sp, #12
 8000d4a:	bd90      	pop	{r4, r7, pc}
 8000d4c:	20000000 	.word	0x20000000
 8000d50:	20000008 	.word	0x20000008
 8000d54:	20000004 	.word	0x20000004

08000d58 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b05      	ldr	r3, [pc, #20]	; (8000d74 <HAL_IncTick+0x1c>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	001a      	movs	r2, r3
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <HAL_IncTick+0x20>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	18d2      	adds	r2, r2, r3
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <HAL_IncTick+0x20>)
 8000d6a:	601a      	str	r2, [r3, #0]
}
 8000d6c:	46c0      	nop			; (mov r8, r8)
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	20000008 	.word	0x20000008
 8000d78:	200004c0 	.word	0x200004c0

08000d7c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d80:	4b02      	ldr	r3, [pc, #8]	; (8000d8c <HAL_GetTick+0x10>)
 8000d82:	681b      	ldr	r3, [r3, #0]
}
 8000d84:	0018      	movs	r0, r3
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	46c0      	nop			; (mov r8, r8)
 8000d8c:	200004c0 	.word	0x200004c0

08000d90 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b084      	sub	sp, #16
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d98:	f7ff fff0 	bl	8000d7c <HAL_GetTick>
 8000d9c:	0003      	movs	r3, r0
 8000d9e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	3301      	adds	r3, #1
 8000da8:	d005      	beq.n	8000db6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000daa:	4b09      	ldr	r3, [pc, #36]	; (8000dd0 <HAL_Delay+0x40>)
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	001a      	movs	r2, r3
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	189b      	adds	r3, r3, r2
 8000db4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000db6:	46c0      	nop			; (mov r8, r8)
 8000db8:	f7ff ffe0 	bl	8000d7c <HAL_GetTick>
 8000dbc:	0002      	movs	r2, r0
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	68fa      	ldr	r2, [r7, #12]
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	d8f7      	bhi.n	8000db8 <HAL_Delay+0x28>
  {
  }
}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b004      	add	sp, #16
 8000dce:	bd80      	pop	{r7, pc}
 8000dd0:	20000008 	.word	0x20000008

08000dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	0002      	movs	r2, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	1dfb      	adds	r3, r7, #7
 8000de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000de2:	1dfb      	adds	r3, r7, #7
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	2b7f      	cmp	r3, #127	; 0x7f
 8000de8:	d828      	bhi.n	8000e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000dea:	4a2f      	ldr	r2, [pc, #188]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000dec:	1dfb      	adds	r3, r7, #7
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	089b      	lsrs	r3, r3, #2
 8000df4:	33c0      	adds	r3, #192	; 0xc0
 8000df6:	009b      	lsls	r3, r3, #2
 8000df8:	589b      	ldr	r3, [r3, r2]
 8000dfa:	1dfa      	adds	r2, r7, #7
 8000dfc:	7812      	ldrb	r2, [r2, #0]
 8000dfe:	0011      	movs	r1, r2
 8000e00:	2203      	movs	r2, #3
 8000e02:	400a      	ands	r2, r1
 8000e04:	00d2      	lsls	r2, r2, #3
 8000e06:	21ff      	movs	r1, #255	; 0xff
 8000e08:	4091      	lsls	r1, r2
 8000e0a:	000a      	movs	r2, r1
 8000e0c:	43d2      	mvns	r2, r2
 8000e0e:	401a      	ands	r2, r3
 8000e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	019b      	lsls	r3, r3, #6
 8000e16:	22ff      	movs	r2, #255	; 0xff
 8000e18:	401a      	ands	r2, r3
 8000e1a:	1dfb      	adds	r3, r7, #7
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	0018      	movs	r0, r3
 8000e20:	2303      	movs	r3, #3
 8000e22:	4003      	ands	r3, r0
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e28:	481f      	ldr	r0, [pc, #124]	; (8000ea8 <__NVIC_SetPriority+0xd4>)
 8000e2a:	1dfb      	adds	r3, r7, #7
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	b25b      	sxtb	r3, r3
 8000e30:	089b      	lsrs	r3, r3, #2
 8000e32:	430a      	orrs	r2, r1
 8000e34:	33c0      	adds	r3, #192	; 0xc0
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000e3a:	e031      	b.n	8000ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e3c:	4a1b      	ldr	r2, [pc, #108]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e3e:	1dfb      	adds	r3, r7, #7
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	0019      	movs	r1, r3
 8000e44:	230f      	movs	r3, #15
 8000e46:	400b      	ands	r3, r1
 8000e48:	3b08      	subs	r3, #8
 8000e4a:	089b      	lsrs	r3, r3, #2
 8000e4c:	3306      	adds	r3, #6
 8000e4e:	009b      	lsls	r3, r3, #2
 8000e50:	18d3      	adds	r3, r2, r3
 8000e52:	3304      	adds	r3, #4
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	1dfa      	adds	r2, r7, #7
 8000e58:	7812      	ldrb	r2, [r2, #0]
 8000e5a:	0011      	movs	r1, r2
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	400a      	ands	r2, r1
 8000e60:	00d2      	lsls	r2, r2, #3
 8000e62:	21ff      	movs	r1, #255	; 0xff
 8000e64:	4091      	lsls	r1, r2
 8000e66:	000a      	movs	r2, r1
 8000e68:	43d2      	mvns	r2, r2
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	019b      	lsls	r3, r3, #6
 8000e72:	22ff      	movs	r2, #255	; 0xff
 8000e74:	401a      	ands	r2, r3
 8000e76:	1dfb      	adds	r3, r7, #7
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	0018      	movs	r0, r3
 8000e7c:	2303      	movs	r3, #3
 8000e7e:	4003      	ands	r3, r0
 8000e80:	00db      	lsls	r3, r3, #3
 8000e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <__NVIC_SetPriority+0xd8>)
 8000e86:	1dfb      	adds	r3, r7, #7
 8000e88:	781b      	ldrb	r3, [r3, #0]
 8000e8a:	001c      	movs	r4, r3
 8000e8c:	230f      	movs	r3, #15
 8000e8e:	4023      	ands	r3, r4
 8000e90:	3b08      	subs	r3, #8
 8000e92:	089b      	lsrs	r3, r3, #2
 8000e94:	430a      	orrs	r2, r1
 8000e96:	3306      	adds	r3, #6
 8000e98:	009b      	lsls	r3, r3, #2
 8000e9a:	18c3      	adds	r3, r0, r3
 8000e9c:	3304      	adds	r3, #4
 8000e9e:	601a      	str	r2, [r3, #0]
}
 8000ea0:	46c0      	nop			; (mov r8, r8)
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	b003      	add	sp, #12
 8000ea6:	bd90      	pop	{r4, r7, pc}
 8000ea8:	e000e100 	.word	0xe000e100
 8000eac:	e000ed00 	.word	0xe000ed00

08000eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3b01      	subs	r3, #1
 8000ebc:	4a0c      	ldr	r2, [pc, #48]	; (8000ef0 <SysTick_Config+0x40>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d901      	bls.n	8000ec6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e010      	b.n	8000ee8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <SysTick_Config+0x44>)
 8000ec8:	687a      	ldr	r2, [r7, #4]
 8000eca:	3a01      	subs	r2, #1
 8000ecc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ece:	2301      	movs	r3, #1
 8000ed0:	425b      	negs	r3, r3
 8000ed2:	2103      	movs	r1, #3
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	f7ff ff7d 	bl	8000dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eda:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <SysTick_Config+0x44>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ee0:	4b04      	ldr	r3, [pc, #16]	; (8000ef4 <SysTick_Config+0x44>)
 8000ee2:	2207      	movs	r2, #7
 8000ee4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ee6:	2300      	movs	r3, #0
}
 8000ee8:	0018      	movs	r0, r3
 8000eea:	46bd      	mov	sp, r7
 8000eec:	b002      	add	sp, #8
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	00ffffff 	.word	0x00ffffff
 8000ef4:	e000e010 	.word	0xe000e010

08000ef8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b084      	sub	sp, #16
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
 8000f02:	210f      	movs	r1, #15
 8000f04:	187b      	adds	r3, r7, r1
 8000f06:	1c02      	adds	r2, r0, #0
 8000f08:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000f0a:	68ba      	ldr	r2, [r7, #8]
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	b25b      	sxtb	r3, r3
 8000f12:	0011      	movs	r1, r2
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff ff5d 	bl	8000dd4 <__NVIC_SetPriority>
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b004      	add	sp, #16
 8000f20:	bd80      	pop	{r7, pc}

08000f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f22:	b580      	push	{r7, lr}
 8000f24:	b082      	sub	sp, #8
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	0018      	movs	r0, r3
 8000f2e:	f7ff ffbf 	bl	8000eb0 <SysTick_Config>
 8000f32:	0003      	movs	r3, r0
}
 8000f34:	0018      	movs	r0, r3
 8000f36:	46bd      	mov	sp, r7
 8000f38:	b002      	add	sp, #8
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f4a:	e155      	b.n	80011f8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2101      	movs	r1, #1
 8000f52:	697a      	ldr	r2, [r7, #20]
 8000f54:	4091      	lsls	r1, r2
 8000f56:	000a      	movs	r2, r1
 8000f58:	4013      	ands	r3, r2
 8000f5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d100      	bne.n	8000f64 <HAL_GPIO_Init+0x28>
 8000f62:	e146      	b.n	80011f2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d00b      	beq.n	8000f84 <HAL_GPIO_Init+0x48>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d007      	beq.n	8000f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f78:	2b11      	cmp	r3, #17
 8000f7a:	d003      	beq.n	8000f84 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	685b      	ldr	r3, [r3, #4]
 8000f80:	2b12      	cmp	r3, #18
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	409a      	lsls	r2, r3
 8000fa6:	0013      	movs	r3, r2
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	0013      	movs	r3, r2
 8000fc2:	43da      	mvns	r2, r3
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	409a      	lsls	r2, r3
 8000fd8:	0013      	movs	r3, r2
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	68db      	ldr	r3, [r3, #12]
 8000fea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	005b      	lsls	r3, r3, #1
 8000ff0:	2203      	movs	r2, #3
 8000ff2:	409a      	lsls	r2, r3
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	43da      	mvns	r2, r3
 8000ff8:	693b      	ldr	r3, [r7, #16]
 8000ffa:	4013      	ands	r3, r2
 8000ffc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	689a      	ldr	r2, [r3, #8]
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	005b      	lsls	r3, r3, #1
 8001006:	409a      	lsls	r2, r3
 8001008:	0013      	movs	r3, r2
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	693a      	ldr	r2, [r7, #16]
 8001014:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b02      	cmp	r3, #2
 800101c:	d003      	beq.n	8001026 <HAL_GPIO_Init+0xea>
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	2b12      	cmp	r3, #18
 8001024:	d123      	bne.n	800106e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	08da      	lsrs	r2, r3, #3
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3208      	adds	r2, #8
 800102e:	0092      	lsls	r2, r2, #2
 8001030:	58d3      	ldr	r3, [r2, r3]
 8001032:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	2207      	movs	r2, #7
 8001038:	4013      	ands	r3, r2
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	220f      	movs	r2, #15
 800103e:	409a      	lsls	r2, r3
 8001040:	0013      	movs	r3, r2
 8001042:	43da      	mvns	r2, r3
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4013      	ands	r3, r2
 8001048:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	691a      	ldr	r2, [r3, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	2107      	movs	r1, #7
 8001052:	400b      	ands	r3, r1
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	409a      	lsls	r2, r3
 8001058:	0013      	movs	r3, r2
 800105a:	693a      	ldr	r2, [r7, #16]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	08da      	lsrs	r2, r3, #3
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	3208      	adds	r2, #8
 8001068:	0092      	lsls	r2, r2, #2
 800106a:	6939      	ldr	r1, [r7, #16]
 800106c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	409a      	lsls	r2, r3
 800107c:	0013      	movs	r3, r2
 800107e:	43da      	mvns	r2, r3
 8001080:	693b      	ldr	r3, [r7, #16]
 8001082:	4013      	ands	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2203      	movs	r2, #3
 800108c:	401a      	ands	r2, r3
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	409a      	lsls	r2, r3
 8001094:	0013      	movs	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685a      	ldr	r2, [r3, #4]
 80010a6:	2380      	movs	r3, #128	; 0x80
 80010a8:	055b      	lsls	r3, r3, #21
 80010aa:	4013      	ands	r3, r2
 80010ac:	d100      	bne.n	80010b0 <HAL_GPIO_Init+0x174>
 80010ae:	e0a0      	b.n	80011f2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b0:	4b57      	ldr	r3, [pc, #348]	; (8001210 <HAL_GPIO_Init+0x2d4>)
 80010b2:	699a      	ldr	r2, [r3, #24]
 80010b4:	4b56      	ldr	r3, [pc, #344]	; (8001210 <HAL_GPIO_Init+0x2d4>)
 80010b6:	2101      	movs	r1, #1
 80010b8:	430a      	orrs	r2, r1
 80010ba:	619a      	str	r2, [r3, #24]
 80010bc:	4b54      	ldr	r3, [pc, #336]	; (8001210 <HAL_GPIO_Init+0x2d4>)
 80010be:	699b      	ldr	r3, [r3, #24]
 80010c0:	2201      	movs	r2, #1
 80010c2:	4013      	ands	r3, r2
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010c8:	4a52      	ldr	r2, [pc, #328]	; (8001214 <HAL_GPIO_Init+0x2d8>)
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	089b      	lsrs	r3, r3, #2
 80010ce:	3302      	adds	r3, #2
 80010d0:	009b      	lsls	r3, r3, #2
 80010d2:	589b      	ldr	r3, [r3, r2]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010d6:	697b      	ldr	r3, [r7, #20]
 80010d8:	2203      	movs	r2, #3
 80010da:	4013      	ands	r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	220f      	movs	r2, #15
 80010e0:	409a      	lsls	r2, r3
 80010e2:	0013      	movs	r3, r2
 80010e4:	43da      	mvns	r2, r3
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	4013      	ands	r3, r2
 80010ea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	2390      	movs	r3, #144	; 0x90
 80010f0:	05db      	lsls	r3, r3, #23
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d019      	beq.n	800112a <HAL_GPIO_Init+0x1ee>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4a47      	ldr	r2, [pc, #284]	; (8001218 <HAL_GPIO_Init+0x2dc>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d013      	beq.n	8001126 <HAL_GPIO_Init+0x1ea>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a46      	ldr	r2, [pc, #280]	; (800121c <HAL_GPIO_Init+0x2e0>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d00d      	beq.n	8001122 <HAL_GPIO_Init+0x1e6>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4a45      	ldr	r2, [pc, #276]	; (8001220 <HAL_GPIO_Init+0x2e4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d007      	beq.n	800111e <HAL_GPIO_Init+0x1e2>
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	4a44      	ldr	r2, [pc, #272]	; (8001224 <HAL_GPIO_Init+0x2e8>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d101      	bne.n	800111a <HAL_GPIO_Init+0x1de>
 8001116:	2304      	movs	r3, #4
 8001118:	e008      	b.n	800112c <HAL_GPIO_Init+0x1f0>
 800111a:	2305      	movs	r3, #5
 800111c:	e006      	b.n	800112c <HAL_GPIO_Init+0x1f0>
 800111e:	2303      	movs	r3, #3
 8001120:	e004      	b.n	800112c <HAL_GPIO_Init+0x1f0>
 8001122:	2302      	movs	r3, #2
 8001124:	e002      	b.n	800112c <HAL_GPIO_Init+0x1f0>
 8001126:	2301      	movs	r3, #1
 8001128:	e000      	b.n	800112c <HAL_GPIO_Init+0x1f0>
 800112a:	2300      	movs	r3, #0
 800112c:	697a      	ldr	r2, [r7, #20]
 800112e:	2103      	movs	r1, #3
 8001130:	400a      	ands	r2, r1
 8001132:	0092      	lsls	r2, r2, #2
 8001134:	4093      	lsls	r3, r2
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800113c:	4935      	ldr	r1, [pc, #212]	; (8001214 <HAL_GPIO_Init+0x2d8>)
 800113e:	697b      	ldr	r3, [r7, #20]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	3302      	adds	r3, #2
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	693a      	ldr	r2, [r7, #16]
 8001148:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800114a:	4b37      	ldr	r3, [pc, #220]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	43da      	mvns	r2, r3
 8001154:	693b      	ldr	r3, [r7, #16]
 8001156:	4013      	ands	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	685a      	ldr	r2, [r3, #4]
 800115e:	2380      	movs	r3, #128	; 0x80
 8001160:	025b      	lsls	r3, r3, #9
 8001162:	4013      	ands	r3, r2
 8001164:	d003      	beq.n	800116e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001166:	693a      	ldr	r2, [r7, #16]
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	4313      	orrs	r3, r2
 800116c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800116e:	4b2e      	ldr	r3, [pc, #184]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001174:	4b2c      	ldr	r3, [pc, #176]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	43da      	mvns	r2, r3
 800117e:	693b      	ldr	r3, [r7, #16]
 8001180:	4013      	ands	r3, r2
 8001182:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685a      	ldr	r2, [r3, #4]
 8001188:	2380      	movs	r3, #128	; 0x80
 800118a:	029b      	lsls	r3, r3, #10
 800118c:	4013      	ands	r3, r2
 800118e:	d003      	beq.n	8001198 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001190:	693a      	ldr	r2, [r7, #16]
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001198:	4b23      	ldr	r3, [pc, #140]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119e:	4b22      	ldr	r3, [pc, #136]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	43da      	mvns	r2, r3
 80011a8:	693b      	ldr	r3, [r7, #16]
 80011aa:	4013      	ands	r3, r2
 80011ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	685a      	ldr	r2, [r3, #4]
 80011b2:	2380      	movs	r3, #128	; 0x80
 80011b4:	035b      	lsls	r3, r3, #13
 80011b6:	4013      	ands	r3, r2
 80011b8:	d003      	beq.n	80011c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ba:	693a      	ldr	r2, [r7, #16]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80011c2:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80011c8:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	43da      	mvns	r2, r3
 80011d2:	693b      	ldr	r3, [r7, #16]
 80011d4:	4013      	ands	r3, r2
 80011d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	039b      	lsls	r3, r3, #14
 80011e0:	4013      	ands	r3, r2
 80011e2:	d003      	beq.n	80011ec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80011e4:	693a      	ldr	r2, [r7, #16]
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ec:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_GPIO_Init+0x2ec>)
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	3301      	adds	r3, #1
 80011f6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	681a      	ldr	r2, [r3, #0]
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	40da      	lsrs	r2, r3
 8001200:	1e13      	subs	r3, r2, #0
 8001202:	d000      	beq.n	8001206 <HAL_GPIO_Init+0x2ca>
 8001204:	e6a2      	b.n	8000f4c <HAL_GPIO_Init+0x10>
  } 
}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	46bd      	mov	sp, r7
 800120a:	b006      	add	sp, #24
 800120c:	bd80      	pop	{r7, pc}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	40021000 	.word	0x40021000
 8001214:	40010000 	.word	0x40010000
 8001218:	48000400 	.word	0x48000400
 800121c:	48000800 	.word	0x48000800
 8001220:	48000c00 	.word	0x48000c00
 8001224:	48001000 	.word	0x48001000
 8001228:	40010400 	.word	0x40010400

0800122c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	000a      	movs	r2, r1
 8001236:	1cbb      	adds	r3, r7, #2
 8001238:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	1cba      	adds	r2, r7, #2
 8001240:	8812      	ldrh	r2, [r2, #0]
 8001242:	4013      	ands	r3, r2
 8001244:	d004      	beq.n	8001250 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001246:	230f      	movs	r3, #15
 8001248:	18fb      	adds	r3, r7, r3
 800124a:	2201      	movs	r2, #1
 800124c:	701a      	strb	r2, [r3, #0]
 800124e:	e003      	b.n	8001258 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001250:	230f      	movs	r3, #15
 8001252:	18fb      	adds	r3, r7, r3
 8001254:	2200      	movs	r2, #0
 8001256:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001258:	230f      	movs	r3, #15
 800125a:	18fb      	adds	r3, r7, r3
 800125c:	781b      	ldrb	r3, [r3, #0]
  }
 800125e:	0018      	movs	r0, r3
 8001260:	46bd      	mov	sp, r7
 8001262:	b004      	add	sp, #16
 8001264:	bd80      	pop	{r7, pc}

08001266 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001266:	b580      	push	{r7, lr}
 8001268:	b082      	sub	sp, #8
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
 800126e:	0008      	movs	r0, r1
 8001270:	0011      	movs	r1, r2
 8001272:	1cbb      	adds	r3, r7, #2
 8001274:	1c02      	adds	r2, r0, #0
 8001276:	801a      	strh	r2, [r3, #0]
 8001278:	1c7b      	adds	r3, r7, #1
 800127a:	1c0a      	adds	r2, r1, #0
 800127c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127e:	1c7b      	adds	r3, r7, #1
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d004      	beq.n	8001290 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001286:	1cbb      	adds	r3, r7, #2
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800128e:	e003      	b.n	8001298 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001290:	1cbb      	adds	r3, r7, #2
 8001292:	881a      	ldrh	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001298:	46c0      	nop			; (mov r8, r8)
 800129a:	46bd      	mov	sp, r7
 800129c:	b002      	add	sp, #8
 800129e:	bd80      	pop	{r7, pc}

080012a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d102      	bne.n	80012b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	f000 fb76 	bl	80019a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	2201      	movs	r2, #1
 80012ba:	4013      	ands	r3, r2
 80012bc:	d100      	bne.n	80012c0 <HAL_RCC_OscConfig+0x20>
 80012be:	e08e      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80012c0:	4bc5      	ldr	r3, [pc, #788]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	220c      	movs	r2, #12
 80012c6:	4013      	ands	r3, r2
 80012c8:	2b04      	cmp	r3, #4
 80012ca:	d00e      	beq.n	80012ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012cc:	4bc2      	ldr	r3, [pc, #776]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	220c      	movs	r2, #12
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b08      	cmp	r3, #8
 80012d6:	d117      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
 80012d8:	4bbf      	ldr	r3, [pc, #764]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012da:	685a      	ldr	r2, [r3, #4]
 80012dc:	23c0      	movs	r3, #192	; 0xc0
 80012de:	025b      	lsls	r3, r3, #9
 80012e0:	401a      	ands	r2, r3
 80012e2:	2380      	movs	r3, #128	; 0x80
 80012e4:	025b      	lsls	r3, r3, #9
 80012e6:	429a      	cmp	r2, r3
 80012e8:	d10e      	bne.n	8001308 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012ea:	4bbb      	ldr	r3, [pc, #748]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80012ec:	681a      	ldr	r2, [r3, #0]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	029b      	lsls	r3, r3, #10
 80012f2:	4013      	ands	r3, r2
 80012f4:	d100      	bne.n	80012f8 <HAL_RCC_OscConfig+0x58>
 80012f6:	e071      	b.n	80013dc <HAL_RCC_OscConfig+0x13c>
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d000      	beq.n	8001302 <HAL_RCC_OscConfig+0x62>
 8001300:	e06c      	b.n	80013dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	f000 fb4c 	bl	80019a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d107      	bne.n	8001320 <HAL_RCC_OscConfig+0x80>
 8001310:	4bb1      	ldr	r3, [pc, #708]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	4bb0      	ldr	r3, [pc, #704]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001316:	2180      	movs	r1, #128	; 0x80
 8001318:	0249      	lsls	r1, r1, #9
 800131a:	430a      	orrs	r2, r1
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	e02f      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d10c      	bne.n	8001342 <HAL_RCC_OscConfig+0xa2>
 8001328:	4bab      	ldr	r3, [pc, #684]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800132a:	681a      	ldr	r2, [r3, #0]
 800132c:	4baa      	ldr	r3, [pc, #680]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800132e:	49ab      	ldr	r1, [pc, #684]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001330:	400a      	ands	r2, r1
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	4ba8      	ldr	r3, [pc, #672]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001336:	681a      	ldr	r2, [r3, #0]
 8001338:	4ba7      	ldr	r3, [pc, #668]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800133a:	49a9      	ldr	r1, [pc, #676]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 800133c:	400a      	ands	r2, r1
 800133e:	601a      	str	r2, [r3, #0]
 8001340:	e01e      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	2b05      	cmp	r3, #5
 8001348:	d10e      	bne.n	8001368 <HAL_RCC_OscConfig+0xc8>
 800134a:	4ba3      	ldr	r3, [pc, #652]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4ba2      	ldr	r3, [pc, #648]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001350:	2180      	movs	r1, #128	; 0x80
 8001352:	02c9      	lsls	r1, r1, #11
 8001354:	430a      	orrs	r2, r1
 8001356:	601a      	str	r2, [r3, #0]
 8001358:	4b9f      	ldr	r3, [pc, #636]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800135a:	681a      	ldr	r2, [r3, #0]
 800135c:	4b9e      	ldr	r3, [pc, #632]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	0249      	lsls	r1, r1, #9
 8001362:	430a      	orrs	r2, r1
 8001364:	601a      	str	r2, [r3, #0]
 8001366:	e00b      	b.n	8001380 <HAL_RCC_OscConfig+0xe0>
 8001368:	4b9b      	ldr	r3, [pc, #620]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	4b9a      	ldr	r3, [pc, #616]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800136e:	499b      	ldr	r1, [pc, #620]	; (80015dc <HAL_RCC_OscConfig+0x33c>)
 8001370:	400a      	ands	r2, r1
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	4b98      	ldr	r3, [pc, #608]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	4b97      	ldr	r3, [pc, #604]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800137a:	4999      	ldr	r1, [pc, #612]	; (80015e0 <HAL_RCC_OscConfig+0x340>)
 800137c:	400a      	ands	r2, r1
 800137e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	685b      	ldr	r3, [r3, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d014      	beq.n	80013b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001388:	f7ff fcf8 	bl	8000d7c <HAL_GetTick>
 800138c:	0003      	movs	r3, r0
 800138e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001392:	f7ff fcf3 	bl	8000d7c <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	69bb      	ldr	r3, [r7, #24]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b64      	cmp	r3, #100	; 0x64
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e2fd      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013a4:	4b8c      	ldr	r3, [pc, #560]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013a6:	681a      	ldr	r2, [r3, #0]
 80013a8:	2380      	movs	r3, #128	; 0x80
 80013aa:	029b      	lsls	r3, r3, #10
 80013ac:	4013      	ands	r3, r2
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0xf2>
 80013b0:	e015      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b2:	f7ff fce3 	bl	8000d7c <HAL_GetTick>
 80013b6:	0003      	movs	r3, r0
 80013b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ba:	e008      	b.n	80013ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013bc:	f7ff fcde 	bl	8000d7c <HAL_GetTick>
 80013c0:	0002      	movs	r2, r0
 80013c2:	69bb      	ldr	r3, [r7, #24]
 80013c4:	1ad3      	subs	r3, r2, r3
 80013c6:	2b64      	cmp	r3, #100	; 0x64
 80013c8:	d901      	bls.n	80013ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80013ca:	2303      	movs	r3, #3
 80013cc:	e2e8      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013ce:	4b82      	ldr	r3, [pc, #520]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013d0:	681a      	ldr	r2, [r3, #0]
 80013d2:	2380      	movs	r3, #128	; 0x80
 80013d4:	029b      	lsls	r3, r3, #10
 80013d6:	4013      	ands	r3, r2
 80013d8:	d1f0      	bne.n	80013bc <HAL_RCC_OscConfig+0x11c>
 80013da:	e000      	b.n	80013de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	2202      	movs	r2, #2
 80013e4:	4013      	ands	r3, r2
 80013e6:	d100      	bne.n	80013ea <HAL_RCC_OscConfig+0x14a>
 80013e8:	e06c      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80013ea:	4b7b      	ldr	r3, [pc, #492]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	220c      	movs	r2, #12
 80013f0:	4013      	ands	r3, r2
 80013f2:	d00e      	beq.n	8001412 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80013f4:	4b78      	ldr	r3, [pc, #480]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	220c      	movs	r2, #12
 80013fa:	4013      	ands	r3, r2
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	d11f      	bne.n	8001440 <HAL_RCC_OscConfig+0x1a0>
 8001400:	4b75      	ldr	r3, [pc, #468]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	23c0      	movs	r3, #192	; 0xc0
 8001406:	025b      	lsls	r3, r3, #9
 8001408:	401a      	ands	r2, r3
 800140a:	2380      	movs	r3, #128	; 0x80
 800140c:	021b      	lsls	r3, r3, #8
 800140e:	429a      	cmp	r2, r3
 8001410:	d116      	bne.n	8001440 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001412:	4b71      	ldr	r3, [pc, #452]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	2202      	movs	r2, #2
 8001418:	4013      	ands	r3, r2
 800141a:	d005      	beq.n	8001428 <HAL_RCC_OscConfig+0x188>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	2b01      	cmp	r3, #1
 8001422:	d001      	beq.n	8001428 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e2bb      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001428:	4b6b      	ldr	r3, [pc, #428]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	22f8      	movs	r2, #248	; 0xf8
 800142e:	4393      	bics	r3, r2
 8001430:	0019      	movs	r1, r3
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	691b      	ldr	r3, [r3, #16]
 8001436:	00da      	lsls	r2, r3, #3
 8001438:	4b67      	ldr	r3, [pc, #412]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800143a:	430a      	orrs	r2, r1
 800143c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800143e:	e041      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d024      	beq.n	8001492 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001448:	4b63      	ldr	r3, [pc, #396]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800144a:	681a      	ldr	r2, [r3, #0]
 800144c:	4b62      	ldr	r3, [pc, #392]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800144e:	2101      	movs	r1, #1
 8001450:	430a      	orrs	r2, r1
 8001452:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001454:	f7ff fc92 	bl	8000d7c <HAL_GetTick>
 8001458:	0003      	movs	r3, r0
 800145a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145e:	f7ff fc8d 	bl	8000d7c <HAL_GetTick>
 8001462:	0002      	movs	r2, r0
 8001464:	69bb      	ldr	r3, [r7, #24]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e297      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001470:	4b59      	ldr	r3, [pc, #356]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2202      	movs	r2, #2
 8001476:	4013      	ands	r3, r2
 8001478:	d0f1      	beq.n	800145e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800147a:	4b57      	ldr	r3, [pc, #348]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	22f8      	movs	r2, #248	; 0xf8
 8001480:	4393      	bics	r3, r2
 8001482:	0019      	movs	r1, r3
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	691b      	ldr	r3, [r3, #16]
 8001488:	00da      	lsls	r2, r3, #3
 800148a:	4b53      	ldr	r3, [pc, #332]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800148c:	430a      	orrs	r2, r1
 800148e:	601a      	str	r2, [r3, #0]
 8001490:	e018      	b.n	80014c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001492:	4b51      	ldr	r3, [pc, #324]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	4b50      	ldr	r3, [pc, #320]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001498:	2101      	movs	r1, #1
 800149a:	438a      	bics	r2, r1
 800149c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149e:	f7ff fc6d 	bl	8000d7c <HAL_GetTick>
 80014a2:	0003      	movs	r3, r0
 80014a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a8:	f7ff fc68 	bl	8000d7c <HAL_GetTick>
 80014ac:	0002      	movs	r2, r0
 80014ae:	69bb      	ldr	r3, [r7, #24]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e272      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ba:	4b47      	ldr	r3, [pc, #284]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	2202      	movs	r2, #2
 80014c0:	4013      	ands	r3, r2
 80014c2:	d1f1      	bne.n	80014a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	2208      	movs	r2, #8
 80014ca:	4013      	ands	r3, r2
 80014cc:	d036      	beq.n	800153c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	69db      	ldr	r3, [r3, #28]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d019      	beq.n	800150a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014d6:	4b40      	ldr	r3, [pc, #256]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014da:	4b3f      	ldr	r3, [pc, #252]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80014dc:	2101      	movs	r1, #1
 80014de:	430a      	orrs	r2, r1
 80014e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc4b 	bl	8000d7c <HAL_GetTick>
 80014e6:	0003      	movs	r3, r0
 80014e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ea:	e008      	b.n	80014fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ec:	f7ff fc46 	bl	8000d7c <HAL_GetTick>
 80014f0:	0002      	movs	r2, r0
 80014f2:	69bb      	ldr	r3, [r7, #24]
 80014f4:	1ad3      	subs	r3, r2, r3
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d901      	bls.n	80014fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e250      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014fe:	4b36      	ldr	r3, [pc, #216]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	2202      	movs	r2, #2
 8001504:	4013      	ands	r3, r2
 8001506:	d0f1      	beq.n	80014ec <HAL_RCC_OscConfig+0x24c>
 8001508:	e018      	b.n	800153c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150a:	4b33      	ldr	r3, [pc, #204]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800150c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800150e:	4b32      	ldr	r3, [pc, #200]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001510:	2101      	movs	r1, #1
 8001512:	438a      	bics	r2, r1
 8001514:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001516:	f7ff fc31 	bl	8000d7c <HAL_GetTick>
 800151a:	0003      	movs	r3, r0
 800151c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800151e:	e008      	b.n	8001532 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001520:	f7ff fc2c 	bl	8000d7c <HAL_GetTick>
 8001524:	0002      	movs	r2, r0
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	1ad3      	subs	r3, r2, r3
 800152a:	2b02      	cmp	r3, #2
 800152c:	d901      	bls.n	8001532 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800152e:	2303      	movs	r3, #3
 8001530:	e236      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001536:	2202      	movs	r2, #2
 8001538:	4013      	ands	r3, r2
 800153a:	d1f1      	bne.n	8001520 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	2204      	movs	r2, #4
 8001542:	4013      	ands	r3, r2
 8001544:	d100      	bne.n	8001548 <HAL_RCC_OscConfig+0x2a8>
 8001546:	e0b5      	b.n	80016b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001548:	231f      	movs	r3, #31
 800154a:	18fb      	adds	r3, r7, r3
 800154c:	2200      	movs	r2, #0
 800154e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001550:	4b21      	ldr	r3, [pc, #132]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001552:	69da      	ldr	r2, [r3, #28]
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	055b      	lsls	r3, r3, #21
 8001558:	4013      	ands	r3, r2
 800155a:	d111      	bne.n	8001580 <HAL_RCC_OscConfig+0x2e0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800155e:	69da      	ldr	r2, [r3, #28]
 8001560:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 8001562:	2180      	movs	r1, #128	; 0x80
 8001564:	0549      	lsls	r1, r1, #21
 8001566:	430a      	orrs	r2, r1
 8001568:	61da      	str	r2, [r3, #28]
 800156a:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 800156c:	69da      	ldr	r2, [r3, #28]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	055b      	lsls	r3, r3, #21
 8001572:	4013      	ands	r3, r2
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001578:	231f      	movs	r3, #31
 800157a:	18fb      	adds	r3, r7, r3
 800157c:	2201      	movs	r2, #1
 800157e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001580:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	2380      	movs	r3, #128	; 0x80
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	4013      	ands	r3, r2
 800158a:	d11a      	bne.n	80015c2 <HAL_RCC_OscConfig+0x322>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800158c:	4b15      	ldr	r3, [pc, #84]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4b14      	ldr	r3, [pc, #80]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 8001592:	2180      	movs	r1, #128	; 0x80
 8001594:	0049      	lsls	r1, r1, #1
 8001596:	430a      	orrs	r2, r1
 8001598:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800159a:	f7ff fbef 	bl	8000d7c <HAL_GetTick>
 800159e:	0003      	movs	r3, r0
 80015a0:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015a2:	e008      	b.n	80015b6 <HAL_RCC_OscConfig+0x316>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015a4:	f7ff fbea 	bl	8000d7c <HAL_GetTick>
 80015a8:	0002      	movs	r2, r0
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	2b64      	cmp	r3, #100	; 0x64
 80015b0:	d901      	bls.n	80015b6 <HAL_RCC_OscConfig+0x316>
        {
          return HAL_TIMEOUT;
 80015b2:	2303      	movs	r3, #3
 80015b4:	e1f4      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b6:	4b0b      	ldr	r3, [pc, #44]	; (80015e4 <HAL_RCC_OscConfig+0x344>)
 80015b8:	681a      	ldr	r2, [r3, #0]
 80015ba:	2380      	movs	r3, #128	; 0x80
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	4013      	ands	r3, r2
 80015c0:	d0f0      	beq.n	80015a4 <HAL_RCC_OscConfig+0x304>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	2b01      	cmp	r3, #1
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x348>
 80015ca:	4b03      	ldr	r3, [pc, #12]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015cc:	6a1a      	ldr	r2, [r3, #32]
 80015ce:	4b02      	ldr	r3, [pc, #8]	; (80015d8 <HAL_RCC_OscConfig+0x338>)
 80015d0:	2101      	movs	r1, #1
 80015d2:	430a      	orrs	r2, r1
 80015d4:	621a      	str	r2, [r3, #32]
 80015d6:	e035      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 80015d8:	40021000 	.word	0x40021000
 80015dc:	fffeffff 	.word	0xfffeffff
 80015e0:	fffbffff 	.word	0xfffbffff
 80015e4:	40007000 	.word	0x40007000
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	689b      	ldr	r3, [r3, #8]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x36a>
 80015f0:	4bca      	ldr	r3, [pc, #808]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015f2:	6a1a      	ldr	r2, [r3, #32]
 80015f4:	4bc9      	ldr	r3, [pc, #804]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015f6:	2101      	movs	r1, #1
 80015f8:	438a      	bics	r2, r1
 80015fa:	621a      	str	r2, [r3, #32]
 80015fc:	4bc7      	ldr	r3, [pc, #796]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4bc6      	ldr	r3, [pc, #792]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001602:	2104      	movs	r1, #4
 8001604:	438a      	bics	r2, r1
 8001606:	621a      	str	r2, [r3, #32]
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x38c>
 8001612:	4bc2      	ldr	r3, [pc, #776]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001614:	6a1a      	ldr	r2, [r3, #32]
 8001616:	4bc1      	ldr	r3, [pc, #772]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001618:	2104      	movs	r1, #4
 800161a:	430a      	orrs	r2, r1
 800161c:	621a      	str	r2, [r3, #32]
 800161e:	4bbf      	ldr	r3, [pc, #764]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001620:	6a1a      	ldr	r2, [r3, #32]
 8001622:	4bbe      	ldr	r3, [pc, #760]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001624:	2101      	movs	r1, #1
 8001626:	430a      	orrs	r2, r1
 8001628:	621a      	str	r2, [r3, #32]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x3a4>
 800162c:	4bbb      	ldr	r3, [pc, #748]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800162e:	6a1a      	ldr	r2, [r3, #32]
 8001630:	4bba      	ldr	r3, [pc, #744]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001632:	2101      	movs	r1, #1
 8001634:	438a      	bics	r2, r1
 8001636:	621a      	str	r2, [r3, #32]
 8001638:	4bb8      	ldr	r3, [pc, #736]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800163a:	6a1a      	ldr	r2, [r3, #32]
 800163c:	4bb7      	ldr	r3, [pc, #732]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800163e:	2104      	movs	r1, #4
 8001640:	438a      	bics	r2, r1
 8001642:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d014      	beq.n	8001676 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff fb96 	bl	8000d7c <HAL_GetTick>
 8001650:	0003      	movs	r3, r0
 8001652:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001654:	e009      	b.n	800166a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001656:	f7ff fb91 	bl	8000d7c <HAL_GetTick>
 800165a:	0002      	movs	r2, r0
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	1ad3      	subs	r3, r2, r3
 8001660:	4aaf      	ldr	r2, [pc, #700]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e19a      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4bac      	ldr	r3, [pc, #688]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	2202      	movs	r2, #2
 8001670:	4013      	ands	r3, r2
 8001672:	d0f0      	beq.n	8001656 <HAL_RCC_OscConfig+0x3b6>
 8001674:	e013      	b.n	800169e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001676:	f7ff fb81 	bl	8000d7c <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e009      	b.n	8001694 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff fb7c 	bl	8000d7c <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	4aa5      	ldr	r2, [pc, #660]	; (8001920 <HAL_RCC_OscConfig+0x680>)
 800168c:	4293      	cmp	r3, r2
 800168e:	d901      	bls.n	8001694 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001690:	2303      	movs	r3, #3
 8001692:	e185      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001694:	4ba1      	ldr	r3, [pc, #644]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001696:	6a1b      	ldr	r3, [r3, #32]
 8001698:	2202      	movs	r2, #2
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800169e:	231f      	movs	r3, #31
 80016a0:	18fb      	adds	r3, r7, r3
 80016a2:	781b      	ldrb	r3, [r3, #0]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d105      	bne.n	80016b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016a8:	4b9c      	ldr	r3, [pc, #624]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016aa:	69da      	ldr	r2, [r3, #28]
 80016ac:	4b9b      	ldr	r3, [pc, #620]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	499d      	ldr	r1, [pc, #628]	; (8001924 <HAL_RCC_OscConfig+0x684>)
 80016b0:	400a      	ands	r2, r1
 80016b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	2210      	movs	r2, #16
 80016ba:	4013      	ands	r3, r2
 80016bc:	d063      	beq.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d12a      	bne.n	800171c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80016c6:	4b95      	ldr	r3, [pc, #596]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016ca:	4b94      	ldr	r3, [pc, #592]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016cc:	2104      	movs	r1, #4
 80016ce:	430a      	orrs	r2, r1
 80016d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80016d2:	4b92      	ldr	r3, [pc, #584]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016d6:	4b91      	ldr	r3, [pc, #580]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016d8:	2101      	movs	r1, #1
 80016da:	430a      	orrs	r2, r1
 80016dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016de:	f7ff fb4d 	bl	8000d7c <HAL_GetTick>
 80016e2:	0003      	movs	r3, r0
 80016e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80016e8:	f7ff fb48 	bl	8000d7c <HAL_GetTick>
 80016ec:	0002      	movs	r2, r0
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b02      	cmp	r3, #2
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e152      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80016fa:	4b88      	ldr	r3, [pc, #544]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80016fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016fe:	2202      	movs	r2, #2
 8001700:	4013      	ands	r3, r2
 8001702:	d0f1      	beq.n	80016e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001704:	4b85      	ldr	r3, [pc, #532]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001708:	22f8      	movs	r2, #248	; 0xf8
 800170a:	4393      	bics	r3, r2
 800170c:	0019      	movs	r1, r3
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	699b      	ldr	r3, [r3, #24]
 8001712:	00da      	lsls	r2, r3, #3
 8001714:	4b81      	ldr	r3, [pc, #516]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001716:	430a      	orrs	r2, r1
 8001718:	635a      	str	r2, [r3, #52]	; 0x34
 800171a:	e034      	b.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	695b      	ldr	r3, [r3, #20]
 8001720:	3305      	adds	r3, #5
 8001722:	d111      	bne.n	8001748 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001724:	4b7d      	ldr	r3, [pc, #500]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001726:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001728:	4b7c      	ldr	r3, [pc, #496]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800172a:	2104      	movs	r1, #4
 800172c:	438a      	bics	r2, r1
 800172e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001730:	4b7a      	ldr	r3, [pc, #488]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001734:	22f8      	movs	r2, #248	; 0xf8
 8001736:	4393      	bics	r3, r2
 8001738:	0019      	movs	r1, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	699b      	ldr	r3, [r3, #24]
 800173e:	00da      	lsls	r2, r3, #3
 8001740:	4b76      	ldr	r3, [pc, #472]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001742:	430a      	orrs	r2, r1
 8001744:	635a      	str	r2, [r3, #52]	; 0x34
 8001746:	e01e      	b.n	8001786 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001748:	4b74      	ldr	r3, [pc, #464]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800174a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800174c:	4b73      	ldr	r3, [pc, #460]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800174e:	2104      	movs	r1, #4
 8001750:	430a      	orrs	r2, r1
 8001752:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001754:	4b71      	ldr	r3, [pc, #452]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001756:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001758:	4b70      	ldr	r3, [pc, #448]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001760:	f7ff fb0c 	bl	8000d7c <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800176a:	f7ff fb07 	bl	8000d7c <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e111      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800177c:	4b67      	ldr	r3, [pc, #412]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d1f1      	bne.n	800176a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2220      	movs	r2, #32
 800178c:	4013      	ands	r3, r2
 800178e:	d05c      	beq.n	800184a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001790:	4b62      	ldr	r3, [pc, #392]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	220c      	movs	r2, #12
 8001796:	4013      	ands	r3, r2
 8001798:	2b0c      	cmp	r3, #12
 800179a:	d00e      	beq.n	80017ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800179c:	4b5f      	ldr	r3, [pc, #380]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	220c      	movs	r2, #12
 80017a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d114      	bne.n	80017d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80017a8:	4b5c      	ldr	r3, [pc, #368]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017aa:	685a      	ldr	r2, [r3, #4]
 80017ac:	23c0      	movs	r3, #192	; 0xc0
 80017ae:	025b      	lsls	r3, r3, #9
 80017b0:	401a      	ands	r2, r3
 80017b2:	23c0      	movs	r3, #192	; 0xc0
 80017b4:	025b      	lsls	r3, r3, #9
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d10b      	bne.n	80017d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80017ba:	4b58      	ldr	r3, [pc, #352]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017be:	2380      	movs	r3, #128	; 0x80
 80017c0:	025b      	lsls	r3, r3, #9
 80017c2:	4013      	ands	r3, r2
 80017c4:	d040      	beq.n	8001848 <HAL_RCC_OscConfig+0x5a8>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d03c      	beq.n	8001848 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e0e6      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d01b      	beq.n	8001812 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80017da:	4b50      	ldr	r3, [pc, #320]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80017de:	4b4f      	ldr	r3, [pc, #316]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80017e0:	2180      	movs	r1, #128	; 0x80
 80017e2:	0249      	lsls	r1, r1, #9
 80017e4:	430a      	orrs	r2, r1
 80017e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fac8 	bl	8000d7c <HAL_GetTick>
 80017ec:	0003      	movs	r3, r0
 80017ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f2:	f7ff fac3 	bl	8000d7c <HAL_GetTick>
 80017f6:	0002      	movs	r2, r0
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0cd      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001804:	4b45      	ldr	r3, [pc, #276]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001806:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001808:	2380      	movs	r3, #128	; 0x80
 800180a:	025b      	lsls	r3, r3, #9
 800180c:	4013      	ands	r3, r2
 800180e:	d0f0      	beq.n	80017f2 <HAL_RCC_OscConfig+0x552>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001812:	4b42      	ldr	r3, [pc, #264]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001814:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001816:	4b41      	ldr	r3, [pc, #260]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001818:	4943      	ldr	r1, [pc, #268]	; (8001928 <HAL_RCC_OscConfig+0x688>)
 800181a:	400a      	ands	r2, r1
 800181c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181e:	f7ff faad 	bl	8000d7c <HAL_GetTick>
 8001822:	0003      	movs	r3, r0
 8001824:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001828:	f7ff faa8 	bl	8000d7c <HAL_GetTick>
 800182c:	0002      	movs	r2, r0
 800182e:	69bb      	ldr	r3, [r7, #24]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e0b2      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800183a:	4b38      	ldr	r3, [pc, #224]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800183c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	025b      	lsls	r3, r3, #9
 8001842:	4013      	ands	r3, r2
 8001844:	d1f0      	bne.n	8001828 <HAL_RCC_OscConfig+0x588>
 8001846:	e000      	b.n	800184a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001848:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184e:	2b00      	cmp	r3, #0
 8001850:	d100      	bne.n	8001854 <HAL_RCC_OscConfig+0x5b4>
 8001852:	e0a4      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001854:	4b31      	ldr	r3, [pc, #196]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	220c      	movs	r2, #12
 800185a:	4013      	ands	r3, r2
 800185c:	2b08      	cmp	r3, #8
 800185e:	d100      	bne.n	8001862 <HAL_RCC_OscConfig+0x5c2>
 8001860:	e078      	b.n	8001954 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001866:	2b02      	cmp	r3, #2
 8001868:	d14c      	bne.n	8001904 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186a:	4b2c      	ldr	r3, [pc, #176]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	4b2b      	ldr	r3, [pc, #172]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001870:	492e      	ldr	r1, [pc, #184]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 8001872:	400a      	ands	r2, r1
 8001874:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001876:	f7ff fa81 	bl	8000d7c <HAL_GetTick>
 800187a:	0003      	movs	r3, r0
 800187c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001880:	f7ff fa7c 	bl	8000d7c <HAL_GetTick>
 8001884:	0002      	movs	r2, r0
 8001886:	69bb      	ldr	r3, [r7, #24]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e086      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	2380      	movs	r3, #128	; 0x80
 8001898:	049b      	lsls	r3, r3, #18
 800189a:	4013      	ands	r3, r2
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800189e:	4b1f      	ldr	r3, [pc, #124]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	220f      	movs	r2, #15
 80018a4:	4393      	bics	r3, r2
 80018a6:	0019      	movs	r1, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80018ac:	4b1b      	ldr	r3, [pc, #108]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018ae:	430a      	orrs	r2, r1
 80018b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80018b2:	4b1a      	ldr	r3, [pc, #104]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	4a1e      	ldr	r2, [pc, #120]	; (8001930 <HAL_RCC_OscConfig+0x690>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c4:	431a      	orrs	r2, r3
 80018c6:	4b15      	ldr	r3, [pc, #84]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018c8:	430a      	orrs	r2, r1
 80018ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b13      	ldr	r3, [pc, #76]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018d2:	2180      	movs	r1, #128	; 0x80
 80018d4:	0449      	lsls	r1, r1, #17
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff fa4f 	bl	8000d7c <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018e4:	f7ff fa4a 	bl	8000d7c <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e054      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018f6:	4b09      	ldr	r3, [pc, #36]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 80018f8:	681a      	ldr	r2, [r3, #0]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	049b      	lsls	r3, r3, #18
 80018fe:	4013      	ands	r3, r2
 8001900:	d0f0      	beq.n	80018e4 <HAL_RCC_OscConfig+0x644>
 8001902:	e04c      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001904:	4b05      	ldr	r3, [pc, #20]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b04      	ldr	r3, [pc, #16]	; (800191c <HAL_RCC_OscConfig+0x67c>)
 800190a:	4908      	ldr	r1, [pc, #32]	; (800192c <HAL_RCC_OscConfig+0x68c>)
 800190c:	400a      	ands	r2, r1
 800190e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001910:	f7ff fa34 	bl	8000d7c <HAL_GetTick>
 8001914:	0003      	movs	r3, r0
 8001916:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001918:	e015      	b.n	8001946 <HAL_RCC_OscConfig+0x6a6>
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40021000 	.word	0x40021000
 8001920:	00001388 	.word	0x00001388
 8001924:	efffffff 	.word	0xefffffff
 8001928:	fffeffff 	.word	0xfffeffff
 800192c:	feffffff 	.word	0xfeffffff
 8001930:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001934:	f7ff fa22 	bl	8000d7c <HAL_GetTick>
 8001938:	0002      	movs	r2, r0
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	2b02      	cmp	r3, #2
 8001940:	d901      	bls.n	8001946 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001942:	2303      	movs	r3, #3
 8001944:	e02c      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001946:	4b18      	ldr	r3, [pc, #96]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	2380      	movs	r3, #128	; 0x80
 800194c:	049b      	lsls	r3, r3, #18
 800194e:	4013      	ands	r3, r2
 8001950:	d1f0      	bne.n	8001934 <HAL_RCC_OscConfig+0x694>
 8001952:	e024      	b.n	800199e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001958:	2b01      	cmp	r3, #1
 800195a:	d101      	bne.n	8001960 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800195c:	2301      	movs	r3, #1
 800195e:	e01f      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001960:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001962:	685b      	ldr	r3, [r3, #4]
 8001964:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001966:	4b10      	ldr	r3, [pc, #64]	; (80019a8 <HAL_RCC_OscConfig+0x708>)
 8001968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800196a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800196c:	697a      	ldr	r2, [r7, #20]
 800196e:	23c0      	movs	r3, #192	; 0xc0
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	401a      	ands	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001978:	429a      	cmp	r2, r3
 800197a:	d10e      	bne.n	800199a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	220f      	movs	r2, #15
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001986:	429a      	cmp	r2, r3
 8001988:	d107      	bne.n	800199a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800198a:	697a      	ldr	r2, [r7, #20]
 800198c:	23f0      	movs	r3, #240	; 0xf0
 800198e:	039b      	lsls	r3, r3, #14
 8001990:	401a      	ands	r2, r3
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e000      	b.n	80019a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800199e:	2300      	movs	r3, #0
}
 80019a0:	0018      	movs	r0, r3
 80019a2:	46bd      	mov	sp, r7
 80019a4:	b008      	add	sp, #32
 80019a6:	bd80      	pop	{r7, pc}
 80019a8:	40021000 	.word	0x40021000

080019ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d101      	bne.n	80019c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e0bf      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019c0:	4b61      	ldr	r3, [pc, #388]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2201      	movs	r2, #1
 80019c6:	4013      	ands	r3, r2
 80019c8:	683a      	ldr	r2, [r7, #0]
 80019ca:	429a      	cmp	r2, r3
 80019cc:	d911      	bls.n	80019f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ce:	4b5e      	ldr	r3, [pc, #376]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2201      	movs	r2, #1
 80019d4:	4393      	bics	r3, r2
 80019d6:	0019      	movs	r1, r3
 80019d8:	4b5b      	ldr	r3, [pc, #364]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e0:	4b59      	ldr	r3, [pc, #356]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2201      	movs	r2, #1
 80019e6:	4013      	ands	r3, r2
 80019e8:	683a      	ldr	r2, [r7, #0]
 80019ea:	429a      	cmp	r2, r3
 80019ec:	d001      	beq.n	80019f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e0a6      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2202      	movs	r2, #2
 80019f8:	4013      	ands	r3, r2
 80019fa:	d015      	beq.n	8001a28 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	2204      	movs	r2, #4
 8001a02:	4013      	ands	r3, r2
 8001a04:	d006      	beq.n	8001a14 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001a06:	4b51      	ldr	r3, [pc, #324]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a08:	685a      	ldr	r2, [r3, #4]
 8001a0a:	4b50      	ldr	r3, [pc, #320]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a0c:	21e0      	movs	r1, #224	; 0xe0
 8001a0e:	00c9      	lsls	r1, r1, #3
 8001a10:	430a      	orrs	r2, r1
 8001a12:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a14:	4b4d      	ldr	r3, [pc, #308]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	22f0      	movs	r2, #240	; 0xf0
 8001a1a:	4393      	bics	r3, r2
 8001a1c:	0019      	movs	r1, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	689a      	ldr	r2, [r3, #8]
 8001a22:	4b4a      	ldr	r3, [pc, #296]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a24:	430a      	orrs	r2, r1
 8001a26:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	2201      	movs	r2, #1
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d04c      	beq.n	8001acc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d107      	bne.n	8001a4a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a3a:	4b44      	ldr	r3, [pc, #272]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	029b      	lsls	r3, r3, #10
 8001a42:	4013      	ands	r3, r2
 8001a44:	d120      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e07a      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b02      	cmp	r3, #2
 8001a50:	d107      	bne.n	8001a62 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a52:	4b3e      	ldr	r3, [pc, #248]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	2380      	movs	r3, #128	; 0x80
 8001a58:	049b      	lsls	r3, r3, #18
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	d114      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e06e      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	2b03      	cmp	r3, #3
 8001a68:	d107      	bne.n	8001a7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001a6a:	4b38      	ldr	r3, [pc, #224]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	025b      	lsls	r3, r3, #9
 8001a72:	4013      	ands	r3, r2
 8001a74:	d108      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a76:	2301      	movs	r3, #1
 8001a78:	e062      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7a:	4b34      	ldr	r3, [pc, #208]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2202      	movs	r2, #2
 8001a80:	4013      	ands	r3, r2
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e05b      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a88:	4b30      	ldr	r3, [pc, #192]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	4393      	bics	r3, r2
 8001a90:	0019      	movs	r1, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	685a      	ldr	r2, [r3, #4]
 8001a96:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9c:	f7ff f96e 	bl	8000d7c <HAL_GetTick>
 8001aa0:	0003      	movs	r3, r0
 8001aa2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7ff f969 	bl	8000d7c <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a27      	ldr	r2, [pc, #156]	; (8001b50 <HAL_RCC_ClockConfig+0x1a4>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e042      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aba:	4b24      	ldr	r3, [pc, #144]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	401a      	ands	r2, r3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d1ec      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001acc:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	683a      	ldr	r2, [r7, #0]
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d211      	bcs.n	8001afe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	4393      	bics	r3, r2
 8001ae2:	0019      	movs	r1, r3
 8001ae4:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <HAL_RCC_ClockConfig+0x19c>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	2201      	movs	r2, #1
 8001af2:	4013      	ands	r3, r2
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d001      	beq.n	8001afe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e020      	b.n	8001b40 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d009      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001b08:	4b10      	ldr	r3, [pc, #64]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b0a:	685b      	ldr	r3, [r3, #4]
 8001b0c:	4a11      	ldr	r2, [pc, #68]	; (8001b54 <HAL_RCC_ClockConfig+0x1a8>)
 8001b0e:	4013      	ands	r3, r2
 8001b10:	0019      	movs	r1, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	68da      	ldr	r2, [r3, #12]
 8001b16:	4b0d      	ldr	r3, [pc, #52]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b18:	430a      	orrs	r2, r1
 8001b1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001b1c:	f000 f820 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8001b20:	0001      	movs	r1, r0
 8001b22:	4b0a      	ldr	r3, [pc, #40]	; (8001b4c <HAL_RCC_ClockConfig+0x1a0>)
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	091b      	lsrs	r3, r3, #4
 8001b28:	220f      	movs	r2, #15
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_RCC_ClockConfig+0x1ac>)
 8001b2e:	5cd3      	ldrb	r3, [r2, r3]
 8001b30:	000a      	movs	r2, r1
 8001b32:	40da      	lsrs	r2, r3
 8001b34:	4b09      	ldr	r3, [pc, #36]	; (8001b5c <HAL_RCC_ClockConfig+0x1b0>)
 8001b36:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001b38:	2000      	movs	r0, #0
 8001b3a:	f7ff f8d9 	bl	8000cf0 <HAL_InitTick>
  
  return HAL_OK;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	0018      	movs	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	b004      	add	sp, #16
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	40022000 	.word	0x40022000
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	00001388 	.word	0x00001388
 8001b54:	fffff8ff 	.word	0xfffff8ff
 8001b58:	08005064 	.word	0x08005064
 8001b5c:	20000000 	.word	0x20000000

08001b60 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b60:	b590      	push	{r4, r7, lr}
 8001b62:	b08f      	sub	sp, #60	; 0x3c
 8001b64:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001b66:	2314      	movs	r3, #20
 8001b68:	18fb      	adds	r3, r7, r3
 8001b6a:	4a37      	ldr	r2, [pc, #220]	; (8001c48 <HAL_RCC_GetSysClockFreq+0xe8>)
 8001b6c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b6e:	c313      	stmia	r3!, {r0, r1, r4}
 8001b70:	6812      	ldr	r2, [r2, #0]
 8001b72:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001b74:	1d3b      	adds	r3, r7, #4
 8001b76:	4a35      	ldr	r2, [pc, #212]	; (8001c4c <HAL_RCC_GetSysClockFreq+0xec>)
 8001b78:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001b7a:	c313      	stmia	r3!, {r0, r1, r4}
 8001b7c:	6812      	ldr	r2, [r2, #0]
 8001b7e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b80:	2300      	movs	r3, #0
 8001b82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	; 0x28
 8001b88:	2300      	movs	r3, #0
 8001b8a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001b94:	4b2e      	ldr	r3, [pc, #184]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9c:	220c      	movs	r2, #12
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b08      	cmp	r3, #8
 8001ba2:	d006      	beq.n	8001bb2 <HAL_RCC_GetSysClockFreq+0x52>
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	d043      	beq.n	8001c30 <HAL_RCC_GetSysClockFreq+0xd0>
 8001ba8:	2b04      	cmp	r3, #4
 8001baa:	d144      	bne.n	8001c36 <HAL_RCC_GetSysClockFreq+0xd6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001bac:	4b29      	ldr	r3, [pc, #164]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001bae:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001bb0:	e044      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xdc>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	0c9b      	lsrs	r3, r3, #18
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	4013      	ands	r3, r2
 8001bba:	2214      	movs	r2, #20
 8001bbc:	18ba      	adds	r2, r7, r2
 8001bbe:	5cd3      	ldrb	r3, [r2, r3]
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001bc2:	4b23      	ldr	r3, [pc, #140]	; (8001c50 <HAL_RCC_GetSysClockFreq+0xf0>)
 8001bc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc6:	220f      	movs	r2, #15
 8001bc8:	4013      	ands	r3, r2
 8001bca:	1d3a      	adds	r2, r7, #4
 8001bcc:	5cd3      	ldrb	r3, [r2, r3]
 8001bce:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bd2:	23c0      	movs	r3, #192	; 0xc0
 8001bd4:	025b      	lsls	r3, r3, #9
 8001bd6:	401a      	ands	r2, r3
 8001bd8:	2380      	movs	r3, #128	; 0x80
 8001bda:	025b      	lsls	r3, r3, #9
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d109      	bne.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x94>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001be0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001be2:	481c      	ldr	r0, [pc, #112]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001be4:	f7fe fa90 	bl	8000108 <__udivsi3>
 8001be8:	0003      	movs	r3, r0
 8001bea:	001a      	movs	r2, r3
 8001bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bee:	4353      	muls	r3, r2
 8001bf0:	637b      	str	r3, [r7, #52]	; 0x34
 8001bf2:	e01a      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0xca>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001bf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001bf6:	23c0      	movs	r3, #192	; 0xc0
 8001bf8:	025b      	lsls	r3, r3, #9
 8001bfa:	401a      	ands	r2, r3
 8001bfc:	23c0      	movs	r3, #192	; 0xc0
 8001bfe:	025b      	lsls	r3, r3, #9
 8001c00:	429a      	cmp	r2, r3
 8001c02:	d109      	bne.n	8001c18 <HAL_RCC_GetSysClockFreq+0xb8>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c04:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c06:	4814      	ldr	r0, [pc, #80]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c08:	f7fe fa7e 	bl	8000108 <__udivsi3>
 8001c0c:	0003      	movs	r3, r0
 8001c0e:	001a      	movs	r2, r3
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	4353      	muls	r3, r2
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_GetSysClockFreq+0xca>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001c18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c1a:	480e      	ldr	r0, [pc, #56]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c1c:	f7fe fa74 	bl	8000108 <__udivsi3>
 8001c20:	0003      	movs	r3, r0
 8001c22:	001a      	movs	r2, r3
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	4353      	muls	r3, r2
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001c2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c2c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c2e:	e005      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001c32:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c34:	e002      	b.n	8001c3c <HAL_RCC_GetSysClockFreq+0xdc>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001c36:	4b07      	ldr	r3, [pc, #28]	; (8001c54 <HAL_RCC_GetSysClockFreq+0xf4>)
 8001c38:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c3a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001c3e:	0018      	movs	r0, r3
 8001c40:	46bd      	mov	sp, r7
 8001c42:	b00f      	add	sp, #60	; 0x3c
 8001c44:	bd90      	pop	{r4, r7, pc}
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	08005044 	.word	0x08005044
 8001c4c:	08005054 	.word	0x08005054
 8001c50:	40021000 	.word	0x40021000
 8001c54:	007a1200 	.word	0x007a1200
 8001c58:	02dc6c00 	.word	0x02dc6c00

08001c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c60:	4b02      	ldr	r3, [pc, #8]	; (8001c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8001c62:	681b      	ldr	r3, [r3, #0]
}
 8001c64:	0018      	movs	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	46c0      	nop			; (mov r8, r8)
 8001c6c:	20000000 	.word	0x20000000

08001c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001c74:	f7ff fff2 	bl	8001c5c <HAL_RCC_GetHCLKFreq>
 8001c78:	0001      	movs	r1, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	0a1b      	lsrs	r3, r3, #8
 8001c80:	2207      	movs	r2, #7
 8001c82:	4013      	ands	r3, r2
 8001c84:	4a04      	ldr	r2, [pc, #16]	; (8001c98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c86:	5cd3      	ldrb	r3, [r2, r3]
 8001c88:	40d9      	lsrs	r1, r3
 8001c8a:	000b      	movs	r3, r1
}    
 8001c8c:	0018      	movs	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	46c0      	nop			; (mov r8, r8)
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08005074 	.word	0x08005074

08001c9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b086      	sub	sp, #24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	025b      	lsls	r3, r3, #9
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	d100      	bne.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001cb8:	e08f      	b.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001cba:	2317      	movs	r3, #23
 8001cbc:	18fb      	adds	r3, r7, r3
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cc2:	4b6f      	ldr	r3, [pc, #444]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cc4:	69da      	ldr	r2, [r3, #28]
 8001cc6:	2380      	movs	r3, #128	; 0x80
 8001cc8:	055b      	lsls	r3, r3, #21
 8001cca:	4013      	ands	r3, r2
 8001ccc:	d111      	bne.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001cce:	4b6c      	ldr	r3, [pc, #432]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd0:	69da      	ldr	r2, [r3, #28]
 8001cd2:	4b6b      	ldr	r3, [pc, #428]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cd4:	2180      	movs	r1, #128	; 0x80
 8001cd6:	0549      	lsls	r1, r1, #21
 8001cd8:	430a      	orrs	r2, r1
 8001cda:	61da      	str	r2, [r3, #28]
 8001cdc:	4b68      	ldr	r3, [pc, #416]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001cde:	69da      	ldr	r2, [r3, #28]
 8001ce0:	2380      	movs	r3, #128	; 0x80
 8001ce2:	055b      	lsls	r3, r3, #21
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	60bb      	str	r3, [r7, #8]
 8001ce8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cea:	2317      	movs	r3, #23
 8001cec:	18fb      	adds	r3, r7, r3
 8001cee:	2201      	movs	r2, #1
 8001cf0:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cf2:	4b64      	ldr	r3, [pc, #400]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	2380      	movs	r3, #128	; 0x80
 8001cf8:	005b      	lsls	r3, r3, #1
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	d11a      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cfe:	4b61      	ldr	r3, [pc, #388]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	4b60      	ldr	r3, [pc, #384]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d04:	2180      	movs	r1, #128	; 0x80
 8001d06:	0049      	lsls	r1, r1, #1
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d0c:	f7ff f836 	bl	8000d7c <HAL_GetTick>
 8001d10:	0003      	movs	r3, r0
 8001d12:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d14:	e008      	b.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d16:	f7ff f831 	bl	8000d7c <HAL_GetTick>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	1ad3      	subs	r3, r2, r3
 8001d20:	2b64      	cmp	r3, #100	; 0x64
 8001d22:	d901      	bls.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x8c>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e0a6      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1da>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d28:	4b56      	ldr	r3, [pc, #344]	; (8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	2380      	movs	r3, #128	; 0x80
 8001d2e:	005b      	lsls	r3, r3, #1
 8001d30:	4013      	ands	r3, r2
 8001d32:	d0f0      	beq.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001d34:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d36:	6a1a      	ldr	r2, [r3, #32]
 8001d38:	23c0      	movs	r3, #192	; 0xc0
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d034      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685a      	ldr	r2, [r3, #4]
 8001d4a:	23c0      	movs	r3, #192	; 0xc0
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4013      	ands	r3, r2
 8001d50:	68fa      	ldr	r2, [r7, #12]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d02c      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001d56:	4b4a      	ldr	r3, [pc, #296]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d58:	6a1b      	ldr	r3, [r3, #32]
 8001d5a:	4a4b      	ldr	r2, [pc, #300]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001d60:	4b47      	ldr	r3, [pc, #284]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d62:	6a1a      	ldr	r2, [r3, #32]
 8001d64:	4b46      	ldr	r3, [pc, #280]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0249      	lsls	r1, r1, #9
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001d6e:	4b44      	ldr	r3, [pc, #272]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d70:	6a1a      	ldr	r2, [r3, #32]
 8001d72:	4b43      	ldr	r3, [pc, #268]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d74:	4945      	ldr	r1, [pc, #276]	; (8001e8c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001d76:	400a      	ands	r2, r1
 8001d78:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001d7a:	4b41      	ldr	r3, [pc, #260]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2201      	movs	r2, #1
 8001d84:	4013      	ands	r3, r2
 8001d86:	d013      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d88:	f7fe fff8 	bl	8000d7c <HAL_GetTick>
 8001d8c:	0003      	movs	r3, r0
 8001d8e:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d90:	e009      	b.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d92:	f7fe fff3 	bl	8000d7c <HAL_GetTick>
 8001d96:	0002      	movs	r2, r0
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	4a3c      	ldr	r2, [pc, #240]	; (8001e90 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e067      	b.n	8001e76 <HAL_RCCEx_PeriphCLKConfig+0x1da>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001da6:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001da8:	6a1b      	ldr	r3, [r3, #32]
 8001daa:	2202      	movs	r2, #2
 8001dac:	4013      	ands	r3, r2
 8001dae:	d0f0      	beq.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0xf6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001db0:	4b33      	ldr	r3, [pc, #204]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	0019      	movs	r1, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685a      	ldr	r2, [r3, #4]
 8001dbe:	4b30      	ldr	r3, [pc, #192]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dc0:	430a      	orrs	r2, r1
 8001dc2:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001dc4:	2317      	movs	r3, #23
 8001dc6:	18fb      	adds	r3, r7, r3
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d105      	bne.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x13e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dce:	4b2c      	ldr	r3, [pc, #176]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dd0:	69da      	ldr	r2, [r3, #28]
 8001dd2:	4b2b      	ldr	r3, [pc, #172]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001dd4:	492f      	ldr	r1, [pc, #188]	; (8001e94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	2201      	movs	r2, #1
 8001de0:	4013      	ands	r3, r2
 8001de2:	d009      	beq.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x15c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001de4:	4b26      	ldr	r3, [pc, #152]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de8:	2203      	movs	r2, #3
 8001dea:	4393      	bics	r3, r2
 8001dec:	0019      	movs	r1, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689a      	ldr	r2, [r3, #8]
 8001df2:	4b23      	ldr	r3, [pc, #140]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001df4:	430a      	orrs	r2, r1
 8001df6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2202      	movs	r2, #2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	d009      	beq.n	8001e16 <HAL_RCCEx_PeriphCLKConfig+0x17a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e02:	4b1f      	ldr	r3, [pc, #124]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	4a24      	ldr	r2, [pc, #144]	; (8001e98 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8001e08:	4013      	ands	r3, r2
 8001e0a:	0019      	movs	r1, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b1b      	ldr	r3, [pc, #108]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e12:	430a      	orrs	r2, r1
 8001e14:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	2220      	movs	r2, #32
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d009      	beq.n	8001e34 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001e20:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e24:	2210      	movs	r2, #16
 8001e26:	4393      	bics	r3, r2
 8001e28:	0019      	movs	r1, r3
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	691a      	ldr	r2, [r3, #16]
 8001e2e:	4b14      	ldr	r3, [pc, #80]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e30:	430a      	orrs	r2, r1
 8001e32:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	2380      	movs	r3, #128	; 0x80
 8001e3a:	029b      	lsls	r3, r3, #10
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	d009      	beq.n	8001e54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001e40:	4b0f      	ldr	r3, [pc, #60]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e44:	2280      	movs	r2, #128	; 0x80
 8001e46:	4393      	bics	r3, r2
 8001e48:	0019      	movs	r1, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e50:	430a      	orrs	r2, r1
 8001e52:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	2380      	movs	r3, #128	; 0x80
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d009      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e60:	4b07      	ldr	r3, [pc, #28]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e64:	2240      	movs	r2, #64	; 0x40
 8001e66:	4393      	bics	r3, r2
 8001e68:	0019      	movs	r1, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	695a      	ldr	r2, [r3, #20]
 8001e6e:	4b04      	ldr	r3, [pc, #16]	; (8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001e70:	430a      	orrs	r2, r1
 8001e72:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	0018      	movs	r0, r3
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	b006      	add	sp, #24
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	46c0      	nop			; (mov r8, r8)
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40007000 	.word	0x40007000
 8001e88:	fffffcff 	.word	0xfffffcff
 8001e8c:	fffeffff 	.word	0xfffeffff
 8001e90:	00001388 	.word	0x00001388
 8001e94:	efffffff 	.word	0xefffffff
 8001e98:	fffcffff 	.word	0xfffcffff

08001e9c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e08a      	b.n	8001fc4 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	225d      	movs	r2, #93	; 0x5d
 8001eb8:	5c9b      	ldrb	r3, [r3, r2]
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	225c      	movs	r2, #92	; 0x5c
 8001ec4:	2100      	movs	r1, #0
 8001ec6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	0018      	movs	r0, r3
 8001ecc:	f7fe fd36 	bl	800093c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	225d      	movs	r2, #93	; 0x5d
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	2140      	movs	r1, #64	; 0x40
 8001ee4:	438a      	bics	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	68da      	ldr	r2, [r3, #12]
 8001eec:	23e0      	movs	r3, #224	; 0xe0
 8001eee:	00db      	lsls	r3, r3, #3
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d902      	bls.n	8001efa <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	e002      	b.n	8001f00 <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001efa:	2380      	movs	r3, #128	; 0x80
 8001efc:	015b      	lsls	r3, r3, #5
 8001efe:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68da      	ldr	r2, [r3, #12]
 8001f04:	23f0      	movs	r3, #240	; 0xf0
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	429a      	cmp	r2, r3
 8001f0a:	d008      	beq.n	8001f1e <HAL_SPI_Init+0x82>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	68da      	ldr	r2, [r3, #12]
 8001f10:	23e0      	movs	r3, #224	; 0xe0
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d002      	beq.n	8001f1e <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d10c      	bne.n	8001f40 <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	68da      	ldr	r2, [r3, #12]
 8001f2a:	23e0      	movs	r3, #224	; 0xe0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d903      	bls.n	8001f3a <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2202      	movs	r2, #2
 8001f36:	631a      	str	r2, [r3, #48]	; 0x30
 8001f38:	e002      	b.n	8001f40 <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	685a      	ldr	r2, [r3, #4]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	431a      	orrs	r2, r3
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	691b      	ldr	r3, [r3, #16]
 8001f4e:	431a      	orrs	r2, r3
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	431a      	orrs	r2, r3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6999      	ldr	r1, [r3, #24]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	009b      	lsls	r3, r3, #2
 8001f5e:	400b      	ands	r3, r1
 8001f60:	431a      	orrs	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	69db      	ldr	r3, [r3, #28]
 8001f66:	431a      	orrs	r2, r3
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6a1b      	ldr	r3, [r3, #32]
 8001f6c:	431a      	orrs	r2, r3
 8001f6e:	0011      	movs	r1, r2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	430a      	orrs	r2, r1
 8001f7a:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	699b      	ldr	r3, [r3, #24]
 8001f80:	0c1b      	lsrs	r3, r3, #16
 8001f82:	2204      	movs	r2, #4
 8001f84:	401a      	ands	r2, r3
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	431a      	orrs	r2, r3
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f90:	431a      	orrs	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	68db      	ldr	r3, [r3, #12]
 8001f96:	431a      	orrs	r2, r3
 8001f98:	0011      	movs	r1, r2
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	68fa      	ldr	r2, [r7, #12]
 8001fa0:	430a      	orrs	r2, r1
 8001fa2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	69da      	ldr	r2, [r3, #28]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4907      	ldr	r1, [pc, #28]	; (8001fcc <HAL_SPI_Init+0x130>)
 8001fb0:	400a      	ands	r2, r1
 8001fb2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	225d      	movs	r2, #93	; 0x5d
 8001fbe:	2101      	movs	r1, #1
 8001fc0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	b004      	add	sp, #16
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	fffff7ff 	.word	0xfffff7ff

08001fd0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b088      	sub	sp, #32
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	60f8      	str	r0, [r7, #12]
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	603b      	str	r3, [r7, #0]
 8001fdc:	1dbb      	adds	r3, r7, #6
 8001fde:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001fe0:	231f      	movs	r3, #31
 8001fe2:	18fb      	adds	r3, r7, r3
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	225c      	movs	r2, #92	; 0x5c
 8001fec:	5c9b      	ldrb	r3, [r3, r2]
 8001fee:	2b01      	cmp	r3, #1
 8001ff0:	d101      	bne.n	8001ff6 <HAL_SPI_Transmit+0x26>
 8001ff2:	2302      	movs	r3, #2
 8001ff4:	e169      	b.n	80022ca <HAL_SPI_Transmit+0x2fa>
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	225c      	movs	r2, #92	; 0x5c
 8001ffa:	2101      	movs	r1, #1
 8001ffc:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001ffe:	f7fe febd 	bl	8000d7c <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002006:	2316      	movs	r3, #22
 8002008:	18fb      	adds	r3, r7, r3
 800200a:	1dba      	adds	r2, r7, #6
 800200c:	8812      	ldrh	r2, [r2, #0]
 800200e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	225d      	movs	r2, #93	; 0x5d
 8002014:	5c9b      	ldrb	r3, [r3, r2]
 8002016:	b2db      	uxtb	r3, r3
 8002018:	2b01      	cmp	r3, #1
 800201a:	d004      	beq.n	8002026 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800201c:	231f      	movs	r3, #31
 800201e:	18fb      	adds	r3, r7, r3
 8002020:	2202      	movs	r2, #2
 8002022:	701a      	strb	r2, [r3, #0]
    goto error;
 8002024:	e146      	b.n	80022b4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002026:	68bb      	ldr	r3, [r7, #8]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d003      	beq.n	8002034 <HAL_SPI_Transmit+0x64>
 800202c:	1dbb      	adds	r3, r7, #6
 800202e:	881b      	ldrh	r3, [r3, #0]
 8002030:	2b00      	cmp	r3, #0
 8002032:	d104      	bne.n	800203e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002034:	231f      	movs	r3, #31
 8002036:	18fb      	adds	r3, r7, r3
 8002038:	2201      	movs	r2, #1
 800203a:	701a      	strb	r2, [r3, #0]
    goto error;
 800203c:	e13a      	b.n	80022b4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	225d      	movs	r2, #93	; 0x5d
 8002042:	2103      	movs	r1, #3
 8002044:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2200      	movs	r2, #0
 800204a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	68ba      	ldr	r2, [r7, #8]
 8002050:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1dba      	adds	r2, r7, #6
 8002056:	8812      	ldrh	r2, [r2, #0]
 8002058:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	1dba      	adds	r2, r7, #6
 800205e:	8812      	ldrh	r2, [r2, #0]
 8002060:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	2200      	movs	r2, #0
 8002066:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2244      	movs	r2, #68	; 0x44
 800206c:	2100      	movs	r1, #0
 800206e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2246      	movs	r2, #70	; 0x46
 8002074:	2100      	movs	r1, #0
 8002076:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	689a      	ldr	r2, [r3, #8]
 8002088:	2380      	movs	r3, #128	; 0x80
 800208a:	021b      	lsls	r3, r3, #8
 800208c:	429a      	cmp	r2, r3
 800208e:	d108      	bne.n	80020a2 <HAL_SPI_Transmit+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2180      	movs	r1, #128	; 0x80
 800209c:	01c9      	lsls	r1, r1, #7
 800209e:	430a      	orrs	r2, r1
 80020a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2240      	movs	r2, #64	; 0x40
 80020aa:	4013      	ands	r3, r2
 80020ac:	2b40      	cmp	r3, #64	; 0x40
 80020ae:	d007      	beq.n	80020c0 <HAL_SPI_Transmit+0xf0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	2140      	movs	r1, #64	; 0x40
 80020bc:	430a      	orrs	r2, r1
 80020be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	68da      	ldr	r2, [r3, #12]
 80020c4:	23e0      	movs	r3, #224	; 0xe0
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d94e      	bls.n	800216a <HAL_SPI_Transmit+0x19a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d004      	beq.n	80020de <HAL_SPI_Transmit+0x10e>
 80020d4:	2316      	movs	r3, #22
 80020d6:	18fb      	adds	r3, r7, r3
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d13f      	bne.n	800215e <HAL_SPI_Transmit+0x18e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020e2:	881a      	ldrh	r2, [r3, #0]
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ee:	1c9a      	adds	r2, r3, #2
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020f8:	b29b      	uxth	r3, r3
 80020fa:	3b01      	subs	r3, #1
 80020fc:	b29a      	uxth	r2, r3
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002102:	e02c      	b.n	800215e <HAL_SPI_Transmit+0x18e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2202      	movs	r2, #2
 800210c:	4013      	ands	r3, r2
 800210e:	2b02      	cmp	r3, #2
 8002110:	d112      	bne.n	8002138 <HAL_SPI_Transmit+0x168>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002116:	881a      	ldrh	r2, [r3, #0]
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002122:	1c9a      	adds	r2, r3, #2
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800212c:	b29b      	uxth	r3, r3
 800212e:	3b01      	subs	r3, #1
 8002130:	b29a      	uxth	r2, r3
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002136:	e012      	b.n	800215e <HAL_SPI_Transmit+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002138:	f7fe fe20 	bl	8000d7c <HAL_GetTick>
 800213c:	0002      	movs	r2, r0
 800213e:	69bb      	ldr	r3, [r7, #24]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	683a      	ldr	r2, [r7, #0]
 8002144:	429a      	cmp	r2, r3
 8002146:	d802      	bhi.n	800214e <HAL_SPI_Transmit+0x17e>
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	3301      	adds	r3, #1
 800214c:	d102      	bne.n	8002154 <HAL_SPI_Transmit+0x184>
 800214e:	683b      	ldr	r3, [r7, #0]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d104      	bne.n	800215e <HAL_SPI_Transmit+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002154:	231f      	movs	r3, #31
 8002156:	18fb      	adds	r3, r7, r3
 8002158:	2203      	movs	r2, #3
 800215a:	701a      	strb	r2, [r3, #0]
          goto error;
 800215c:	e0aa      	b.n	80022b4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002162:	b29b      	uxth	r3, r3
 8002164:	2b00      	cmp	r3, #0
 8002166:	d1cd      	bne.n	8002104 <HAL_SPI_Transmit+0x134>
 8002168:	e080      	b.n	800226c <HAL_SPI_Transmit+0x29c>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d005      	beq.n	800217e <HAL_SPI_Transmit+0x1ae>
 8002172:	2316      	movs	r3, #22
 8002174:	18fb      	adds	r3, r7, r3
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d000      	beq.n	800217e <HAL_SPI_Transmit+0x1ae>
 800217c:	e071      	b.n	8002262 <HAL_SPI_Transmit+0x292>
    {
      if (hspi->TxXferCount > 1U)
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002182:	b29b      	uxth	r3, r3
 8002184:	2b01      	cmp	r3, #1
 8002186:	d912      	bls.n	80021ae <HAL_SPI_Transmit+0x1de>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800218c:	881a      	ldrh	r2, [r3, #0]
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002198:	1c9a      	adds	r2, r3, #2
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	3b02      	subs	r3, #2
 80021a6:	b29a      	uxth	r2, r3
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80021ac:	e059      	b.n	8002262 <HAL_SPI_Transmit+0x292>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	330c      	adds	r3, #12
 80021b8:	7812      	ldrb	r2, [r2, #0]
 80021ba:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80021d4:	e045      	b.n	8002262 <HAL_SPI_Transmit+0x292>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2202      	movs	r2, #2
 80021de:	4013      	ands	r3, r2
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d12b      	bne.n	800223c <HAL_SPI_Transmit+0x26c>
      {
        if (hspi->TxXferCount > 1U)
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d912      	bls.n	8002214 <HAL_SPI_Transmit+0x244>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f2:	881a      	ldrh	r2, [r3, #0]
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fe:	1c9a      	adds	r2, r3, #2
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002208:	b29b      	uxth	r3, r3
 800220a:	3b02      	subs	r3, #2
 800220c:	b29a      	uxth	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002212:	e026      	b.n	8002262 <HAL_SPI_Transmit+0x292>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	330c      	adds	r3, #12
 800221e:	7812      	ldrb	r2, [r2, #0]
 8002220:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002226:	1c5a      	adds	r2, r3, #1
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	3b01      	subs	r3, #1
 8002234:	b29a      	uxth	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	87da      	strh	r2, [r3, #62]	; 0x3e
 800223a:	e012      	b.n	8002262 <HAL_SPI_Transmit+0x292>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800223c:	f7fe fd9e 	bl	8000d7c <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	429a      	cmp	r2, r3
 800224a:	d802      	bhi.n	8002252 <HAL_SPI_Transmit+0x282>
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3301      	adds	r3, #1
 8002250:	d102      	bne.n	8002258 <HAL_SPI_Transmit+0x288>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d104      	bne.n	8002262 <HAL_SPI_Transmit+0x292>
        {
          errorcode = HAL_TIMEOUT;
 8002258:	231f      	movs	r3, #31
 800225a:	18fb      	adds	r3, r7, r3
 800225c:	2203      	movs	r2, #3
 800225e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002260:	e028      	b.n	80022b4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002266:	b29b      	uxth	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	d1b4      	bne.n	80021d6 <HAL_SPI_Transmit+0x206>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	6839      	ldr	r1, [r7, #0]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	0018      	movs	r0, r3
 8002274:	f000 fb58 	bl	8002928 <SPI_EndRxTxTransaction>
 8002278:	1e03      	subs	r3, r0, #0
 800227a:	d002      	beq.n	8002282 <HAL_SPI_Transmit+0x2b2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2220      	movs	r2, #32
 8002280:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	689b      	ldr	r3, [r3, #8]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d10a      	bne.n	80022a0 <HAL_SPI_Transmit+0x2d0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	613b      	str	r3, [r7, #16]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	689b      	ldr	r3, [r3, #8]
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d004      	beq.n	80022b2 <HAL_SPI_Transmit+0x2e2>
  {
    errorcode = HAL_ERROR;
 80022a8:	231f      	movs	r3, #31
 80022aa:	18fb      	adds	r3, r7, r3
 80022ac:	2201      	movs	r2, #1
 80022ae:	701a      	strb	r2, [r3, #0]
 80022b0:	e000      	b.n	80022b4 <HAL_SPI_Transmit+0x2e4>
  }

error:
 80022b2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	225d      	movs	r2, #93	; 0x5d
 80022b8:	2101      	movs	r1, #1
 80022ba:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	225c      	movs	r2, #92	; 0x5c
 80022c0:	2100      	movs	r1, #0
 80022c2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80022c4:	231f      	movs	r3, #31
 80022c6:	18fb      	adds	r3, r7, r3
 80022c8:	781b      	ldrb	r3, [r3, #0]
}
 80022ca:	0018      	movs	r0, r3
 80022cc:	46bd      	mov	sp, r7
 80022ce:	b008      	add	sp, #32
 80022d0:	bd80      	pop	{r7, pc}
	...

080022d4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b08a      	sub	sp, #40	; 0x28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	001a      	movs	r2, r3
 80022e2:	1cbb      	adds	r3, r7, #2
 80022e4:	801a      	strh	r2, [r3, #0]
  uint32_t             spi_cr1;
  uint32_t             spi_cr2;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80022e6:	2301      	movs	r3, #1
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80022ea:	2323      	movs	r3, #35	; 0x23
 80022ec:	18fb      	adds	r3, r7, r3
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	225c      	movs	r2, #92	; 0x5c
 80022f6:	5c9b      	ldrb	r3, [r3, r2]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d101      	bne.n	8002300 <HAL_SPI_TransmitReceive+0x2c>
 80022fc:	2302      	movs	r3, #2
 80022fe:	e21f      	b.n	8002740 <HAL_SPI_TransmitReceive+0x46c>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	225c      	movs	r2, #92	; 0x5c
 8002304:	2101      	movs	r1, #1
 8002306:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002308:	f7fe fd38 	bl	8000d7c <HAL_GetTick>
 800230c:	0003      	movs	r3, r0
 800230e:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002310:	201b      	movs	r0, #27
 8002312:	183b      	adds	r3, r7, r0
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	215d      	movs	r1, #93	; 0x5d
 8002318:	5c52      	ldrb	r2, [r2, r1]
 800231a:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002322:	2312      	movs	r3, #18
 8002324:	18fb      	adds	r3, r7, r3
 8002326:	1cba      	adds	r2, r7, #2
 8002328:	8812      	ldrh	r2, [r2, #0]
 800232a:	801a      	strh	r2, [r3, #0]
  initial_RxXferCount = Size;
 800232c:	2310      	movs	r3, #16
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	1cba      	adds	r2, r7, #2
 8002332:	8812      	ldrh	r2, [r2, #0]
 8002334:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002336:	183b      	adds	r3, r7, r0
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d012      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x90>
 800233e:	697a      	ldr	r2, [r7, #20]
 8002340:	2382      	movs	r3, #130	; 0x82
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	429a      	cmp	r2, r3
 8002346:	d108      	bne.n	800235a <HAL_SPI_TransmitReceive+0x86>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d104      	bne.n	800235a <HAL_SPI_TransmitReceive+0x86>
 8002350:	231b      	movs	r3, #27
 8002352:	18fb      	adds	r3, r7, r3
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d004      	beq.n	8002364 <HAL_SPI_TransmitReceive+0x90>
  {
    errorcode = HAL_BUSY;
 800235a:	2323      	movs	r3, #35	; 0x23
 800235c:	18fb      	adds	r3, r7, r3
 800235e:	2202      	movs	r2, #2
 8002360:	701a      	strb	r2, [r3, #0]
    goto error;
 8002362:	e1e2      	b.n	800272a <HAL_SPI_TransmitReceive+0x456>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d006      	beq.n	8002378 <HAL_SPI_TransmitReceive+0xa4>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d003      	beq.n	8002378 <HAL_SPI_TransmitReceive+0xa4>
 8002370:	1cbb      	adds	r3, r7, #2
 8002372:	881b      	ldrh	r3, [r3, #0]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d104      	bne.n	8002382 <HAL_SPI_TransmitReceive+0xae>
  {
    errorcode = HAL_ERROR;
 8002378:	2323      	movs	r3, #35	; 0x23
 800237a:	18fb      	adds	r3, r7, r3
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002380:	e1d3      	b.n	800272a <HAL_SPI_TransmitReceive+0x456>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	225d      	movs	r2, #93	; 0x5d
 8002386:	5c9b      	ldrb	r3, [r3, r2]
 8002388:	b2db      	uxtb	r3, r3
 800238a:	2b04      	cmp	r3, #4
 800238c:	d003      	beq.n	8002396 <HAL_SPI_TransmitReceive+0xc2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	225d      	movs	r2, #93	; 0x5d
 8002392:	2105      	movs	r1, #5
 8002394:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	2200      	movs	r2, #0
 800239a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	687a      	ldr	r2, [r7, #4]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	1cba      	adds	r2, r7, #2
 80023a6:	2146      	movs	r1, #70	; 0x46
 80023a8:	8812      	ldrh	r2, [r2, #0]
 80023aa:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	1cba      	adds	r2, r7, #2
 80023b0:	2144      	movs	r1, #68	; 0x44
 80023b2:	8812      	ldrh	r2, [r2, #0]
 80023b4:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	1cba      	adds	r2, r7, #2
 80023c0:	8812      	ldrh	r2, [r2, #0]
 80023c2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	1cba      	adds	r2, r7, #2
 80023c8:	8812      	ldrh	r2, [r2, #0]
 80023ca:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	2200      	movs	r2, #0
 80023d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	2200      	movs	r2, #0
 80023d6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	68da      	ldr	r2, [r3, #12]
 80023dc:	23e0      	movs	r3, #224	; 0xe0
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d804      	bhi.n	80023ee <HAL_SPI_TransmitReceive+0x11a>
 80023e4:	2310      	movs	r3, #16
 80023e6:	18fb      	adds	r3, r7, r3
 80023e8:	881b      	ldrh	r3, [r3, #0]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d908      	bls.n	8002400 <HAL_SPI_TransmitReceive+0x12c>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	685a      	ldr	r2, [r3, #4]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	49ca      	ldr	r1, [pc, #808]	; (8002724 <HAL_SPI_TransmitReceive+0x450>)
 80023fa:	400a      	ands	r2, r1
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	e008      	b.n	8002412 <HAL_SPI_TransmitReceive+0x13e>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	685a      	ldr	r2, [r3, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2180      	movs	r1, #128	; 0x80
 800240c:	0149      	lsls	r1, r1, #5
 800240e:	430a      	orrs	r2, r1
 8002410:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2240      	movs	r2, #64	; 0x40
 800241a:	4013      	ands	r3, r2
 800241c:	2b40      	cmp	r3, #64	; 0x40
 800241e:	d007      	beq.n	8002430 <HAL_SPI_TransmitReceive+0x15c>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681a      	ldr	r2, [r3, #0]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2140      	movs	r1, #64	; 0x40
 800242c:	430a      	orrs	r2, r1
 800242e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	23e0      	movs	r3, #224	; 0xe0
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	429a      	cmp	r2, r3
 800243a:	d800      	bhi.n	800243e <HAL_SPI_TransmitReceive+0x16a>
 800243c:	e07f      	b.n	800253e <HAL_SPI_TransmitReceive+0x26a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	685b      	ldr	r3, [r3, #4]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d005      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x17e>
 8002446:	2312      	movs	r3, #18
 8002448:	18fb      	adds	r3, r7, r3
 800244a:	881b      	ldrh	r3, [r3, #0]
 800244c:	2b01      	cmp	r3, #1
 800244e:	d000      	beq.n	8002452 <HAL_SPI_TransmitReceive+0x17e>
 8002450:	e069      	b.n	8002526 <HAL_SPI_TransmitReceive+0x252>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002462:	1c9a      	adds	r2, r3, #2
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800246c:	b29b      	uxth	r3, r3
 800246e:	3b01      	subs	r3, #1
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002476:	e056      	b.n	8002526 <HAL_SPI_TransmitReceive+0x252>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	2202      	movs	r2, #2
 8002480:	4013      	ands	r3, r2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d11b      	bne.n	80024be <HAL_SPI_TransmitReceive+0x1ea>
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d016      	beq.n	80024be <HAL_SPI_TransmitReceive+0x1ea>
 8002490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002492:	2b01      	cmp	r3, #1
 8002494:	d113      	bne.n	80024be <HAL_SPI_TransmitReceive+0x1ea>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800249a:	881a      	ldrh	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a6:	1c9a      	adds	r2, r3, #2
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	3b01      	subs	r3, #1
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80024ba:	2300      	movs	r3, #0
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2201      	movs	r2, #1
 80024c6:	4013      	ands	r3, r2
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d11c      	bne.n	8002506 <HAL_SPI_TransmitReceive+0x232>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2246      	movs	r2, #70	; 0x46
 80024d0:	5a9b      	ldrh	r3, [r3, r2]
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d016      	beq.n	8002506 <HAL_SPI_TransmitReceive+0x232>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68da      	ldr	r2, [r3, #12]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	b292      	uxth	r2, r2
 80024e4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ea:	1c9a      	adds	r2, r3, #2
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	2246      	movs	r2, #70	; 0x46
 80024f4:	5a9b      	ldrh	r3, [r3, r2]
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	3b01      	subs	r3, #1
 80024fa:	b299      	uxth	r1, r3
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2246      	movs	r2, #70	; 0x46
 8002500:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002502:	2301      	movs	r3, #1
 8002504:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002506:	f7fe fc39 	bl	8000d7c <HAL_GetTick>
 800250a:	0002      	movs	r2, r0
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002512:	429a      	cmp	r2, r3
 8002514:	d807      	bhi.n	8002526 <HAL_SPI_TransmitReceive+0x252>
 8002516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002518:	3301      	adds	r3, #1
 800251a:	d004      	beq.n	8002526 <HAL_SPI_TransmitReceive+0x252>
      {
        errorcode = HAL_TIMEOUT;
 800251c:	2323      	movs	r3, #35	; 0x23
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	2203      	movs	r2, #3
 8002522:	701a      	strb	r2, [r3, #0]
        goto error;
 8002524:	e101      	b.n	800272a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800252a:	b29b      	uxth	r3, r3
 800252c:	2b00      	cmp	r3, #0
 800252e:	d1a3      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x1a4>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	2246      	movs	r2, #70	; 0x46
 8002534:	5a9b      	ldrh	r3, [r3, r2]
 8002536:	b29b      	uxth	r3, r3
 8002538:	2b00      	cmp	r3, #0
 800253a:	d19d      	bne.n	8002478 <HAL_SPI_TransmitReceive+0x1a4>
 800253c:	e0e2      	b.n	8002704 <HAL_SPI_TransmitReceive+0x430>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d005      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x27e>
 8002546:	2312      	movs	r3, #18
 8002548:	18fb      	adds	r3, r7, r3
 800254a:	881b      	ldrh	r3, [r3, #0]
 800254c:	2b01      	cmp	r3, #1
 800254e:	d000      	beq.n	8002552 <HAL_SPI_TransmitReceive+0x27e>
 8002550:	e0cb      	b.n	80026ea <HAL_SPI_TransmitReceive+0x416>
    {
      if (hspi->TxXferCount > 1U)
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d912      	bls.n	8002582 <HAL_SPI_TransmitReceive+0x2ae>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002560:	881a      	ldrh	r2, [r3, #0]
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800256c:	1c9a      	adds	r2, r3, #2
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002576:	b29b      	uxth	r3, r3
 8002578:	3b02      	subs	r3, #2
 800257a:	b29a      	uxth	r2, r3
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002580:	e0b3      	b.n	80026ea <HAL_SPI_TransmitReceive+0x416>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	330c      	adds	r3, #12
 800258c:	7812      	ldrb	r2, [r2, #0]
 800258e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002594:	1c5a      	adds	r2, r3, #1
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800259e:	b29b      	uxth	r3, r3
 80025a0:	3b01      	subs	r3, #1
 80025a2:	b29a      	uxth	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80025a8:	e09f      	b.n	80026ea <HAL_SPI_TransmitReceive+0x416>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	2202      	movs	r2, #2
 80025b2:	4013      	ands	r3, r2
 80025b4:	2b02      	cmp	r3, #2
 80025b6:	d134      	bne.n	8002622 <HAL_SPI_TransmitReceive+0x34e>
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025bc:	b29b      	uxth	r3, r3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d02f      	beq.n	8002622 <HAL_SPI_TransmitReceive+0x34e>
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d12c      	bne.n	8002622 <HAL_SPI_TransmitReceive+0x34e>
      {
        if (hspi->TxXferCount > 1U)
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d912      	bls.n	80025f8 <HAL_SPI_TransmitReceive+0x324>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025d6:	881a      	ldrh	r2, [r3, #0]
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e2:	1c9a      	adds	r2, r3, #2
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80025ec:	b29b      	uxth	r3, r3
 80025ee:	3b02      	subs	r3, #2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80025f6:	e012      	b.n	800261e <HAL_SPI_TransmitReceive+0x34a>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	330c      	adds	r3, #12
 8002602:	7812      	ldrb	r2, [r2, #0]
 8002604:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800260a:	1c5a      	adds	r2, r3, #1
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002614:	b29b      	uxth	r3, r3
 8002616:	3b01      	subs	r3, #1
 8002618:	b29a      	uxth	r2, r3
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800261e:	2300      	movs	r3, #0
 8002620:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	689b      	ldr	r3, [r3, #8]
 8002628:	2201      	movs	r2, #1
 800262a:	4013      	ands	r3, r2
 800262c:	2b01      	cmp	r3, #1
 800262e:	d149      	bne.n	80026c4 <HAL_SPI_TransmitReceive+0x3f0>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	2246      	movs	r2, #70	; 0x46
 8002634:	5a9b      	ldrh	r3, [r3, r2]
 8002636:	b29b      	uxth	r3, r3
 8002638:	2b00      	cmp	r3, #0
 800263a:	d043      	beq.n	80026c4 <HAL_SPI_TransmitReceive+0x3f0>
      {
        if (hspi->RxXferCount > 1U)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	2246      	movs	r2, #70	; 0x46
 8002640:	5a9b      	ldrh	r3, [r3, r2]
 8002642:	b29b      	uxth	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d924      	bls.n	8002692 <HAL_SPI_TransmitReceive+0x3be>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68da      	ldr	r2, [r3, #12]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	b292      	uxth	r2, r2
 8002654:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265a:	1c9a      	adds	r2, r3, #2
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	2246      	movs	r2, #70	; 0x46
 8002664:	5a9b      	ldrh	r3, [r3, r2]
 8002666:	b29b      	uxth	r3, r3
 8002668:	3b02      	subs	r3, #2
 800266a:	b299      	uxth	r1, r3
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2246      	movs	r2, #70	; 0x46
 8002670:	5299      	strh	r1, [r3, r2]
          if (hspi->RxXferCount <= 1U)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2246      	movs	r2, #70	; 0x46
 8002676:	5a9b      	ldrh	r3, [r3, r2]
 8002678:	b29b      	uxth	r3, r3
 800267a:	2b01      	cmp	r3, #1
 800267c:	d820      	bhi.n	80026c0 <HAL_SPI_TransmitReceive+0x3ec>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2180      	movs	r1, #128	; 0x80
 800268a:	0149      	lsls	r1, r1, #5
 800268c:	430a      	orrs	r2, r1
 800268e:	605a      	str	r2, [r3, #4]
 8002690:	e016      	b.n	80026c0 <HAL_SPI_TransmitReceive+0x3ec>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	330c      	adds	r3, #12
 8002698:	001a      	movs	r2, r3
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	7812      	ldrb	r2, [r2, #0]
 80026a0:	b2d2      	uxtb	r2, r2
 80026a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a8:	1c5a      	adds	r2, r3, #1
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	2246      	movs	r2, #70	; 0x46
 80026b2:	5a9b      	ldrh	r3, [r3, r2]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	3b01      	subs	r3, #1
 80026b8:	b299      	uxth	r1, r3
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2246      	movs	r2, #70	; 0x46
 80026be:	5299      	strh	r1, [r3, r2]
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026c0:	2301      	movs	r3, #1
 80026c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80026c4:	f7fe fb5a 	bl	8000d7c <HAL_GetTick>
 80026c8:	0002      	movs	r2, r0
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d802      	bhi.n	80026da <HAL_SPI_TransmitReceive+0x406>
 80026d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026d6:	3301      	adds	r3, #1
 80026d8:	d102      	bne.n	80026e0 <HAL_SPI_TransmitReceive+0x40c>
 80026da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d104      	bne.n	80026ea <HAL_SPI_TransmitReceive+0x416>
      {
        errorcode = HAL_TIMEOUT;
 80026e0:	2323      	movs	r3, #35	; 0x23
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	2203      	movs	r2, #3
 80026e6:	701a      	strb	r2, [r3, #0]
        goto error;
 80026e8:	e01f      	b.n	800272a <HAL_SPI_TransmitReceive+0x456>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d000      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x422>
 80026f4:	e759      	b.n	80025aa <HAL_SPI_TransmitReceive+0x2d6>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2246      	movs	r2, #70	; 0x46
 80026fa:	5a9b      	ldrh	r3, [r3, r2]
 80026fc:	b29b      	uxth	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d000      	beq.n	8002704 <HAL_SPI_TransmitReceive+0x430>
 8002702:	e752      	b.n	80025aa <HAL_SPI_TransmitReceive+0x2d6>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	0018      	movs	r0, r3
 800270c:	f000 f90c 	bl	8002928 <SPI_EndRxTxTransaction>
 8002710:	1e03      	subs	r3, r0, #0
 8002712:	d009      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x454>
  {
    errorcode = HAL_ERROR;
 8002714:	2323      	movs	r3, #35	; 0x23
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	2201      	movs	r2, #1
 800271a:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2220      	movs	r2, #32
 8002720:	661a      	str	r2, [r3, #96]	; 0x60
 8002722:	e002      	b.n	800272a <HAL_SPI_TransmitReceive+0x456>
 8002724:	ffffefff 	.word	0xffffefff
  }

error :
 8002728:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	225d      	movs	r2, #93	; 0x5d
 800272e:	2101      	movs	r1, #1
 8002730:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	225c      	movs	r2, #92	; 0x5c
 8002736:	2100      	movs	r1, #0
 8002738:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800273a:	2323      	movs	r3, #35	; 0x23
 800273c:	18fb      	adds	r3, r7, r3
 800273e:	781b      	ldrb	r3, [r3, #0]
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b00a      	add	sp, #40	; 0x28
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	225d      	movs	r2, #93	; 0x5d
 8002754:	5c9b      	ldrb	r3, [r3, r2]
 8002756:	b2db      	uxtb	r3, r3
}
 8002758:	0018      	movs	r0, r3
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b084      	sub	sp, #16
 8002764:	af00      	add	r7, sp, #0
 8002766:	60f8      	str	r0, [r7, #12]
 8002768:	60b9      	str	r1, [r7, #8]
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	1dfb      	adds	r3, r7, #7
 800276e:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002770:	e050      	b.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	3301      	adds	r3, #1
 8002776:	d04d      	beq.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8002778:	f7fe fb00 	bl	8000d7c <HAL_GetTick>
 800277c:	0002      	movs	r2, r0
 800277e:	69bb      	ldr	r3, [r7, #24]
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	429a      	cmp	r2, r3
 8002786:	d902      	bls.n	800278e <SPI_WaitFlagStateUntilTimeout+0x2e>
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d142      	bne.n	8002814 <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	21e0      	movs	r1, #224	; 0xe0
 800279a:	438a      	bics	r2, r1
 800279c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	685a      	ldr	r2, [r3, #4]
 80027a2:	2382      	movs	r3, #130	; 0x82
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d113      	bne.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0x72>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	689a      	ldr	r2, [r3, #8]
 80027ae:	2380      	movs	r3, #128	; 0x80
 80027b0:	021b      	lsls	r3, r3, #8
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d005      	beq.n	80027c2 <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	429a      	cmp	r2, r3
 80027c0:	d107      	bne.n	80027d2 <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	681a      	ldr	r2, [r3, #0]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	2140      	movs	r1, #64	; 0x40
 80027ce:	438a      	bics	r2, r1
 80027d0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027d6:	2380      	movs	r3, #128	; 0x80
 80027d8:	019b      	lsls	r3, r3, #6
 80027da:	429a      	cmp	r2, r3
 80027dc:	d110      	bne.n	8002800 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4914      	ldr	r1, [pc, #80]	; (800283c <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80027ea:	400a      	ands	r2, r1
 80027ec:	601a      	str	r2, [r3, #0]
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2180      	movs	r1, #128	; 0x80
 80027fa:	0189      	lsls	r1, r1, #6
 80027fc:	430a      	orrs	r2, r1
 80027fe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	225d      	movs	r2, #93	; 0x5d
 8002804:	2101      	movs	r1, #1
 8002806:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	225c      	movs	r2, #92	; 0x5c
 800280c:	2100      	movs	r1, #0
 800280e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00f      	b.n	8002834 <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	68ba      	ldr	r2, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	68ba      	ldr	r2, [r7, #8]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	425a      	negs	r2, r3
 8002824:	4153      	adcs	r3, r2
 8002826:	b2db      	uxtb	r3, r3
 8002828:	001a      	movs	r2, r3
 800282a:	1dfb      	adds	r3, r7, #7
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	429a      	cmp	r2, r3
 8002830:	d19f      	bne.n	8002772 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	0018      	movs	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	b004      	add	sp, #16
 800283a:	bd80      	pop	{r7, pc}
 800283c:	ffffdfff 	.word	0xffffdfff

08002840 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
 800284c:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 800284e:	e05c      	b.n	800290a <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	429a      	cmp	r2, r3
 8002858:	d106      	bne.n	8002868 <SPI_WaitFifoStateUntilTimeout+0x28>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d103      	bne.n	8002868 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	330c      	adds	r3, #12
 8002866:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	3301      	adds	r3, #1
 800286c:	d04d      	beq.n	800290a <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800286e:	f7fe fa85 	bl	8000d7c <HAL_GetTick>
 8002872:	0002      	movs	r2, r0
 8002874:	69bb      	ldr	r3, [r7, #24]
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d902      	bls.n	8002884 <SPI_WaitFifoStateUntilTimeout+0x44>
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d142      	bne.n	800290a <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	685a      	ldr	r2, [r3, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	21e0      	movs	r1, #224	; 0xe0
 8002890:	438a      	bics	r2, r1
 8002892:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	685a      	ldr	r2, [r3, #4]
 8002898:	2382      	movs	r3, #130	; 0x82
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	429a      	cmp	r2, r3
 800289e:	d113      	bne.n	80028c8 <SPI_WaitFifoStateUntilTimeout+0x88>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	689a      	ldr	r2, [r3, #8]
 80028a4:	2380      	movs	r3, #128	; 0x80
 80028a6:	021b      	lsls	r3, r3, #8
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d005      	beq.n	80028b8 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	2380      	movs	r3, #128	; 0x80
 80028b2:	00db      	lsls	r3, r3, #3
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d107      	bne.n	80028c8 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2140      	movs	r1, #64	; 0x40
 80028c4:	438a      	bics	r2, r1
 80028c6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	019b      	lsls	r3, r3, #6
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d110      	bne.n	80028f6 <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4911      	ldr	r1, [pc, #68]	; (8002924 <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80028e0:	400a      	ands	r2, r1
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681a      	ldr	r2, [r3, #0]
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2180      	movs	r1, #128	; 0x80
 80028f0:	0189      	lsls	r1, r1, #6
 80028f2:	430a      	orrs	r2, r1
 80028f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	225d      	movs	r2, #93	; 0x5d
 80028fa:	2101      	movs	r1, #1
 80028fc:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	225c      	movs	r2, #92	; 0x5c
 8002902:	2100      	movs	r1, #0
 8002904:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e008      	b.n	800291c <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	68ba      	ldr	r2, [r7, #8]
 8002912:	4013      	ands	r3, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	429a      	cmp	r2, r3
 8002918:	d19a      	bne.n	8002850 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	0018      	movs	r0, r3
 800291e:	46bd      	mov	sp, r7
 8002920:	b004      	add	sp, #16
 8002922:	bd80      	pop	{r7, pc}
 8002924:	ffffdfff 	.word	0xffffdfff

08002928 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af02      	add	r7, sp, #8
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002934:	68ba      	ldr	r2, [r7, #8]
 8002936:	23c0      	movs	r3, #192	; 0xc0
 8002938:	0159      	lsls	r1, r3, #5
 800293a:	68f8      	ldr	r0, [r7, #12]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	9300      	str	r3, [sp, #0]
 8002940:	0013      	movs	r3, r2
 8002942:	2200      	movs	r2, #0
 8002944:	f7ff ff7c 	bl	8002840 <SPI_WaitFifoStateUntilTimeout>
 8002948:	1e03      	subs	r3, r0, #0
 800294a:	d007      	beq.n	800295c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002950:	2220      	movs	r2, #32
 8002952:	431a      	orrs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	e027      	b.n	80029ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800295c:	68ba      	ldr	r2, [r7, #8]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	9300      	str	r3, [sp, #0]
 8002964:	0013      	movs	r3, r2
 8002966:	2200      	movs	r2, #0
 8002968:	2180      	movs	r1, #128	; 0x80
 800296a:	f7ff fef9 	bl	8002760 <SPI_WaitFlagStateUntilTimeout>
 800296e:	1e03      	subs	r3, r0, #0
 8002970:	d007      	beq.n	8002982 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002976:	2220      	movs	r2, #32
 8002978:	431a      	orrs	r2, r3
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e014      	b.n	80029ac <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	23c0      	movs	r3, #192	; 0xc0
 8002986:	00d9      	lsls	r1, r3, #3
 8002988:	68f8      	ldr	r0, [r7, #12]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	9300      	str	r3, [sp, #0]
 800298e:	0013      	movs	r3, r2
 8002990:	2200      	movs	r2, #0
 8002992:	f7ff ff55 	bl	8002840 <SPI_WaitFifoStateUntilTimeout>
 8002996:	1e03      	subs	r3, r0, #0
 8002998:	d007      	beq.n	80029aa <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800299e:	2220      	movs	r2, #32
 80029a0:	431a      	orrs	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e000      	b.n	80029ac <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80029aa:	2300      	movs	r3, #0
}
 80029ac:	0018      	movs	r0, r3
 80029ae:	46bd      	mov	sp, r7
 80029b0:	b004      	add	sp, #16
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e044      	b.n	8002a50 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d107      	bne.n	80029de <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2270      	movs	r2, #112	; 0x70
 80029d2:	2100      	movs	r1, #0
 80029d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	0018      	movs	r0, r3
 80029da:	f7fe f8ff 	bl	8000bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2224      	movs	r2, #36	; 0x24
 80029e2:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681a      	ldr	r2, [r3, #0]
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	438a      	bics	r2, r1
 80029f2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	0018      	movs	r0, r3
 80029f8:	f000 f8d8 	bl	8002bac <UART_SetConfig>
 80029fc:	0003      	movs	r3, r0
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d101      	bne.n	8002a06 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e024      	b.n	8002a50 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d003      	beq.n	8002a16 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	0018      	movs	r0, r3
 8002a12:	f000 fa97 	bl	8002f44 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	490d      	ldr	r1, [pc, #52]	; (8002a58 <HAL_UART_Init+0xa4>)
 8002a22:	400a      	ands	r2, r1
 8002a24:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	689a      	ldr	r2, [r3, #8]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	212a      	movs	r1, #42	; 0x2a
 8002a32:	438a      	bics	r2, r1
 8002a34:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	430a      	orrs	r2, r1
 8002a44:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 fb2f 	bl	80030ac <UART_CheckIdleState>
 8002a4e:	0003      	movs	r3, r0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	ffffb7ff 	.word	0xffffb7ff

08002a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	; 0x28
 8002a60:	af02      	add	r7, sp, #8
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	603b      	str	r3, [r7, #0]
 8002a68:	1dbb      	adds	r3, r7, #6
 8002a6a:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a70:	2b20      	cmp	r3, #32
 8002a72:	d000      	beq.n	8002a76 <HAL_UART_Transmit+0x1a>
 8002a74:	e095      	b.n	8002ba2 <HAL_UART_Transmit+0x146>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d003      	beq.n	8002a84 <HAL_UART_Transmit+0x28>
 8002a7c:	1dbb      	adds	r3, r7, #6
 8002a7e:	881b      	ldrh	r3, [r3, #0]
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d101      	bne.n	8002a88 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	e08d      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	689a      	ldr	r2, [r3, #8]
 8002a8c:	2380      	movs	r3, #128	; 0x80
 8002a8e:	015b      	lsls	r3, r3, #5
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d109      	bne.n	8002aa8 <HAL_UART_Transmit+0x4c>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	691b      	ldr	r3, [r3, #16]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d105      	bne.n	8002aa8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	d001      	beq.n	8002aa8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e07d      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
      }
    }

    __HAL_LOCK(huart);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	2270      	movs	r2, #112	; 0x70
 8002aac:	5c9b      	ldrb	r3, [r3, r2]
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d101      	bne.n	8002ab6 <HAL_UART_Transmit+0x5a>
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	e076      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2270      	movs	r2, #112	; 0x70
 8002aba:	2101      	movs	r1, #1
 8002abc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2221      	movs	r2, #33	; 0x21
 8002ac8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8002aca:	f7fe f957 	bl	8000d7c <HAL_GetTick>
 8002ace:	0003      	movs	r3, r0
 8002ad0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	1dba      	adds	r2, r7, #6
 8002ad6:	2150      	movs	r1, #80	; 0x50
 8002ad8:	8812      	ldrh	r2, [r2, #0]
 8002ada:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	1dba      	adds	r2, r7, #6
 8002ae0:	2152      	movs	r1, #82	; 0x52
 8002ae2:	8812      	ldrh	r2, [r2, #0]
 8002ae4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689a      	ldr	r2, [r3, #8]
 8002aea:	2380      	movs	r3, #128	; 0x80
 8002aec:	015b      	lsls	r3, r3, #5
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d108      	bne.n	8002b04 <HAL_UART_Transmit+0xa8>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_UART_Transmit+0xa8>
    {
      pdata8bits  = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	e003      	b.n	8002b0c <HAL_UART_Transmit+0xb0>
    }
    else
    {
      pdata8bits  = pData;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002b0c:	e02d      	b.n	8002b6a <HAL_UART_Transmit+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b0e:	697a      	ldr	r2, [r7, #20]
 8002b10:	68f8      	ldr	r0, [r7, #12]
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	9300      	str	r3, [sp, #0]
 8002b16:	0013      	movs	r3, r2
 8002b18:	2200      	movs	r2, #0
 8002b1a:	2180      	movs	r1, #128	; 0x80
 8002b1c:	f000 fb0c 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8002b20:	1e03      	subs	r3, r0, #0
 8002b22:	d001      	beq.n	8002b28 <HAL_UART_Transmit+0xcc>
      {
        return HAL_TIMEOUT;
 8002b24:	2303      	movs	r3, #3
 8002b26:	e03d      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
      }
      if (pdata8bits == NULL)
 8002b28:	69fb      	ldr	r3, [r7, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d10b      	bne.n	8002b46 <HAL_UART_Transmit+0xea>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	881a      	ldrh	r2, [r3, #0]
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	05d2      	lsls	r2, r2, #23
 8002b38:	0dd2      	lsrs	r2, r2, #23
 8002b3a:	b292      	uxth	r2, r2
 8002b3c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	3302      	adds	r3, #2
 8002b42:	61bb      	str	r3, [r7, #24]
 8002b44:	e008      	b.n	8002b58 <HAL_UART_Transmit+0xfc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	781a      	ldrb	r2, [r3, #0]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	b292      	uxth	r2, r2
 8002b50:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b52:	69fb      	ldr	r3, [r7, #28]
 8002b54:	3301      	adds	r3, #1
 8002b56:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2252      	movs	r2, #82	; 0x52
 8002b5c:	5a9b      	ldrh	r3, [r3, r2]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	3b01      	subs	r3, #1
 8002b62:	b299      	uxth	r1, r3
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	2252      	movs	r2, #82	; 0x52
 8002b68:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	2252      	movs	r2, #82	; 0x52
 8002b6e:	5a9b      	ldrh	r3, [r3, r2]
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1cb      	bne.n	8002b0e <HAL_UART_Transmit+0xb2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b76:	697a      	ldr	r2, [r7, #20]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	9300      	str	r3, [sp, #0]
 8002b7e:	0013      	movs	r3, r2
 8002b80:	2200      	movs	r2, #0
 8002b82:	2140      	movs	r1, #64	; 0x40
 8002b84:	f000 fad8 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 8002b88:	1e03      	subs	r3, r0, #0
 8002b8a:	d001      	beq.n	8002b90 <HAL_UART_Transmit+0x134>
    {
      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e009      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	2220      	movs	r2, #32
 8002b94:	675a      	str	r2, [r3, #116]	; 0x74

    __HAL_UNLOCK(huart);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2270      	movs	r2, #112	; 0x70
 8002b9a:	2100      	movs	r1, #0
 8002b9c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_UART_Transmit+0x148>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	0018      	movs	r0, r3
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	b008      	add	sp, #32
 8002baa:	bd80      	pop	{r7, pc}

08002bac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b088      	sub	sp, #32
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb8:	2317      	movs	r3, #23
 8002bba:	18fb      	adds	r3, r7, r3
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	69db      	ldr	r3, [r3, #28]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4ac5      	ldr	r2, [pc, #788]	; (8002ef4 <UART_SetConfig+0x348>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	0019      	movs	r1, r3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	430a      	orrs	r2, r1
 8002bec:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	4ac0      	ldr	r2, [pc, #768]	; (8002ef8 <UART_SetConfig+0x34c>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	0019      	movs	r1, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68da      	ldr	r2, [r3, #12]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a1b      	ldr	r3, [r3, #32]
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	4ab7      	ldr	r2, [pc, #732]	; (8002efc <UART_SetConfig+0x350>)
 8002c1e:	4013      	ands	r3, r2
 8002c20:	0019      	movs	r1, r3
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	430a      	orrs	r2, r1
 8002c2a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4ab3      	ldr	r2, [pc, #716]	; (8002f00 <UART_SetConfig+0x354>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d125      	bne.n	8002c82 <UART_SetConfig+0xd6>
 8002c36:	4bb3      	ldr	r3, [pc, #716]	; (8002f04 <UART_SetConfig+0x358>)
 8002c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c3a:	2203      	movs	r2, #3
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b01      	cmp	r3, #1
 8002c40:	d00f      	beq.n	8002c62 <UART_SetConfig+0xb6>
 8002c42:	d304      	bcc.n	8002c4e <UART_SetConfig+0xa2>
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d011      	beq.n	8002c6c <UART_SetConfig+0xc0>
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d005      	beq.n	8002c58 <UART_SetConfig+0xac>
 8002c4c:	e013      	b.n	8002c76 <UART_SetConfig+0xca>
 8002c4e:	231f      	movs	r3, #31
 8002c50:	18fb      	adds	r3, r7, r3
 8002c52:	2200      	movs	r2, #0
 8002c54:	701a      	strb	r2, [r3, #0]
 8002c56:	e064      	b.n	8002d22 <UART_SetConfig+0x176>
 8002c58:	231f      	movs	r3, #31
 8002c5a:	18fb      	adds	r3, r7, r3
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	701a      	strb	r2, [r3, #0]
 8002c60:	e05f      	b.n	8002d22 <UART_SetConfig+0x176>
 8002c62:	231f      	movs	r3, #31
 8002c64:	18fb      	adds	r3, r7, r3
 8002c66:	2204      	movs	r2, #4
 8002c68:	701a      	strb	r2, [r3, #0]
 8002c6a:	e05a      	b.n	8002d22 <UART_SetConfig+0x176>
 8002c6c:	231f      	movs	r3, #31
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2208      	movs	r2, #8
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e055      	b.n	8002d22 <UART_SetConfig+0x176>
 8002c76:	231f      	movs	r3, #31
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	46c0      	nop			; (mov r8, r8)
 8002c80:	e04f      	b.n	8002d22 <UART_SetConfig+0x176>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4aa0      	ldr	r2, [pc, #640]	; (8002f08 <UART_SetConfig+0x35c>)
 8002c88:	4293      	cmp	r3, r2
 8002c8a:	d132      	bne.n	8002cf2 <UART_SetConfig+0x146>
 8002c8c:	4b9d      	ldr	r3, [pc, #628]	; (8002f04 <UART_SetConfig+0x358>)
 8002c8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c90:	23c0      	movs	r3, #192	; 0xc0
 8002c92:	029b      	lsls	r3, r3, #10
 8002c94:	4013      	ands	r3, r2
 8002c96:	2280      	movs	r2, #128	; 0x80
 8002c98:	0252      	lsls	r2, r2, #9
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d019      	beq.n	8002cd2 <UART_SetConfig+0x126>
 8002c9e:	2280      	movs	r2, #128	; 0x80
 8002ca0:	0252      	lsls	r2, r2, #9
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d802      	bhi.n	8002cac <UART_SetConfig+0x100>
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <UART_SetConfig+0x112>
 8002caa:	e01c      	b.n	8002ce6 <UART_SetConfig+0x13a>
 8002cac:	2280      	movs	r2, #128	; 0x80
 8002cae:	0292      	lsls	r2, r2, #10
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <UART_SetConfig+0x130>
 8002cb4:	22c0      	movs	r2, #192	; 0xc0
 8002cb6:	0292      	lsls	r2, r2, #10
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d005      	beq.n	8002cc8 <UART_SetConfig+0x11c>
 8002cbc:	e013      	b.n	8002ce6 <UART_SetConfig+0x13a>
 8002cbe:	231f      	movs	r3, #31
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
 8002cc6:	e02c      	b.n	8002d22 <UART_SetConfig+0x176>
 8002cc8:	231f      	movs	r3, #31
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2202      	movs	r2, #2
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e027      	b.n	8002d22 <UART_SetConfig+0x176>
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e022      	b.n	8002d22 <UART_SetConfig+0x176>
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2208      	movs	r2, #8
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e01d      	b.n	8002d22 <UART_SetConfig+0x176>
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2210      	movs	r2, #16
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	e017      	b.n	8002d22 <UART_SetConfig+0x176>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a85      	ldr	r2, [pc, #532]	; (8002f0c <UART_SetConfig+0x360>)
 8002cf8:	4293      	cmp	r3, r2
 8002cfa:	d104      	bne.n	8002d06 <UART_SetConfig+0x15a>
 8002cfc:	231f      	movs	r3, #31
 8002cfe:	18fb      	adds	r3, r7, r3
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
 8002d04:	e00d      	b.n	8002d22 <UART_SetConfig+0x176>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a81      	ldr	r2, [pc, #516]	; (8002f10 <UART_SetConfig+0x364>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d104      	bne.n	8002d1a <UART_SetConfig+0x16e>
 8002d10:	231f      	movs	r3, #31
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	2200      	movs	r2, #0
 8002d16:	701a      	strb	r2, [r3, #0]
 8002d18:	e003      	b.n	8002d22 <UART_SetConfig+0x176>
 8002d1a:	231f      	movs	r3, #31
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2210      	movs	r2, #16
 8002d20:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	2380      	movs	r3, #128	; 0x80
 8002d28:	021b      	lsls	r3, r3, #8
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d000      	beq.n	8002d30 <UART_SetConfig+0x184>
 8002d2e:	e07d      	b.n	8002e2c <UART_SetConfig+0x280>
  {
    switch (clocksource)
 8002d30:	231f      	movs	r3, #31
 8002d32:	18fb      	adds	r3, r7, r3
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d01c      	beq.n	8002d74 <UART_SetConfig+0x1c8>
 8002d3a:	dc02      	bgt.n	8002d42 <UART_SetConfig+0x196>
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <UART_SetConfig+0x1a0>
 8002d40:	e04b      	b.n	8002dda <UART_SetConfig+0x22e>
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d025      	beq.n	8002d92 <UART_SetConfig+0x1e6>
 8002d46:	2b08      	cmp	r3, #8
 8002d48:	d037      	beq.n	8002dba <UART_SetConfig+0x20e>
 8002d4a:	e046      	b.n	8002dda <UART_SetConfig+0x22e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d4c:	f7fe ff90 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8002d50:	0003      	movs	r3, r0
 8002d52:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	005a      	lsls	r2, r3, #1
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	085b      	lsrs	r3, r3, #1
 8002d5e:	18d2      	adds	r2, r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0019      	movs	r1, r3
 8002d66:	0010      	movs	r0, r2
 8002d68:	f7fd f9ce 	bl	8000108 <__udivsi3>
 8002d6c:	0003      	movs	r3, r0
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	61bb      	str	r3, [r7, #24]
        break;
 8002d72:	e037      	b.n	8002de4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	4a66      	ldr	r2, [pc, #408]	; (8002f14 <UART_SetConfig+0x368>)
 8002d7c:	189a      	adds	r2, r3, r2
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	0019      	movs	r1, r3
 8002d84:	0010      	movs	r0, r2
 8002d86:	f7fd f9bf 	bl	8000108 <__udivsi3>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	61bb      	str	r3, [r7, #24]
        break;
 8002d90:	e028      	b.n	8002de4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002d92:	f7fe fee5 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002d96:	0003      	movs	r3, r0
 8002d98:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	005a      	lsls	r2, r3, #1
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	085b      	lsrs	r3, r3, #1
 8002da4:	18d2      	adds	r2, r2, r3
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	0019      	movs	r1, r3
 8002dac:	0010      	movs	r0, r2
 8002dae:	f7fd f9ab 	bl	8000108 <__udivsi3>
 8002db2:	0003      	movs	r3, r0
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	61bb      	str	r3, [r7, #24]
        break;
 8002db8:	e014      	b.n	8002de4 <UART_SetConfig+0x238>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	2280      	movs	r2, #128	; 0x80
 8002dc2:	0252      	lsls	r2, r2, #9
 8002dc4:	189a      	adds	r2, r3, r2
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	685b      	ldr	r3, [r3, #4]
 8002dca:	0019      	movs	r1, r3
 8002dcc:	0010      	movs	r0, r2
 8002dce:	f7fd f99b 	bl	8000108 <__udivsi3>
 8002dd2:	0003      	movs	r3, r0
 8002dd4:	b29b      	uxth	r3, r3
 8002dd6:	61bb      	str	r3, [r7, #24]
        break;
 8002dd8:	e004      	b.n	8002de4 <UART_SetConfig+0x238>
      default:
        ret = HAL_ERROR;
 8002dda:	2317      	movs	r3, #23
 8002ddc:	18fb      	adds	r3, r7, r3
 8002dde:	2201      	movs	r2, #1
 8002de0:	701a      	strb	r2, [r3, #0]
        break;
 8002de2:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	2b0f      	cmp	r3, #15
 8002de8:	d91b      	bls.n	8002e22 <UART_SetConfig+0x276>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	4a4a      	ldr	r2, [pc, #296]	; (8002f18 <UART_SetConfig+0x36c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d817      	bhi.n	8002e22 <UART_SetConfig+0x276>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	b29a      	uxth	r2, r3
 8002df6:	200a      	movs	r0, #10
 8002df8:	183b      	adds	r3, r7, r0
 8002dfa:	210f      	movs	r1, #15
 8002dfc:	438a      	bics	r2, r1
 8002dfe:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e00:	69bb      	ldr	r3, [r7, #24]
 8002e02:	085b      	lsrs	r3, r3, #1
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2207      	movs	r2, #7
 8002e08:	4013      	ands	r3, r2
 8002e0a:	b299      	uxth	r1, r3
 8002e0c:	183b      	adds	r3, r7, r0
 8002e0e:	183a      	adds	r2, r7, r0
 8002e10:	8812      	ldrh	r2, [r2, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	183a      	adds	r2, r7, r0
 8002e1c:	8812      	ldrh	r2, [r2, #0]
 8002e1e:	60da      	str	r2, [r3, #12]
 8002e20:	e082      	b.n	8002f28 <UART_SetConfig+0x37c>
    }
    else
    {
      ret = HAL_ERROR;
 8002e22:	2317      	movs	r3, #23
 8002e24:	18fb      	adds	r3, r7, r3
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
 8002e2a:	e07d      	b.n	8002f28 <UART_SetConfig+0x37c>
    }
  }
  else
  {
    switch (clocksource)
 8002e2c:	231f      	movs	r3, #31
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d01b      	beq.n	8002e6e <UART_SetConfig+0x2c2>
 8002e36:	dc02      	bgt.n	8002e3e <UART_SetConfig+0x292>
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d005      	beq.n	8002e48 <UART_SetConfig+0x29c>
 8002e3c:	e049      	b.n	8002ed2 <UART_SetConfig+0x326>
 8002e3e:	2b04      	cmp	r3, #4
 8002e40:	d024      	beq.n	8002e8c <UART_SetConfig+0x2e0>
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	d035      	beq.n	8002eb2 <UART_SetConfig+0x306>
 8002e46:	e044      	b.n	8002ed2 <UART_SetConfig+0x326>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e48:	f7fe ff12 	bl	8001c70 <HAL_RCC_GetPCLK1Freq>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	085a      	lsrs	r2, r3, #1
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	18d2      	adds	r2, r2, r3
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	0019      	movs	r1, r3
 8002e60:	0010      	movs	r0, r2
 8002e62:	f7fd f951 	bl	8000108 <__udivsi3>
 8002e66:	0003      	movs	r3, r0
 8002e68:	b29b      	uxth	r3, r3
 8002e6a:	61bb      	str	r3, [r7, #24]
        break;
 8002e6c:	e036      	b.n	8002edc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	085b      	lsrs	r3, r3, #1
 8002e74:	4a29      	ldr	r2, [pc, #164]	; (8002f1c <UART_SetConfig+0x370>)
 8002e76:	189a      	adds	r2, r3, r2
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	0019      	movs	r1, r3
 8002e7e:	0010      	movs	r0, r2
 8002e80:	f7fd f942 	bl	8000108 <__udivsi3>
 8002e84:	0003      	movs	r3, r0
 8002e86:	b29b      	uxth	r3, r3
 8002e88:	61bb      	str	r3, [r7, #24]
        break;
 8002e8a:	e027      	b.n	8002edc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e8c:	f7fe fe68 	bl	8001b60 <HAL_RCC_GetSysClockFreq>
 8002e90:	0003      	movs	r3, r0
 8002e92:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	085a      	lsrs	r2, r3, #1
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	18d2      	adds	r2, r2, r3
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	0010      	movs	r0, r2
 8002ea6:	f7fd f92f 	bl	8000108 <__udivsi3>
 8002eaa:	0003      	movs	r3, r0
 8002eac:	b29b      	uxth	r3, r3
 8002eae:	61bb      	str	r3, [r7, #24]
        break;
 8002eb0:	e014      	b.n	8002edc <UART_SetConfig+0x330>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	085b      	lsrs	r3, r3, #1
 8002eb8:	2280      	movs	r2, #128	; 0x80
 8002eba:	0212      	lsls	r2, r2, #8
 8002ebc:	189a      	adds	r2, r3, r2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	0019      	movs	r1, r3
 8002ec4:	0010      	movs	r0, r2
 8002ec6:	f7fd f91f 	bl	8000108 <__udivsi3>
 8002eca:	0003      	movs	r3, r0
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	61bb      	str	r3, [r7, #24]
        break;
 8002ed0:	e004      	b.n	8002edc <UART_SetConfig+0x330>
      default:
        ret = HAL_ERROR;
 8002ed2:	2317      	movs	r3, #23
 8002ed4:	18fb      	adds	r3, r7, r3
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	701a      	strb	r2, [r3, #0]
        break;
 8002eda:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002edc:	69bb      	ldr	r3, [r7, #24]
 8002ede:	2b0f      	cmp	r3, #15
 8002ee0:	d91e      	bls.n	8002f20 <UART_SetConfig+0x374>
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	4a0c      	ldr	r2, [pc, #48]	; (8002f18 <UART_SetConfig+0x36c>)
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	d81a      	bhi.n	8002f20 <UART_SetConfig+0x374>
    {
      huart->Instance->BRR = usartdiv;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69ba      	ldr	r2, [r7, #24]
 8002ef0:	60da      	str	r2, [r3, #12]
 8002ef2:	e019      	b.n	8002f28 <UART_SetConfig+0x37c>
 8002ef4:	efff69f3 	.word	0xefff69f3
 8002ef8:	ffffcfff 	.word	0xffffcfff
 8002efc:	fffff4ff 	.word	0xfffff4ff
 8002f00:	40013800 	.word	0x40013800
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40004400 	.word	0x40004400
 8002f0c:	40004800 	.word	0x40004800
 8002f10:	40004c00 	.word	0x40004c00
 8002f14:	00f42400 	.word	0x00f42400
 8002f18:	0000ffff 	.word	0x0000ffff
 8002f1c:	007a1200 	.word	0x007a1200
    }
    else
    {
      ret = HAL_ERROR;
 8002f20:	2317      	movs	r3, #23
 8002f22:	18fb      	adds	r3, r7, r3
 8002f24:	2201      	movs	r2, #1
 8002f26:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2200      	movs	r2, #0
 8002f32:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8002f34:	2317      	movs	r3, #23
 8002f36:	18fb      	adds	r3, r7, r3
 8002f38:	781b      	ldrb	r3, [r3, #0]
}
 8002f3a:	0018      	movs	r0, r3
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	b008      	add	sp, #32
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	46c0      	nop			; (mov r8, r8)

08002f44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f50:	2201      	movs	r2, #1
 8002f52:	4013      	ands	r3, r2
 8002f54:	d00b      	beq.n	8002f6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4a4a      	ldr	r2, [pc, #296]	; (8003088 <UART_AdvFeatureConfig+0x144>)
 8002f5e:	4013      	ands	r3, r2
 8002f60:	0019      	movs	r1, r3
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f72:	2202      	movs	r2, #2
 8002f74:	4013      	ands	r3, r2
 8002f76:	d00b      	beq.n	8002f90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a43      	ldr	r2, [pc, #268]	; (800308c <UART_AdvFeatureConfig+0x148>)
 8002f80:	4013      	ands	r3, r2
 8002f82:	0019      	movs	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f94:	2204      	movs	r2, #4
 8002f96:	4013      	ands	r3, r2
 8002f98:	d00b      	beq.n	8002fb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a3b      	ldr	r2, [pc, #236]	; (8003090 <UART_AdvFeatureConfig+0x14c>)
 8002fa2:	4013      	ands	r3, r2
 8002fa4:	0019      	movs	r1, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	430a      	orrs	r2, r1
 8002fb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb6:	2208      	movs	r2, #8
 8002fb8:	4013      	ands	r3, r2
 8002fba:	d00b      	beq.n	8002fd4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	4a34      	ldr	r2, [pc, #208]	; (8003094 <UART_AdvFeatureConfig+0x150>)
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	0019      	movs	r1, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	430a      	orrs	r2, r1
 8002fd2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd8:	2210      	movs	r2, #16
 8002fda:	4013      	ands	r3, r2
 8002fdc:	d00b      	beq.n	8002ff6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	4a2c      	ldr	r2, [pc, #176]	; (8003098 <UART_AdvFeatureConfig+0x154>)
 8002fe6:	4013      	ands	r3, r2
 8002fe8:	0019      	movs	r1, r3
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	d00b      	beq.n	8003018 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	689b      	ldr	r3, [r3, #8]
 8003006:	4a25      	ldr	r2, [pc, #148]	; (800309c <UART_AdvFeatureConfig+0x158>)
 8003008:	4013      	ands	r3, r2
 800300a:	0019      	movs	r1, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301c:	2240      	movs	r2, #64	; 0x40
 800301e:	4013      	ands	r3, r2
 8003020:	d01d      	beq.n	800305e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	4a1d      	ldr	r2, [pc, #116]	; (80030a0 <UART_AdvFeatureConfig+0x15c>)
 800302a:	4013      	ands	r3, r2
 800302c:	0019      	movs	r1, r3
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	430a      	orrs	r2, r1
 8003038:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800303e:	2380      	movs	r3, #128	; 0x80
 8003040:	035b      	lsls	r3, r3, #13
 8003042:	429a      	cmp	r2, r3
 8003044:	d10b      	bne.n	800305e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	4a15      	ldr	r2, [pc, #84]	; (80030a4 <UART_AdvFeatureConfig+0x160>)
 800304e:	4013      	ands	r3, r2
 8003050:	0019      	movs	r1, r3
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003062:	2280      	movs	r2, #128	; 0x80
 8003064:	4013      	ands	r3, r2
 8003066:	d00b      	beq.n	8003080 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	4a0e      	ldr	r2, [pc, #56]	; (80030a8 <UART_AdvFeatureConfig+0x164>)
 8003070:	4013      	ands	r3, r2
 8003072:	0019      	movs	r1, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	430a      	orrs	r2, r1
 800307e:	605a      	str	r2, [r3, #4]
  }
}
 8003080:	46c0      	nop			; (mov r8, r8)
 8003082:	46bd      	mov	sp, r7
 8003084:	b002      	add	sp, #8
 8003086:	bd80      	pop	{r7, pc}
 8003088:	fffdffff 	.word	0xfffdffff
 800308c:	fffeffff 	.word	0xfffeffff
 8003090:	fffbffff 	.word	0xfffbffff
 8003094:	ffff7fff 	.word	0xffff7fff
 8003098:	ffffefff 	.word	0xffffefff
 800309c:	ffffdfff 	.word	0xffffdfff
 80030a0:	ffefffff 	.word	0xffefffff
 80030a4:	ff9fffff 	.word	0xff9fffff
 80030a8:	fff7ffff 	.word	0xfff7ffff

080030ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b086      	sub	sp, #24
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2200      	movs	r2, #0
 80030b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80030ba:	f7fd fe5f 	bl	8000d7c <HAL_GetTick>
 80030be:	0003      	movs	r3, r0
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2208      	movs	r2, #8
 80030ca:	4013      	ands	r3, r2
 80030cc:	2b08      	cmp	r3, #8
 80030ce:	d10d      	bne.n	80030ec <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	2380      	movs	r3, #128	; 0x80
 80030d4:	0399      	lsls	r1, r3, #14
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	4b16      	ldr	r3, [pc, #88]	; (8003134 <UART_CheckIdleState+0x88>)
 80030da:	9300      	str	r3, [sp, #0]
 80030dc:	0013      	movs	r3, r2
 80030de:	2200      	movs	r2, #0
 80030e0:	f000 f82a 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 80030e4:	1e03      	subs	r3, r0, #0
 80030e6:	d001      	beq.n	80030ec <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e01f      	b.n	800312c <UART_CheckIdleState+0x80>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2204      	movs	r2, #4
 80030f4:	4013      	ands	r3, r2
 80030f6:	2b04      	cmp	r3, #4
 80030f8:	d10d      	bne.n	8003116 <UART_CheckIdleState+0x6a>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80030fa:	68fa      	ldr	r2, [r7, #12]
 80030fc:	2380      	movs	r3, #128	; 0x80
 80030fe:	03d9      	lsls	r1, r3, #15
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	4b0c      	ldr	r3, [pc, #48]	; (8003134 <UART_CheckIdleState+0x88>)
 8003104:	9300      	str	r3, [sp, #0]
 8003106:	0013      	movs	r3, r2
 8003108:	2200      	movs	r2, #0
 800310a:	f000 f815 	bl	8003138 <UART_WaitOnFlagUntilTimeout>
 800310e:	1e03      	subs	r3, r0, #0
 8003110:	d001      	beq.n	8003116 <UART_CheckIdleState+0x6a>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e00a      	b.n	800312c <UART_CheckIdleState+0x80>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2220      	movs	r2, #32
 800311a:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2220      	movs	r2, #32
 8003120:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2270      	movs	r2, #112	; 0x70
 8003126:	2100      	movs	r1, #0
 8003128:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800312a:	2300      	movs	r3, #0
}
 800312c:	0018      	movs	r0, r3
 800312e:	46bd      	mov	sp, r7
 8003130:	b004      	add	sp, #16
 8003132:	bd80      	pop	{r7, pc}
 8003134:	01ffffff 	.word	0x01ffffff

08003138 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	603b      	str	r3, [r7, #0]
 8003144:	1dfb      	adds	r3, r7, #7
 8003146:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003148:	e05d      	b.n	8003206 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	3301      	adds	r3, #1
 800314e:	d05a      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003150:	f7fd fe14 	bl	8000d7c <HAL_GetTick>
 8003154:	0002      	movs	r2, r0
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	429a      	cmp	r2, r3
 800315e:	d302      	bcc.n	8003166 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d11b      	bne.n	800319e <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	492f      	ldr	r1, [pc, #188]	; (8003230 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8003172:	400a      	ands	r2, r1
 8003174:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689a      	ldr	r2, [r3, #8]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2101      	movs	r1, #1
 8003182:	438a      	bics	r2, r1
 8003184:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	2220      	movs	r2, #32
 800318a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	2220      	movs	r2, #32
 8003190:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	2270      	movs	r2, #112	; 0x70
 8003196:	2100      	movs	r1, #0
 8003198:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e043      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2204      	movs	r2, #4
 80031a6:	4013      	ands	r3, r2
 80031a8:	d02d      	beq.n	8003206 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	69da      	ldr	r2, [r3, #28]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	401a      	ands	r2, r3
 80031b6:	2380      	movs	r3, #128	; 0x80
 80031b8:	011b      	lsls	r3, r3, #4
 80031ba:	429a      	cmp	r2, r3
 80031bc:	d123      	bne.n	8003206 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	2280      	movs	r2, #128	; 0x80
 80031c4:	0112      	lsls	r2, r2, #4
 80031c6:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4917      	ldr	r1, [pc, #92]	; (8003230 <UART_WaitOnFlagUntilTimeout+0xf8>)
 80031d4:	400a      	ands	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	689a      	ldr	r2, [r3, #8]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2101      	movs	r1, #1
 80031e4:	438a      	bics	r2, r1
 80031e6:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2220      	movs	r2, #32
 80031f2:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	2270      	movs	r2, #112	; 0x70
 80031fe:	2100      	movs	r1, #0
 8003200:	5499      	strb	r1, [r3, r2]
          
          return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e00f      	b.n	8003226 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	4013      	ands	r3, r2
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	425a      	negs	r2, r3
 8003216:	4153      	adcs	r3, r2
 8003218:	b2db      	uxtb	r3, r3
 800321a:	001a      	movs	r2, r3
 800321c:	1dfb      	adds	r3, r7, #7
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d092      	beq.n	800314a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003224:	2300      	movs	r3, #0
}
 8003226:	0018      	movs	r0, r3
 8003228:	46bd      	mov	sp, r7
 800322a:	b004      	add	sp, #16
 800322c:	bd80      	pop	{r7, pc}
 800322e:	46c0      	nop			; (mov r8, r8)
 8003230:	fffffe5f 	.word	0xfffffe5f

08003234 <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
 800323c:	000a      	movs	r2, r1
 800323e:	1cfb      	adds	r3, r7, #3
 8003240:	701a      	strb	r2, [r3, #0]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	1cfb      	adds	r3, r7, #3
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	0019      	movs	r1, r3
 800324c:	0010      	movs	r0, r2
 800324e:	f000 fc7b 	bl	8003b48 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	250f      	movs	r5, #15
 8003258:	197c      	adds	r4, r7, r5
 800325a:	0018      	movs	r0, r3
 800325c:	f000 fc95 	bl	8003b8a <SX1278_hw_SPIReadByte>
 8003260:	0003      	movs	r3, r0
 8003262:	7023      	strb	r3, [r4, #0]
	SX1278_hw_SetNSS(module->hw, 1);
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2101      	movs	r1, #1
 800326a:	0018      	movs	r0, r3
 800326c:	f000 fc31 	bl	8003ad2 <SX1278_hw_SetNSS>
	return tmp;
 8003270:	197b      	adds	r3, r7, r5
 8003272:	781b      	ldrb	r3, [r3, #0]
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bdb0      	pop	{r4, r5, r7, pc}

0800327c <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	0008      	movs	r0, r1
 8003286:	0011      	movs	r1, r2
 8003288:	1cfb      	adds	r3, r7, #3
 800328a:	1c02      	adds	r2, r0, #0
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	1cbb      	adds	r3, r7, #2
 8003290:	1c0a      	adds	r2, r1, #0
 8003292:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(module->hw, 0);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	2100      	movs	r1, #0
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fc19 	bl	8003ad2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6818      	ldr	r0, [r3, #0]
 80032a4:	1cfb      	adds	r3, r7, #3
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2280      	movs	r2, #128	; 0x80
 80032aa:	4252      	negs	r2, r2
 80032ac:	4313      	orrs	r3, r2
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	0019      	movs	r1, r3
 80032b2:	f000 fc49 	bl	8003b48 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	1cbb      	adds	r3, r7, #2
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	0019      	movs	r1, r3
 80032c0:	0010      	movs	r0, r2
 80032c2:	f000 fc41 	bl	8003b48 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2101      	movs	r1, #1
 80032cc:	0018      	movs	r0, r3
 80032ce:	f000 fc00 	bl	8003ad2 <SX1278_hw_SetNSS>
}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	46bd      	mov	sp, r7
 80032d6:	b002      	add	sp, #8
 80032d8:	bd80      	pop	{r7, pc}

080032da <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 80032da:	b5b0      	push	{r4, r5, r7, lr}
 80032dc:	b086      	sub	sp, #24
 80032de:	af00      	add	r7, sp, #0
 80032e0:	60f8      	str	r0, [r7, #12]
 80032e2:	0008      	movs	r0, r1
 80032e4:	607a      	str	r2, [r7, #4]
 80032e6:	0019      	movs	r1, r3
 80032e8:	230b      	movs	r3, #11
 80032ea:	18fb      	adds	r3, r7, r3
 80032ec:	1c02      	adds	r2, r0, #0
 80032ee:	701a      	strb	r2, [r3, #0]
 80032f0:	200a      	movs	r0, #10
 80032f2:	183b      	adds	r3, r7, r0
 80032f4:	1c0a      	adds	r2, r1, #0
 80032f6:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	if (length <= 1) {
 80032f8:	183b      	adds	r3, r7, r0
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b01      	cmp	r3, #1
 80032fe:	d933      	bls.n	8003368 <SX1278_SPIBurstRead+0x8e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2100      	movs	r1, #0
 8003306:	0018      	movs	r0, r3
 8003308:	f000 fbe3 	bl	8003ad2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	230b      	movs	r3, #11
 8003312:	18fb      	adds	r3, r7, r3
 8003314:	781b      	ldrb	r3, [r3, #0]
 8003316:	0019      	movs	r1, r3
 8003318:	0010      	movs	r0, r2
 800331a:	f000 fc15 	bl	8003b48 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 800331e:	2317      	movs	r3, #23
 8003320:	18fb      	adds	r3, r7, r3
 8003322:	2200      	movs	r2, #0
 8003324:	701a      	strb	r2, [r3, #0]
 8003326:	e010      	b.n	800334a <SX1278_SPIBurstRead+0x70>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	6819      	ldr	r1, [r3, #0]
 800332c:	2517      	movs	r5, #23
 800332e:	197b      	adds	r3, r7, r5
 8003330:	781b      	ldrb	r3, [r3, #0]
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	18d4      	adds	r4, r2, r3
 8003336:	0008      	movs	r0, r1
 8003338:	f000 fc27 	bl	8003b8a <SX1278_hw_SPIReadByte>
 800333c:	0003      	movs	r3, r0
 800333e:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 8003340:	197b      	adds	r3, r7, r5
 8003342:	781a      	ldrb	r2, [r3, #0]
 8003344:	197b      	adds	r3, r7, r5
 8003346:	3201      	adds	r2, #1
 8003348:	701a      	strb	r2, [r3, #0]
 800334a:	2317      	movs	r3, #23
 800334c:	18fa      	adds	r2, r7, r3
 800334e:	230a      	movs	r3, #10
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	7812      	ldrb	r2, [r2, #0]
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	429a      	cmp	r2, r3
 8003358:	d3e6      	bcc.n	8003328 <SX1278_SPIBurstRead+0x4e>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2101      	movs	r1, #1
 8003360:	0018      	movs	r0, r3
 8003362:	f000 fbb6 	bl	8003ad2 <SX1278_hw_SetNSS>
 8003366:	e000      	b.n	800336a <SX1278_SPIBurstRead+0x90>
		return;
 8003368:	46c0      	nop			; (mov r8, r8)
	}
}
 800336a:	46bd      	mov	sp, r7
 800336c:	b006      	add	sp, #24
 800336e:	bdb0      	pop	{r4, r5, r7, pc}

08003370 <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 8003370:	b590      	push	{r4, r7, lr}
 8003372:	b087      	sub	sp, #28
 8003374:	af00      	add	r7, sp, #0
 8003376:	60f8      	str	r0, [r7, #12]
 8003378:	0008      	movs	r0, r1
 800337a:	607a      	str	r2, [r7, #4]
 800337c:	0019      	movs	r1, r3
 800337e:	230b      	movs	r3, #11
 8003380:	18fb      	adds	r3, r7, r3
 8003382:	1c02      	adds	r2, r0, #0
 8003384:	701a      	strb	r2, [r3, #0]
 8003386:	200a      	movs	r0, #10
 8003388:	183b      	adds	r3, r7, r0
 800338a:	1c0a      	adds	r2, r1, #0
 800338c:	701a      	strb	r2, [r3, #0]
	unsigned char i;
	if (length <= 1) {
 800338e:	183b      	adds	r3, r7, r0
 8003390:	781b      	ldrb	r3, [r3, #0]
 8003392:	2b01      	cmp	r3, #1
 8003394:	d935      	bls.n	8003402 <SX1278_SPIBurstWrite+0x92>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	2100      	movs	r1, #0
 800339c:	0018      	movs	r0, r3
 800339e:	f000 fb98 	bl	8003ad2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	230b      	movs	r3, #11
 80033a8:	18fb      	adds	r3, r7, r3
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	2280      	movs	r2, #128	; 0x80
 80033ae:	4252      	negs	r2, r2
 80033b0:	4313      	orrs	r3, r2
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	0019      	movs	r1, r3
 80033b6:	f000 fbc7 	bl	8003b48 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80033ba:	2317      	movs	r3, #23
 80033bc:	18fb      	adds	r3, r7, r3
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
 80033c2:	e00f      	b.n	80033e4 <SX1278_SPIBurstWrite+0x74>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6818      	ldr	r0, [r3, #0]
 80033c8:	2417      	movs	r4, #23
 80033ca:	193b      	adds	r3, r7, r4
 80033cc:	781b      	ldrb	r3, [r3, #0]
 80033ce:	687a      	ldr	r2, [r7, #4]
 80033d0:	18d3      	adds	r3, r2, r3
 80033d2:	781b      	ldrb	r3, [r3, #0]
 80033d4:	0019      	movs	r1, r3
 80033d6:	f000 fbb7 	bl	8003b48 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80033da:	193b      	adds	r3, r7, r4
 80033dc:	781a      	ldrb	r2, [r3, #0]
 80033de:	193b      	adds	r3, r7, r4
 80033e0:	3201      	adds	r2, #1
 80033e2:	701a      	strb	r2, [r3, #0]
 80033e4:	2317      	movs	r3, #23
 80033e6:	18fa      	adds	r2, r7, r3
 80033e8:	230a      	movs	r3, #10
 80033ea:	18fb      	adds	r3, r7, r3
 80033ec:	7812      	ldrb	r2, [r2, #0]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d3e7      	bcc.n	80033c4 <SX1278_SPIBurstWrite+0x54>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2101      	movs	r1, #1
 80033fa:	0018      	movs	r0, r3
 80033fc:	f000 fb69 	bl	8003ad2 <SX1278_hw_SetNSS>
 8003400:	e000      	b.n	8003404 <SX1278_SPIBurstWrite+0x94>
		return;
 8003402:	46c0      	nop			; (mov r8, r8)
	}
}
 8003404:	46bd      	mov	sp, r7
 8003406:	b007      	add	sp, #28
 8003408:	bd90      	pop	{r4, r7, pc}
	...

0800340c <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 800340c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800340e:	b08b      	sub	sp, #44	; 0x2c
 8003410:	af00      	add	r7, sp, #0
 8003412:	6178      	str	r0, [r7, #20]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	0018      	movs	r0, r3
 8003418:	f000 f937 	bl	800368a <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 800341c:	200f      	movs	r0, #15
 800341e:	f000 fbdf 	bl	8003be0 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	0018      	movs	r0, r3
 8003426:	f000 f941 	bl	80036ac <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800342a:	697b      	ldr	r3, [r7, #20]
 800342c:	68dc      	ldr	r4, [r3, #12]
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	0b5a      	lsrs	r2, r3, #13
 8003432:	04e1      	lsls	r1, r4, #19
 8003434:	60f9      	str	r1, [r7, #12]
 8003436:	68f9      	ldr	r1, [r7, #12]
 8003438:	4311      	orrs	r1, r2
 800343a:	60f9      	str	r1, [r7, #12]
 800343c:	04db      	lsls	r3, r3, #19
 800343e:	60bb      	str	r3, [r7, #8]
 8003440:	4a83      	ldr	r2, [pc, #524]	; (8003650 <SX1278_config+0x244>)
 8003442:	2300      	movs	r3, #0
 8003444:	68b8      	ldr	r0, [r7, #8]
 8003446:	68f9      	ldr	r1, [r7, #12]
 8003448:	f7fc feea 	bl	8000220 <__aeabi_uldivmod>
 800344c:	0003      	movs	r3, r0
 800344e:	000c      	movs	r4, r1
 8003450:	623b      	str	r3, [r7, #32]
 8003452:	627c      	str	r4, [r7, #36]	; 0x24
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8003454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	6a3a      	ldr	r2, [r7, #32]
 800345a:	0c12      	lsrs	r2, r2, #16
 800345c:	603a      	str	r2, [r7, #0]
 800345e:	683a      	ldr	r2, [r7, #0]
 8003460:	431a      	orrs	r2, r3
 8003462:	603a      	str	r2, [r7, #0]
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	607b      	str	r3, [r7, #4]
 800346a:	783a      	ldrb	r2, [r7, #0]
 800346c:	210c      	movs	r1, #12
 800346e:	2010      	movs	r0, #16
 8003470:	183b      	adds	r3, r7, r0
 8003472:	185b      	adds	r3, r3, r1
 8003474:	701a      	strb	r2, [r3, #0]
	freq_reg[1] = (uint8_t) (freq >> 8);
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	061b      	lsls	r3, r3, #24
 800347a:	6a3a      	ldr	r2, [r7, #32]
 800347c:	0a15      	lsrs	r5, r2, #8
 800347e:	431d      	orrs	r5, r3
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	0a1e      	lsrs	r6, r3, #8
 8003484:	b2ea      	uxtb	r2, r5
 8003486:	183b      	adds	r3, r7, r0
 8003488:	185b      	adds	r3, r3, r1
 800348a:	705a      	strb	r2, [r3, #1]
	freq_reg[2] = (uint8_t) (freq >> 0);
 800348c:	6a3b      	ldr	r3, [r7, #32]
 800348e:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8003490:	b2da      	uxtb	r2, r3
 8003492:	183b      	adds	r3, r7, r0
 8003494:	185b      	adds	r3, r3, r1
 8003496:	709a      	strb	r2, [r3, #2]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 8003498:	183b      	adds	r3, r7, r0
 800349a:	185a      	adds	r2, r3, r1
 800349c:	6978      	ldr	r0, [r7, #20]
 800349e:	2303      	movs	r3, #3
 80034a0:	2106      	movs	r1, #6
 80034a2:	f7ff ff65 	bl	8003370 <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2234      	movs	r2, #52	; 0x34
 80034aa:	2139      	movs	r1, #57	; 0x39
 80034ac:	0018      	movs	r0, r3
 80034ae:	f7ff fee5 	bl	800327c <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	7c1b      	ldrb	r3, [r3, #16]
 80034b6:	001a      	movs	r2, r3
 80034b8:	4b66      	ldr	r3, [pc, #408]	; (8003654 <SX1278_config+0x248>)
 80034ba:	5c9a      	ldrb	r2, [r3, r2]
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	2109      	movs	r1, #9
 80034c0:	0018      	movs	r0, r3
 80034c2:	f7ff fedb 	bl	800327c <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	220b      	movs	r2, #11
 80034ca:	210b      	movs	r1, #11
 80034cc:	0018      	movs	r0, r3
 80034ce:	f7ff fed5 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2223      	movs	r2, #35	; 0x23
 80034d6:	210c      	movs	r1, #12
 80034d8:	0018      	movs	r0, r3
 80034da:	f7ff fecf 	bl	800327c <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 80034de:	697b      	ldr	r3, [r7, #20]
 80034e0:	7c5b      	ldrb	r3, [r3, #17]
 80034e2:	001a      	movs	r2, r3
 80034e4:	4b5c      	ldr	r3, [pc, #368]	; (8003658 <SX1278_config+0x24c>)
 80034e6:	5c9b      	ldrb	r3, [r3, r2]
 80034e8:	2b06      	cmp	r3, #6
 80034ea:	d15b      	bne.n	80035a4 <SX1278_config+0x198>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80034ec:	697b      	ldr	r3, [r7, #20]
 80034ee:	7c9b      	ldrb	r3, [r3, #18]
 80034f0:	001a      	movs	r2, r3
 80034f2:	4b5a      	ldr	r3, [pc, #360]	; (800365c <SX1278_config+0x250>)
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	011b      	lsls	r3, r3, #4
 80034f8:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	7cdb      	ldrb	r3, [r3, #19]
 80034fe:	0019      	movs	r1, r3
 8003500:	4b57      	ldr	r3, [pc, #348]	; (8003660 <SX1278_config+0x254>)
 8003502:	5c5b      	ldrb	r3, [r3, r1]
 8003504:	18db      	adds	r3, r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	18d3      	adds	r3, r2, r3
 800350a:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800350c:	3301      	adds	r3, #1
 800350e:	b2da      	uxtb	r2, r3
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	211d      	movs	r1, #29
 8003514:	0018      	movs	r0, r3
 8003516:	f7ff feb1 	bl	800327c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	7c5b      	ldrb	r3, [r3, #17]
 800351e:	001a      	movs	r2, r3
 8003520:	4b4d      	ldr	r3, [pc, #308]	; (8003658 <SX1278_config+0x24c>)
 8003522:	5c9b      	ldrb	r3, [r3, r2]
 8003524:	011b      	lsls	r3, r3, #4
 8003526:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	7d1b      	ldrb	r3, [r3, #20]
 800352c:	0019      	movs	r1, r3
 800352e:	4b4d      	ldr	r3, [pc, #308]	; (8003664 <SX1278_config+0x258>)
 8003530:	5c5b      	ldrb	r3, [r3, r1]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	b2db      	uxtb	r3, r3
 8003536:	18d3      	adds	r3, r2, r3
 8003538:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800353a:	3303      	adds	r3, #3
 800353c:	b2da      	uxtb	r2, r3
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	211e      	movs	r1, #30
 8003542:	0018      	movs	r0, r3
 8003544:	f7ff fe9a 	bl	800327c <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8003548:	200f      	movs	r0, #15
 800354a:	0005      	movs	r5, r0
 800354c:	2410      	movs	r4, #16
 800354e:	0026      	movs	r6, r4
 8003550:	193b      	adds	r3, r7, r4
 8003552:	181c      	adds	r4, r3, r0
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	2131      	movs	r1, #49	; 0x31
 8003558:	0018      	movs	r0, r3
 800355a:	f7ff fe6b 	bl	8003234 <SX1278_SPIRead>
 800355e:	0003      	movs	r3, r0
 8003560:	7023      	strb	r3, [r4, #0]
		tmp &= 0xF8;
 8003562:	0028      	movs	r0, r5
 8003564:	0034      	movs	r4, r6
 8003566:	193b      	adds	r3, r7, r4
 8003568:	181b      	adds	r3, r3, r0
 800356a:	193a      	adds	r2, r7, r4
 800356c:	1812      	adds	r2, r2, r0
 800356e:	7812      	ldrb	r2, [r2, #0]
 8003570:	2107      	movs	r1, #7
 8003572:	438a      	bics	r2, r1
 8003574:	701a      	strb	r2, [r3, #0]
		tmp |= 0x05;
 8003576:	193b      	adds	r3, r7, r4
 8003578:	181b      	adds	r3, r3, r0
 800357a:	193a      	adds	r2, r7, r4
 800357c:	1812      	adds	r2, r2, r0
 800357e:	7812      	ldrb	r2, [r2, #0]
 8003580:	2105      	movs	r1, #5
 8003582:	430a      	orrs	r2, r1
 8003584:	701a      	strb	r2, [r3, #0]
		SX1278_SPIWrite(module, 0x31, tmp);
 8003586:	193b      	adds	r3, r7, r4
 8003588:	181b      	adds	r3, r3, r0
 800358a:	781a      	ldrb	r2, [r3, #0]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	2131      	movs	r1, #49	; 0x31
 8003590:	0018      	movs	r0, r3
 8003592:	f7ff fe73 	bl	800327c <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	220c      	movs	r2, #12
 800359a:	2137      	movs	r1, #55	; 0x37
 800359c:	0018      	movs	r0, r3
 800359e:	f7ff fe6d 	bl	800327c <SX1278_SPIWrite>
 80035a2:	e029      	b.n	80035f8 <SX1278_config+0x1ec>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	7c9b      	ldrb	r3, [r3, #18]
 80035a8:	001a      	movs	r2, r3
 80035aa:	4b2c      	ldr	r3, [pc, #176]	; (800365c <SX1278_config+0x250>)
 80035ac:	5c9b      	ldrb	r3, [r3, r2]
 80035ae:	011b      	lsls	r3, r3, #4
 80035b0:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	7cdb      	ldrb	r3, [r3, #19]
 80035b6:	0019      	movs	r1, r3
 80035b8:	4b29      	ldr	r3, [pc, #164]	; (8003660 <SX1278_config+0x254>)
 80035ba:	5c5b      	ldrb	r3, [r3, r1]
 80035bc:	18db      	adds	r3, r3, r3
 80035be:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80035c0:	18d3      	adds	r3, r2, r3
 80035c2:	b2da      	uxtb	r2, r3
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	211d      	movs	r1, #29
 80035c8:	0018      	movs	r0, r3
 80035ca:	f7ff fe57 	bl	800327c <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	7c5b      	ldrb	r3, [r3, #17]
 80035d2:	001a      	movs	r2, r3
 80035d4:	4b20      	ldr	r3, [pc, #128]	; (8003658 <SX1278_config+0x24c>)
 80035d6:	5c9b      	ldrb	r3, [r3, r2]
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	7d1b      	ldrb	r3, [r3, #20]
 80035e0:	0019      	movs	r1, r3
 80035e2:	4b20      	ldr	r3, [pc, #128]	; (8003664 <SX1278_config+0x258>)
 80035e4:	5c5b      	ldrb	r3, [r3, r1]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80035ea:	18d3      	adds	r3, r2, r3
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	211e      	movs	r1, #30
 80035f2:	0018      	movs	r0, r3
 80035f4:	f7ff fe42 	bl	800327c <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	2204      	movs	r2, #4
 80035fc:	2126      	movs	r1, #38	; 0x26
 80035fe:	0018      	movs	r0, r3
 8003600:	f7ff fe3c 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	2208      	movs	r2, #8
 8003608:	211f      	movs	r1, #31
 800360a:	0018      	movs	r0, r3
 800360c:	f7ff fe36 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	2200      	movs	r2, #0
 8003614:	2120      	movs	r1, #32
 8003616:	0018      	movs	r0, r3
 8003618:	f7ff fe30 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	2208      	movs	r2, #8
 8003620:	2121      	movs	r1, #33	; 0x21
 8003622:	0018      	movs	r0, r3
 8003624:	f7ff fe2a 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2201      	movs	r2, #1
 800362c:	2141      	movs	r1, #65	; 0x41
 800362e:	0018      	movs	r0, r3
 8003630:	f7ff fe24 	bl	800327c <SX1278_SPIWrite>
	module->readBytes = 0;
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	2318      	movs	r3, #24
 8003638:	33ff      	adds	r3, #255	; 0xff
 800363a:	2100      	movs	r1, #0
 800363c:	54d1      	strb	r1, [r2, r3]
	SX1278_standby(module); //Entry standby mode
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 f811 	bl	8003668 <SX1278_standby>
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b00b      	add	sp, #44	; 0x2c
 800364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800364e:	46c0      	nop			; (mov r8, r8)
 8003650:	01e84800 	.word	0x01e84800
 8003654:	0800507c 	.word	0x0800507c
 8003658:	08005080 	.word	0x08005080
 800365c:	08005088 	.word	0x08005088
 8003660:	08005094 	.word	0x08005094
 8003664:	08005098 	.word	0x08005098

08003668 <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b082      	sub	sp, #8
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2209      	movs	r2, #9
 8003674:	2101      	movs	r1, #1
 8003676:	0018      	movs	r0, r3
 8003678:	f7ff fe00 	bl	800327c <SX1278_SPIWrite>
	module->status = STANDBY;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	759a      	strb	r2, [r3, #22]
}
 8003682:	46c0      	nop			; (mov r8, r8)
 8003684:	46bd      	mov	sp, r7
 8003686:	b002      	add	sp, #8
 8003688:	bd80      	pop	{r7, pc}

0800368a <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800368a:	b580      	push	{r7, lr}
 800368c:	b082      	sub	sp, #8
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2208      	movs	r2, #8
 8003696:	2101      	movs	r1, #1
 8003698:	0018      	movs	r0, r3
 800369a:	f7ff fdef 	bl	800327c <SX1278_SPIWrite>
	module->status = SLEEP;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	759a      	strb	r2, [r3, #22]
}
 80036a4:	46c0      	nop			; (mov r8, r8)
 80036a6:	46bd      	mov	sp, r7
 80036a8:	b002      	add	sp, #8
 80036aa:	bd80      	pop	{r7, pc}

080036ac <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b082      	sub	sp, #8
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2288      	movs	r2, #136	; 0x88
 80036b8:	2101      	movs	r1, #1
 80036ba:	0018      	movs	r0, r3
 80036bc:	f7ff fdde 	bl	800327c <SX1278_SPIWrite>
}
 80036c0:	46c0      	nop			; (mov r8, r8)
 80036c2:	46bd      	mov	sp, r7
 80036c4:	b002      	add	sp, #8
 80036c6:	bd80      	pop	{r7, pc}

080036c8 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	22ff      	movs	r2, #255	; 0xff
 80036d4:	2112      	movs	r1, #18
 80036d6:	0018      	movs	r0, r3
 80036d8:	f7ff fdd0 	bl	800327c <SX1278_SPIWrite>
}
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	46bd      	mov	sp, r7
 80036e0:	b002      	add	sp, #8
 80036e2:	bd80      	pop	{r7, pc}

080036e4 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80036e4:	b5b0      	push	{r4, r5, r7, lr}
 80036e6:	b086      	sub	sp, #24
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	60f8      	str	r0, [r7, #12]
 80036ec:	607a      	str	r2, [r7, #4]
 80036ee:	240b      	movs	r4, #11
 80036f0:	193b      	adds	r3, r7, r4
 80036f2:	1c0a      	adds	r2, r1, #0
 80036f4:	701a      	strb	r2, [r3, #0]
	uint8_t addr;

	module->packetLength = length;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	193a      	adds	r2, r7, r4
 80036fa:	7812      	ldrb	r2, [r2, #0]
 80036fc:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	0018      	movs	r0, r3
 8003702:	f7ff fe83 	bl	800340c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2284      	movs	r2, #132	; 0x84
 800370a:	214d      	movs	r1, #77	; 0x4d
 800370c:	0018      	movs	r0, r3
 800370e:	f7ff fdb5 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	2124      	movs	r1, #36	; 0x24
 8003718:	0018      	movs	r0, r3
 800371a:	f7ff fdaf 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2201      	movs	r2, #1
 8003722:	2140      	movs	r1, #64	; 0x40
 8003724:	0018      	movs	r0, r3
 8003726:	f7ff fda9 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	223f      	movs	r2, #63	; 0x3f
 800372e:	2111      	movs	r1, #17
 8003730:	0018      	movs	r0, r3
 8003732:	f7ff fda3 	bl	800327c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	0018      	movs	r0, r3
 800373a:	f7ff ffc5 	bl	80036c8 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 800373e:	193b      	adds	r3, r7, r4
 8003740:	781a      	ldrb	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	2122      	movs	r1, #34	; 0x22
 8003746:	0018      	movs	r0, r3
 8003748:	f7ff fd98 	bl	800327c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 800374c:	2517      	movs	r5, #23
 800374e:	197c      	adds	r4, r7, r5
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	210f      	movs	r1, #15
 8003754:	0018      	movs	r0, r3
 8003756:	f7ff fd6d 	bl	8003234 <SX1278_SPIRead>
 800375a:	0003      	movs	r3, r0
 800375c:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 800375e:	197b      	adds	r3, r7, r5
 8003760:	781a      	ldrb	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	210d      	movs	r1, #13
 8003766:	0018      	movs	r0, r3
 8003768:	f7ff fd88 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	228d      	movs	r2, #141	; 0x8d
 8003770:	2101      	movs	r1, #1
 8003772:	0018      	movs	r0, r3
 8003774:	f7ff fd82 	bl	800327c <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8003778:	68fa      	ldr	r2, [r7, #12]
 800377a:	2318      	movs	r3, #24
 800377c:	33ff      	adds	r3, #255	; 0xff
 800377e:	2100      	movs	r1, #0
 8003780:	54d1      	strb	r1, [r2, r3]

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2118      	movs	r1, #24
 8003786:	0018      	movs	r0, r3
 8003788:	f7ff fd54 	bl	8003234 <SX1278_SPIRead>
 800378c:	0003      	movs	r3, r0
 800378e:	001a      	movs	r2, r3
 8003790:	2304      	movs	r3, #4
 8003792:	4013      	ands	r3, r2
 8003794:	2b04      	cmp	r3, #4
 8003796:	d104      	bne.n	80037a2 <SX1278_LoRaEntryRx+0xbe>
			module->status = RX;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2203      	movs	r2, #3
 800379c:	759a      	strb	r2, [r3, #22]
			return 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	e014      	b.n	80037cc <SX1278_LoRaEntryRx+0xe8>
		}
		if (--timeout == 0) {
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	3b01      	subs	r3, #1
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <SX1278_LoRaEntryRx+0xe0>
			SX1278_hw_Reset(module->hw);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	0018      	movs	r0, r3
 80037b4:	f000 f9a3 	bl	8003afe <SX1278_hw_Reset>
			SX1278_config(module);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	0018      	movs	r0, r3
 80037bc:	f7ff fe26 	bl	800340c <SX1278_config>
			return 0;
 80037c0:	2300      	movs	r3, #0
 80037c2:	e003      	b.n	80037cc <SX1278_LoRaEntryRx+0xe8>
		}
		SX1278_hw_DelayMs(1);
 80037c4:	2001      	movs	r0, #1
 80037c6:	f000 fa0b 	bl	8003be0 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 80037ca:	e7da      	b.n	8003782 <SX1278_LoRaEntryRx+0x9e>
	}
}
 80037cc:	0018      	movs	r0, r3
 80037ce:	46bd      	mov	sp, r7
 80037d0:	b006      	add	sp, #24
 80037d2:	bdb0      	pop	{r4, r5, r7, pc}

080037d4 <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 80037d4:	b5b0      	push	{r4, r5, r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	0018      	movs	r0, r3
 80037e2:	f000 fa09 	bl	8003bf8 <SX1278_hw_GetDIO0>
 80037e6:	1e03      	subs	r3, r0, #0
 80037e8:	d03f      	beq.n	800386a <SX1278_LoRaRxPacket+0x96>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	3317      	adds	r3, #23
 80037ee:	0018      	movs	r0, r3
 80037f0:	2380      	movs	r3, #128	; 0x80
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	001a      	movs	r2, r3
 80037f6:	2100      	movs	r1, #0
 80037f8:	f000 fa47 	bl	8003c8a <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 80037fc:	250e      	movs	r5, #14
 80037fe:	197c      	adds	r4, r7, r5
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2110      	movs	r1, #16
 8003804:	0018      	movs	r0, r3
 8003806:	f7ff fd15 	bl	8003234 <SX1278_SPIRead>
 800380a:	0003      	movs	r3, r0
 800380c:	7023      	strb	r3, [r4, #0]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 800380e:	197b      	adds	r3, r7, r5
 8003810:	781a      	ldrb	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	210d      	movs	r1, #13
 8003816:	0018      	movs	r0, r3
 8003818:	f7ff fd30 	bl	800327c <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	7c5b      	ldrb	r3, [r3, #17]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d105      	bne.n	8003830 <SX1278_LoRaRxPacket+0x5c>
			packet_size = module->packetLength;
 8003824:	230f      	movs	r3, #15
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	687a      	ldr	r2, [r7, #4]
 800382a:	7d52      	ldrb	r2, [r2, #21]
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e008      	b.n	8003842 <SX1278_LoRaRxPacket+0x6e>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8003830:	230f      	movs	r3, #15
 8003832:	18fc      	adds	r4, r7, r3
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2113      	movs	r1, #19
 8003838:	0018      	movs	r0, r3
 800383a:	f7ff fcfb 	bl	8003234 <SX1278_SPIRead>
 800383e:	0003      	movs	r3, r0
 8003840:	7023      	strb	r3, [r4, #0]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	3317      	adds	r3, #23
 8003846:	001a      	movs	r2, r3
 8003848:	240f      	movs	r4, #15
 800384a:	193b      	adds	r3, r7, r4
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	6878      	ldr	r0, [r7, #4]
 8003850:	2100      	movs	r1, #0
 8003852:	f7ff fd42 	bl	80032da <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	1939      	adds	r1, r7, r4
 800385a:	2318      	movs	r3, #24
 800385c:	33ff      	adds	r3, #255	; 0xff
 800385e:	7809      	ldrb	r1, [r1, #0]
 8003860:	54d1      	strb	r1, [r2, r3]
		SX1278_clearLoRaIrq(module);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	0018      	movs	r0, r3
 8003866:	f7ff ff2f 	bl	80036c8 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	2318      	movs	r3, #24
 800386e:	33ff      	adds	r3, #255	; 0xff
 8003870:	5cd3      	ldrb	r3, [r2, r3]
}
 8003872:	0018      	movs	r0, r3
 8003874:	46bd      	mov	sp, r7
 8003876:	b004      	add	sp, #16
 8003878:	bdb0      	pop	{r4, r5, r7, pc}

0800387a <SX1278_LoRaEntryTx>:

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 800387a:	b5b0      	push	{r4, r5, r7, lr}
 800387c:	b086      	sub	sp, #24
 800387e:	af00      	add	r7, sp, #0
 8003880:	60f8      	str	r0, [r7, #12]
 8003882:	607a      	str	r2, [r7, #4]
 8003884:	240b      	movs	r4, #11
 8003886:	193b      	adds	r3, r7, r4
 8003888:	1c0a      	adds	r2, r1, #0
 800388a:	701a      	strb	r2, [r3, #0]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	193a      	adds	r2, r7, r4
 8003890:	7812      	ldrb	r2, [r2, #0]
 8003892:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff fdb8 	bl	800340c <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2287      	movs	r2, #135	; 0x87
 80038a0:	214d      	movs	r1, #77	; 0x4d
 80038a2:	0018      	movs	r0, r3
 80038a4:	f7ff fcea 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	2124      	movs	r1, #36	; 0x24
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7ff fce4 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2241      	movs	r2, #65	; 0x41
 80038b8:	2140      	movs	r1, #64	; 0x40
 80038ba:	0018      	movs	r0, r3
 80038bc:	f7ff fcde 	bl	800327c <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	0018      	movs	r0, r3
 80038c4:	f7ff ff00 	bl	80036c8 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	22f7      	movs	r2, #247	; 0xf7
 80038cc:	2111      	movs	r1, #17
 80038ce:	0018      	movs	r0, r3
 80038d0:	f7ff fcd4 	bl	800327c <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80038d4:	193b      	adds	r3, r7, r4
 80038d6:	781a      	ldrb	r2, [r3, #0]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2122      	movs	r1, #34	; 0x22
 80038dc:	0018      	movs	r0, r3
 80038de:	f7ff fccd 	bl	800327c <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80038e2:	2517      	movs	r5, #23
 80038e4:	197c      	adds	r4, r7, r5
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	210e      	movs	r1, #14
 80038ea:	0018      	movs	r0, r3
 80038ec:	f7ff fca2 	bl	8003234 <SX1278_SPIRead>
 80038f0:	0003      	movs	r3, r0
 80038f2:	7023      	strb	r3, [r4, #0]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80038f4:	197b      	adds	r3, r7, r5
 80038f6:	781a      	ldrb	r2, [r3, #0]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	210d      	movs	r1, #13
 80038fc:	0018      	movs	r0, r3
 80038fe:	f7ff fcbd 	bl	800327c <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 8003902:	2516      	movs	r5, #22
 8003904:	197c      	adds	r4, r7, r5
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2122      	movs	r1, #34	; 0x22
 800390a:	0018      	movs	r0, r3
 800390c:	f7ff fc92 	bl	8003234 <SX1278_SPIRead>
 8003910:	0003      	movs	r3, r0
 8003912:	7023      	strb	r3, [r4, #0]
		if (temp == length) {
 8003914:	197a      	adds	r2, r7, r5
 8003916:	230b      	movs	r3, #11
 8003918:	18fb      	adds	r3, r7, r3
 800391a:	7812      	ldrb	r2, [r2, #0]
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d104      	bne.n	800392c <SX1278_LoRaEntryTx+0xb2>
			module->status = TX;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2202      	movs	r2, #2
 8003926:	759a      	strb	r2, [r3, #22]
			return 1;
 8003928:	2301      	movs	r3, #1
 800392a:	e00f      	b.n	800394c <SX1278_LoRaEntryTx+0xd2>
		}

		if (--timeout == 0) {
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3b01      	subs	r3, #1
 8003930:	607b      	str	r3, [r7, #4]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d1e4      	bne.n	8003902 <SX1278_LoRaEntryTx+0x88>
			SX1278_hw_Reset(module->hw);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	0018      	movs	r0, r3
 800393e:	f000 f8de 	bl	8003afe <SX1278_hw_Reset>
			SX1278_config(module);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	0018      	movs	r0, r3
 8003946:	f7ff fd61 	bl	800340c <SX1278_config>
			return 0;
 800394a:	2300      	movs	r3, #0
		}
	}
}
 800394c:	0018      	movs	r0, r3
 800394e:	46bd      	mov	sp, r7
 8003950:	b006      	add	sp, #24
 8003952:	bdb0      	pop	{r4, r5, r7, pc}

08003954 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	1dfb      	adds	r3, r7, #7
 8003962:	701a      	strb	r2, [r3, #0]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8003964:	1dfb      	adds	r3, r7, #7
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	68ba      	ldr	r2, [r7, #8]
 800396a:	68f8      	ldr	r0, [r7, #12]
 800396c:	2100      	movs	r1, #0
 800396e:	f7ff fcff 	bl	8003370 <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	228b      	movs	r2, #139	; 0x8b
 8003976:	2101      	movs	r1, #1
 8003978:	0018      	movs	r0, r3
 800397a:	f7ff fc7f 	bl	800327c <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	0018      	movs	r0, r3
 8003984:	f000 f938 	bl	8003bf8 <SX1278_hw_GetDIO0>
 8003988:	1e03      	subs	r3, r0, #0
 800398a:	d00e      	beq.n	80039aa <SX1278_LoRaTxPacket+0x56>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2112      	movs	r1, #18
 8003990:	0018      	movs	r0, r3
 8003992:	f7ff fc4f 	bl	8003234 <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	0018      	movs	r0, r3
 800399a:	f7ff fe95 	bl	80036c8 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	0018      	movs	r0, r3
 80039a2:	f7ff fe61 	bl	8003668 <SX1278_standby>
			return 1;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e014      	b.n	80039d4 <SX1278_LoRaTxPacket+0x80>
		}

		if (--timeout == 0) {
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	3b01      	subs	r3, #1
 80039ae:	603b      	str	r3, [r7, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d10a      	bne.n	80039cc <SX1278_LoRaTxPacket+0x78>
			SX1278_hw_Reset(module->hw);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 f89f 	bl	8003afe <SX1278_hw_Reset>
			SX1278_config(module);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	0018      	movs	r0, r3
 80039c4:	f7ff fd22 	bl	800340c <SX1278_config>
			return 0;
 80039c8:	2300      	movs	r3, #0
 80039ca:	e003      	b.n	80039d4 <SX1278_LoRaTxPacket+0x80>
		}
		SX1278_hw_DelayMs(1);
 80039cc:	2001      	movs	r0, #1
 80039ce:	f000 f907 	bl	8003be0 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 80039d2:	e7d4      	b.n	800397e <SX1278_LoRaTxPacket+0x2a>
	}
}
 80039d4:	0018      	movs	r0, r3
 80039d6:	46bd      	mov	sp, r7
 80039d8:	b004      	add	sp, #16
 80039da:	bd80      	pop	{r7, pc}

080039dc <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 80039dc:	b590      	push	{r4, r7, lr}
 80039de:	b085      	sub	sp, #20
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	603a      	str	r2, [r7, #0]
 80039e6:	607b      	str	r3, [r7, #4]
	SX1278_hw_init(module->hw);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	0018      	movs	r0, r3
 80039ee:	f000 f85a 	bl	8003aa6 <SX1278_hw_init>
	module->frequency = frequency;
 80039f2:	68fa      	ldr	r2, [r7, #12]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	687c      	ldr	r4, [r7, #4]
 80039f8:	6093      	str	r3, [r2, #8]
 80039fa:	60d4      	str	r4, [r2, #12]
	module->power = power;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	18ba      	adds	r2, r7, r2
 8003a02:	7812      	ldrb	r2, [r2, #0]
 8003a04:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2224      	movs	r2, #36	; 0x24
 8003a0a:	18ba      	adds	r2, r7, r2
 8003a0c:	7812      	ldrb	r2, [r2, #0]
 8003a0e:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2228      	movs	r2, #40	; 0x28
 8003a14:	18ba      	adds	r2, r7, r2
 8003a16:	7812      	ldrb	r2, [r2, #0]
 8003a18:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	222c      	movs	r2, #44	; 0x2c
 8003a1e:	18ba      	adds	r2, r7, r2
 8003a20:	7812      	ldrb	r2, [r2, #0]
 8003a22:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2230      	movs	r2, #48	; 0x30
 8003a28:	18ba      	adds	r2, r7, r2
 8003a2a:	7812      	ldrb	r2, [r2, #0]
 8003a2c:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2234      	movs	r2, #52	; 0x34
 8003a32:	18ba      	adds	r2, r7, r2
 8003a34:	7812      	ldrb	r2, [r2, #0]
 8003a36:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	0018      	movs	r0, r3
 8003a3c:	f7ff fce6 	bl	800340c <SX1278_config>
}
 8003a40:	46c0      	nop			; (mov r8, r8)
 8003a42:	46bd      	mov	sp, r7
 8003a44:	b005      	add	sp, #20
 8003a46:	bd90      	pop	{r4, r7, pc}

08003a48 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b084      	sub	sp, #16
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	60f8      	str	r0, [r7, #12]
 8003a50:	60b9      	str	r1, [r7, #8]
 8003a52:	1dfb      	adds	r3, r7, #7
 8003a54:	701a      	strb	r2, [r3, #0]
	if (length != module->readBytes)
 8003a56:	68fa      	ldr	r2, [r7, #12]
 8003a58:	2318      	movs	r3, #24
 8003a5a:	33ff      	adds	r3, #255	; 0xff
 8003a5c:	5cd3      	ldrb	r3, [r2, r3]
 8003a5e:	1dfa      	adds	r2, r7, #7
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d005      	beq.n	8003a72 <SX1278_read+0x2a>
		length = module->readBytes;
 8003a66:	1dfb      	adds	r3, r7, #7
 8003a68:	68f9      	ldr	r1, [r7, #12]
 8003a6a:	2218      	movs	r2, #24
 8003a6c:	32ff      	adds	r2, #255	; 0xff
 8003a6e:	5c8a      	ldrb	r2, [r1, r2]
 8003a70:	701a      	strb	r2, [r3, #0]
	memcpy(rxBuf, module->rxBuffer, length);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	3317      	adds	r3, #23
 8003a76:	0019      	movs	r1, r3
 8003a78:	1dfb      	adds	r3, r7, #7
 8003a7a:	781a      	ldrb	r2, [r3, #0]
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	0018      	movs	r0, r3
 8003a80:	f000 f8fa 	bl	8003c78 <memcpy>
	rxBuf[length] = '\0';
 8003a84:	1dfb      	adds	r3, r7, #7
 8003a86:	781b      	ldrb	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	18d3      	adds	r3, r2, r3
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8003a90:	68fa      	ldr	r2, [r7, #12]
 8003a92:	2318      	movs	r3, #24
 8003a94:	33ff      	adds	r3, #255	; 0xff
 8003a96:	2100      	movs	r1, #0
 8003a98:	54d1      	strb	r1, [r2, r3]
	return length;
 8003a9a:	1dfb      	adds	r3, r7, #7
 8003a9c:	781b      	ldrb	r3, [r3, #0]
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b004      	add	sp, #16
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8003aa6:	b580      	push	{r7, lr}
 8003aa8:	b082      	sub	sp, #8
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2101      	movs	r1, #1
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f000 f80d 	bl	8003ad2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6858      	ldr	r0, [r3, #4]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	b29b      	uxth	r3, r3
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	f7fd fbce 	bl	8001266 <HAL_GPIO_WritePin>
}
 8003aca:	46c0      	nop			; (mov r8, r8)
 8003acc:	46bd      	mov	sp, r7
 8003ace:	b002      	add	sp, #8
 8003ad0:	bd80      	pop	{r7, pc}

08003ad2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8003ad2:	b580      	push	{r7, lr}
 8003ad4:	b082      	sub	sp, #8
 8003ad6:	af00      	add	r7, sp, #0
 8003ad8:	6078      	str	r0, [r7, #4]
 8003ada:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6958      	ldr	r0, [r3, #20]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	b299      	uxth	r1, r3
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	3b01      	subs	r3, #1
 8003aea:	425a      	negs	r2, r3
 8003aec:	4153      	adcs	r3, r2
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	001a      	movs	r2, r3
 8003af2:	f7fd fbb8 	bl	8001266 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	46bd      	mov	sp, r7
 8003afa:	b002      	add	sp, #8
 8003afc:	bd80      	pop	{r7, pc}

08003afe <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8003afe:	b580      	push	{r7, lr}
 8003b00:	b082      	sub	sp, #8
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2101      	movs	r1, #1
 8003b0a:	0018      	movs	r0, r3
 8003b0c:	f7ff ffe1 	bl	8003ad2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6858      	ldr	r0, [r3, #4]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	b29b      	uxth	r3, r3
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	0019      	movs	r1, r3
 8003b1e:	f7fd fba2 	bl	8001266 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8003b22:	2001      	movs	r0, #1
 8003b24:	f000 f85c 	bl	8003be0 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6858      	ldr	r0, [r3, #4]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	2201      	movs	r2, #1
 8003b34:	0019      	movs	r1, r3
 8003b36:	f7fd fb96 	bl	8001266 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8003b3a:	2064      	movs	r0, #100	; 0x64
 8003b3c:	f000 f850 	bl	8003be0 <SX1278_hw_DelayMs>
}
 8003b40:	46c0      	nop			; (mov r8, r8)
 8003b42:	46bd      	mov	sp, r7
 8003b44:	b002      	add	sp, #8
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b082      	sub	sp, #8
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	000a      	movs	r2, r1
 8003b52:	1cfb      	adds	r3, r7, #3
 8003b54:	701a      	strb	r2, [r3, #0]
	SX1278_hw_SetNSS(hw, 0);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2100      	movs	r1, #0
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f7ff ffb9 	bl	8003ad2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6998      	ldr	r0, [r3, #24]
 8003b64:	23fa      	movs	r3, #250	; 0xfa
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	1cf9      	adds	r1, r7, #3
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f7fe fa30 	bl	8001fd0 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	0018      	movs	r0, r3
 8003b78:	f7fe fde6 	bl	8002748 <HAL_SPI_GetState>
 8003b7c:	0003      	movs	r3, r0
 8003b7e:	2b01      	cmp	r3, #1
 8003b80:	d1f7      	bne.n	8003b72 <SX1278_hw_SPICommand+0x2a>
		;
}
 8003b82:	46c0      	nop			; (mov r8, r8)
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}

08003b8a <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8003b8a:	b5b0      	push	{r4, r5, r7, lr}
 8003b8c:	b086      	sub	sp, #24
 8003b8e:	af02      	add	r7, sp, #8
 8003b90:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8003b92:	240f      	movs	r4, #15
 8003b94:	193b      	adds	r3, r7, r4
 8003b96:	2200      	movs	r2, #0
 8003b98:	701a      	strb	r2, [r3, #0]
	uint8_t rxByte = 0x00;
 8003b9a:	250e      	movs	r5, #14
 8003b9c:	197b      	adds	r3, r7, r5
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	701a      	strb	r2, [r3, #0]

	SX1278_hw_SetNSS(hw, 0);
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2100      	movs	r1, #0
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f7ff ff93 	bl	8003ad2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6998      	ldr	r0, [r3, #24]
 8003bb0:	197a      	adds	r2, r7, r5
 8003bb2:	1939      	adds	r1, r7, r4
 8003bb4:	23fa      	movs	r3, #250	; 0xfa
 8003bb6:	009b      	lsls	r3, r3, #2
 8003bb8:	9300      	str	r3, [sp, #0]
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f7fe fb8a 	bl	80022d4 <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8003bc0:	46c0      	nop			; (mov r8, r8)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	699b      	ldr	r3, [r3, #24]
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f7fe fdbe 	bl	8002748 <HAL_SPI_GetState>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d1f7      	bne.n	8003bc2 <SX1278_hw_SPIReadByte+0x38>
		;
	return rxByte;
 8003bd2:	230e      	movs	r3, #14
 8003bd4:	18fb      	adds	r3, r7, r3
 8003bd6:	781b      	ldrb	r3, [r3, #0]
}
 8003bd8:	0018      	movs	r0, r3
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	b004      	add	sp, #16
 8003bde:	bdb0      	pop	{r4, r5, r7, pc}

08003be0 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	0018      	movs	r0, r3
 8003bec:	f7fd f8d0 	bl	8000d90 <HAL_Delay>
}
 8003bf0:	46c0      	nop			; (mov r8, r8)
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	b002      	add	sp, #8
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68da      	ldr	r2, [r3, #12]
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	689b      	ldr	r3, [r3, #8]
 8003c08:	b29b      	uxth	r3, r3
 8003c0a:	0019      	movs	r1, r3
 8003c0c:	0010      	movs	r0, r2
 8003c0e:	f7fd fb0d 	bl	800122c <HAL_GPIO_ReadPin>
 8003c12:	0003      	movs	r3, r0
 8003c14:	3b01      	subs	r3, #1
 8003c16:	425a      	negs	r2, r3
 8003c18:	4153      	adcs	r3, r2
 8003c1a:	b2db      	uxtb	r3, r3
}
 8003c1c:	0018      	movs	r0, r3
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	b002      	add	sp, #8
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <__errno>:
 8003c24:	4b01      	ldr	r3, [pc, #4]	; (8003c2c <__errno+0x8>)
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	4770      	bx	lr
 8003c2a:	46c0      	nop			; (mov r8, r8)
 8003c2c:	2000000c 	.word	0x2000000c

08003c30 <__libc_init_array>:
 8003c30:	b570      	push	{r4, r5, r6, lr}
 8003c32:	2600      	movs	r6, #0
 8003c34:	4d0c      	ldr	r5, [pc, #48]	; (8003c68 <__libc_init_array+0x38>)
 8003c36:	4c0d      	ldr	r4, [pc, #52]	; (8003c6c <__libc_init_array+0x3c>)
 8003c38:	1b64      	subs	r4, r4, r5
 8003c3a:	10a4      	asrs	r4, r4, #2
 8003c3c:	42a6      	cmp	r6, r4
 8003c3e:	d109      	bne.n	8003c54 <__libc_init_array+0x24>
 8003c40:	2600      	movs	r6, #0
 8003c42:	f001 f96d 	bl	8004f20 <_init>
 8003c46:	4d0a      	ldr	r5, [pc, #40]	; (8003c70 <__libc_init_array+0x40>)
 8003c48:	4c0a      	ldr	r4, [pc, #40]	; (8003c74 <__libc_init_array+0x44>)
 8003c4a:	1b64      	subs	r4, r4, r5
 8003c4c:	10a4      	asrs	r4, r4, #2
 8003c4e:	42a6      	cmp	r6, r4
 8003c50:	d105      	bne.n	8003c5e <__libc_init_array+0x2e>
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	00b3      	lsls	r3, r6, #2
 8003c56:	58eb      	ldr	r3, [r5, r3]
 8003c58:	4798      	blx	r3
 8003c5a:	3601      	adds	r6, #1
 8003c5c:	e7ee      	b.n	8003c3c <__libc_init_array+0xc>
 8003c5e:	00b3      	lsls	r3, r6, #2
 8003c60:	58eb      	ldr	r3, [r5, r3]
 8003c62:	4798      	blx	r3
 8003c64:	3601      	adds	r6, #1
 8003c66:	e7f2      	b.n	8003c4e <__libc_init_array+0x1e>
 8003c68:	0800513c 	.word	0x0800513c
 8003c6c:	0800513c 	.word	0x0800513c
 8003c70:	0800513c 	.word	0x0800513c
 8003c74:	08005140 	.word	0x08005140

08003c78 <memcpy>:
 8003c78:	2300      	movs	r3, #0
 8003c7a:	b510      	push	{r4, lr}
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d100      	bne.n	8003c82 <memcpy+0xa>
 8003c80:	bd10      	pop	{r4, pc}
 8003c82:	5ccc      	ldrb	r4, [r1, r3]
 8003c84:	54c4      	strb	r4, [r0, r3]
 8003c86:	3301      	adds	r3, #1
 8003c88:	e7f8      	b.n	8003c7c <memcpy+0x4>

08003c8a <memset>:
 8003c8a:	0003      	movs	r3, r0
 8003c8c:	1812      	adds	r2, r2, r0
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d100      	bne.n	8003c94 <memset+0xa>
 8003c92:	4770      	bx	lr
 8003c94:	7019      	strb	r1, [r3, #0]
 8003c96:	3301      	adds	r3, #1
 8003c98:	e7f9      	b.n	8003c8e <memset+0x4>
	...

08003c9c <iprintf>:
 8003c9c:	b40f      	push	{r0, r1, r2, r3}
 8003c9e:	4b0b      	ldr	r3, [pc, #44]	; (8003ccc <iprintf+0x30>)
 8003ca0:	b513      	push	{r0, r1, r4, lr}
 8003ca2:	681c      	ldr	r4, [r3, #0]
 8003ca4:	2c00      	cmp	r4, #0
 8003ca6:	d005      	beq.n	8003cb4 <iprintf+0x18>
 8003ca8:	69a3      	ldr	r3, [r4, #24]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d102      	bne.n	8003cb4 <iprintf+0x18>
 8003cae:	0020      	movs	r0, r4
 8003cb0:	f000 fa5c 	bl	800416c <__sinit>
 8003cb4:	ab05      	add	r3, sp, #20
 8003cb6:	9a04      	ldr	r2, [sp, #16]
 8003cb8:	68a1      	ldr	r1, [r4, #8]
 8003cba:	0020      	movs	r0, r4
 8003cbc:	9301      	str	r3, [sp, #4]
 8003cbe:	f000 fd85 	bl	80047cc <_vfiprintf_r>
 8003cc2:	bc16      	pop	{r1, r2, r4}
 8003cc4:	bc08      	pop	{r3}
 8003cc6:	b004      	add	sp, #16
 8003cc8:	4718      	bx	r3
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	2000000c 	.word	0x2000000c

08003cd0 <_puts_r>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	0005      	movs	r5, r0
 8003cd4:	000e      	movs	r6, r1
 8003cd6:	2800      	cmp	r0, #0
 8003cd8:	d004      	beq.n	8003ce4 <_puts_r+0x14>
 8003cda:	6983      	ldr	r3, [r0, #24]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d101      	bne.n	8003ce4 <_puts_r+0x14>
 8003ce0:	f000 fa44 	bl	800416c <__sinit>
 8003ce4:	69ab      	ldr	r3, [r5, #24]
 8003ce6:	68ac      	ldr	r4, [r5, #8]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <_puts_r+0x22>
 8003cec:	0028      	movs	r0, r5
 8003cee:	f000 fa3d 	bl	800416c <__sinit>
 8003cf2:	4b24      	ldr	r3, [pc, #144]	; (8003d84 <_puts_r+0xb4>)
 8003cf4:	429c      	cmp	r4, r3
 8003cf6:	d10f      	bne.n	8003d18 <_puts_r+0x48>
 8003cf8:	686c      	ldr	r4, [r5, #4]
 8003cfa:	89a3      	ldrh	r3, [r4, #12]
 8003cfc:	071b      	lsls	r3, r3, #28
 8003cfe:	d502      	bpl.n	8003d06 <_puts_r+0x36>
 8003d00:	6923      	ldr	r3, [r4, #16]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d11f      	bne.n	8003d46 <_puts_r+0x76>
 8003d06:	0021      	movs	r1, r4
 8003d08:	0028      	movs	r0, r5
 8003d0a:	f000 f8c1 	bl	8003e90 <__swsetup_r>
 8003d0e:	2800      	cmp	r0, #0
 8003d10:	d019      	beq.n	8003d46 <_puts_r+0x76>
 8003d12:	2001      	movs	r0, #1
 8003d14:	4240      	negs	r0, r0
 8003d16:	bd70      	pop	{r4, r5, r6, pc}
 8003d18:	4b1b      	ldr	r3, [pc, #108]	; (8003d88 <_puts_r+0xb8>)
 8003d1a:	429c      	cmp	r4, r3
 8003d1c:	d101      	bne.n	8003d22 <_puts_r+0x52>
 8003d1e:	68ac      	ldr	r4, [r5, #8]
 8003d20:	e7eb      	b.n	8003cfa <_puts_r+0x2a>
 8003d22:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <_puts_r+0xbc>)
 8003d24:	429c      	cmp	r4, r3
 8003d26:	d1e8      	bne.n	8003cfa <_puts_r+0x2a>
 8003d28:	68ec      	ldr	r4, [r5, #12]
 8003d2a:	e7e6      	b.n	8003cfa <_puts_r+0x2a>
 8003d2c:	3601      	adds	r6, #1
 8003d2e:	60a3      	str	r3, [r4, #8]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	da04      	bge.n	8003d3e <_puts_r+0x6e>
 8003d34:	69a2      	ldr	r2, [r4, #24]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	dc16      	bgt.n	8003d68 <_puts_r+0x98>
 8003d3a:	290a      	cmp	r1, #10
 8003d3c:	d014      	beq.n	8003d68 <_puts_r+0x98>
 8003d3e:	6823      	ldr	r3, [r4, #0]
 8003d40:	1c5a      	adds	r2, r3, #1
 8003d42:	6022      	str	r2, [r4, #0]
 8003d44:	7019      	strb	r1, [r3, #0]
 8003d46:	68a3      	ldr	r3, [r4, #8]
 8003d48:	7831      	ldrb	r1, [r6, #0]
 8003d4a:	3b01      	subs	r3, #1
 8003d4c:	2900      	cmp	r1, #0
 8003d4e:	d1ed      	bne.n	8003d2c <_puts_r+0x5c>
 8003d50:	60a3      	str	r3, [r4, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	da0f      	bge.n	8003d76 <_puts_r+0xa6>
 8003d56:	0022      	movs	r2, r4
 8003d58:	310a      	adds	r1, #10
 8003d5a:	0028      	movs	r0, r5
 8003d5c:	f000 f842 	bl	8003de4 <__swbuf_r>
 8003d60:	1c43      	adds	r3, r0, #1
 8003d62:	d0d6      	beq.n	8003d12 <_puts_r+0x42>
 8003d64:	200a      	movs	r0, #10
 8003d66:	e7d6      	b.n	8003d16 <_puts_r+0x46>
 8003d68:	0022      	movs	r2, r4
 8003d6a:	0028      	movs	r0, r5
 8003d6c:	f000 f83a 	bl	8003de4 <__swbuf_r>
 8003d70:	1c43      	adds	r3, r0, #1
 8003d72:	d1e8      	bne.n	8003d46 <_puts_r+0x76>
 8003d74:	e7cd      	b.n	8003d12 <_puts_r+0x42>
 8003d76:	200a      	movs	r0, #10
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	6022      	str	r2, [r4, #0]
 8003d7e:	7018      	strb	r0, [r3, #0]
 8003d80:	e7c9      	b.n	8003d16 <_puts_r+0x46>
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	080050c0 	.word	0x080050c0
 8003d88:	080050e0 	.word	0x080050e0
 8003d8c:	080050a0 	.word	0x080050a0

08003d90 <puts>:
 8003d90:	b510      	push	{r4, lr}
 8003d92:	4b03      	ldr	r3, [pc, #12]	; (8003da0 <puts+0x10>)
 8003d94:	0001      	movs	r1, r0
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	f7ff ff9a 	bl	8003cd0 <_puts_r>
 8003d9c:	bd10      	pop	{r4, pc}
 8003d9e:	46c0      	nop			; (mov r8, r8)
 8003da0:	2000000c 	.word	0x2000000c

08003da4 <siprintf>:
 8003da4:	b40e      	push	{r1, r2, r3}
 8003da6:	b500      	push	{lr}
 8003da8:	490b      	ldr	r1, [pc, #44]	; (8003dd8 <siprintf+0x34>)
 8003daa:	b09c      	sub	sp, #112	; 0x70
 8003dac:	ab1d      	add	r3, sp, #116	; 0x74
 8003dae:	9002      	str	r0, [sp, #8]
 8003db0:	9006      	str	r0, [sp, #24]
 8003db2:	9107      	str	r1, [sp, #28]
 8003db4:	9104      	str	r1, [sp, #16]
 8003db6:	4809      	ldr	r0, [pc, #36]	; (8003ddc <siprintf+0x38>)
 8003db8:	4909      	ldr	r1, [pc, #36]	; (8003de0 <siprintf+0x3c>)
 8003dba:	cb04      	ldmia	r3!, {r2}
 8003dbc:	9105      	str	r1, [sp, #20]
 8003dbe:	6800      	ldr	r0, [r0, #0]
 8003dc0:	a902      	add	r1, sp, #8
 8003dc2:	9301      	str	r3, [sp, #4]
 8003dc4:	f000 fbdc 	bl	8004580 <_svfiprintf_r>
 8003dc8:	2300      	movs	r3, #0
 8003dca:	9a02      	ldr	r2, [sp, #8]
 8003dcc:	7013      	strb	r3, [r2, #0]
 8003dce:	b01c      	add	sp, #112	; 0x70
 8003dd0:	bc08      	pop	{r3}
 8003dd2:	b003      	add	sp, #12
 8003dd4:	4718      	bx	r3
 8003dd6:	46c0      	nop			; (mov r8, r8)
 8003dd8:	7fffffff 	.word	0x7fffffff
 8003ddc:	2000000c 	.word	0x2000000c
 8003de0:	ffff0208 	.word	0xffff0208

08003de4 <__swbuf_r>:
 8003de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003de6:	0005      	movs	r5, r0
 8003de8:	000e      	movs	r6, r1
 8003dea:	0014      	movs	r4, r2
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d004      	beq.n	8003dfa <__swbuf_r+0x16>
 8003df0:	6983      	ldr	r3, [r0, #24]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <__swbuf_r+0x16>
 8003df6:	f000 f9b9 	bl	800416c <__sinit>
 8003dfa:	4b22      	ldr	r3, [pc, #136]	; (8003e84 <__swbuf_r+0xa0>)
 8003dfc:	429c      	cmp	r4, r3
 8003dfe:	d12d      	bne.n	8003e5c <__swbuf_r+0x78>
 8003e00:	686c      	ldr	r4, [r5, #4]
 8003e02:	69a3      	ldr	r3, [r4, #24]
 8003e04:	60a3      	str	r3, [r4, #8]
 8003e06:	89a3      	ldrh	r3, [r4, #12]
 8003e08:	071b      	lsls	r3, r3, #28
 8003e0a:	d531      	bpl.n	8003e70 <__swbuf_r+0x8c>
 8003e0c:	6923      	ldr	r3, [r4, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d02e      	beq.n	8003e70 <__swbuf_r+0x8c>
 8003e12:	6823      	ldr	r3, [r4, #0]
 8003e14:	6922      	ldr	r2, [r4, #16]
 8003e16:	b2f7      	uxtb	r7, r6
 8003e18:	1a98      	subs	r0, r3, r2
 8003e1a:	6963      	ldr	r3, [r4, #20]
 8003e1c:	b2f6      	uxtb	r6, r6
 8003e1e:	4283      	cmp	r3, r0
 8003e20:	dc05      	bgt.n	8003e2e <__swbuf_r+0x4a>
 8003e22:	0021      	movs	r1, r4
 8003e24:	0028      	movs	r0, r5
 8003e26:	f000 f933 	bl	8004090 <_fflush_r>
 8003e2a:	2800      	cmp	r0, #0
 8003e2c:	d126      	bne.n	8003e7c <__swbuf_r+0x98>
 8003e2e:	68a3      	ldr	r3, [r4, #8]
 8003e30:	3001      	adds	r0, #1
 8003e32:	3b01      	subs	r3, #1
 8003e34:	60a3      	str	r3, [r4, #8]
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	6022      	str	r2, [r4, #0]
 8003e3c:	701f      	strb	r7, [r3, #0]
 8003e3e:	6963      	ldr	r3, [r4, #20]
 8003e40:	4283      	cmp	r3, r0
 8003e42:	d004      	beq.n	8003e4e <__swbuf_r+0x6a>
 8003e44:	89a3      	ldrh	r3, [r4, #12]
 8003e46:	07db      	lsls	r3, r3, #31
 8003e48:	d51a      	bpl.n	8003e80 <__swbuf_r+0x9c>
 8003e4a:	2e0a      	cmp	r6, #10
 8003e4c:	d118      	bne.n	8003e80 <__swbuf_r+0x9c>
 8003e4e:	0021      	movs	r1, r4
 8003e50:	0028      	movs	r0, r5
 8003e52:	f000 f91d 	bl	8004090 <_fflush_r>
 8003e56:	2800      	cmp	r0, #0
 8003e58:	d012      	beq.n	8003e80 <__swbuf_r+0x9c>
 8003e5a:	e00f      	b.n	8003e7c <__swbuf_r+0x98>
 8003e5c:	4b0a      	ldr	r3, [pc, #40]	; (8003e88 <__swbuf_r+0xa4>)
 8003e5e:	429c      	cmp	r4, r3
 8003e60:	d101      	bne.n	8003e66 <__swbuf_r+0x82>
 8003e62:	68ac      	ldr	r4, [r5, #8]
 8003e64:	e7cd      	b.n	8003e02 <__swbuf_r+0x1e>
 8003e66:	4b09      	ldr	r3, [pc, #36]	; (8003e8c <__swbuf_r+0xa8>)
 8003e68:	429c      	cmp	r4, r3
 8003e6a:	d1ca      	bne.n	8003e02 <__swbuf_r+0x1e>
 8003e6c:	68ec      	ldr	r4, [r5, #12]
 8003e6e:	e7c8      	b.n	8003e02 <__swbuf_r+0x1e>
 8003e70:	0021      	movs	r1, r4
 8003e72:	0028      	movs	r0, r5
 8003e74:	f000 f80c 	bl	8003e90 <__swsetup_r>
 8003e78:	2800      	cmp	r0, #0
 8003e7a:	d0ca      	beq.n	8003e12 <__swbuf_r+0x2e>
 8003e7c:	2601      	movs	r6, #1
 8003e7e:	4276      	negs	r6, r6
 8003e80:	0030      	movs	r0, r6
 8003e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e84:	080050c0 	.word	0x080050c0
 8003e88:	080050e0 	.word	0x080050e0
 8003e8c:	080050a0 	.word	0x080050a0

08003e90 <__swsetup_r>:
 8003e90:	4b36      	ldr	r3, [pc, #216]	; (8003f6c <__swsetup_r+0xdc>)
 8003e92:	b570      	push	{r4, r5, r6, lr}
 8003e94:	681d      	ldr	r5, [r3, #0]
 8003e96:	0006      	movs	r6, r0
 8003e98:	000c      	movs	r4, r1
 8003e9a:	2d00      	cmp	r5, #0
 8003e9c:	d005      	beq.n	8003eaa <__swsetup_r+0x1a>
 8003e9e:	69ab      	ldr	r3, [r5, #24]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <__swsetup_r+0x1a>
 8003ea4:	0028      	movs	r0, r5
 8003ea6:	f000 f961 	bl	800416c <__sinit>
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <__swsetup_r+0xe0>)
 8003eac:	429c      	cmp	r4, r3
 8003eae:	d10f      	bne.n	8003ed0 <__swsetup_r+0x40>
 8003eb0:	686c      	ldr	r4, [r5, #4]
 8003eb2:	230c      	movs	r3, #12
 8003eb4:	5ee2      	ldrsh	r2, [r4, r3]
 8003eb6:	b293      	uxth	r3, r2
 8003eb8:	0719      	lsls	r1, r3, #28
 8003eba:	d42d      	bmi.n	8003f18 <__swsetup_r+0x88>
 8003ebc:	06d9      	lsls	r1, r3, #27
 8003ebe:	d411      	bmi.n	8003ee4 <__swsetup_r+0x54>
 8003ec0:	2309      	movs	r3, #9
 8003ec2:	2001      	movs	r0, #1
 8003ec4:	6033      	str	r3, [r6, #0]
 8003ec6:	3337      	adds	r3, #55	; 0x37
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	81a3      	strh	r3, [r4, #12]
 8003ecc:	4240      	negs	r0, r0
 8003ece:	bd70      	pop	{r4, r5, r6, pc}
 8003ed0:	4b28      	ldr	r3, [pc, #160]	; (8003f74 <__swsetup_r+0xe4>)
 8003ed2:	429c      	cmp	r4, r3
 8003ed4:	d101      	bne.n	8003eda <__swsetup_r+0x4a>
 8003ed6:	68ac      	ldr	r4, [r5, #8]
 8003ed8:	e7eb      	b.n	8003eb2 <__swsetup_r+0x22>
 8003eda:	4b27      	ldr	r3, [pc, #156]	; (8003f78 <__swsetup_r+0xe8>)
 8003edc:	429c      	cmp	r4, r3
 8003ede:	d1e8      	bne.n	8003eb2 <__swsetup_r+0x22>
 8003ee0:	68ec      	ldr	r4, [r5, #12]
 8003ee2:	e7e6      	b.n	8003eb2 <__swsetup_r+0x22>
 8003ee4:	075b      	lsls	r3, r3, #29
 8003ee6:	d513      	bpl.n	8003f10 <__swsetup_r+0x80>
 8003ee8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003eea:	2900      	cmp	r1, #0
 8003eec:	d008      	beq.n	8003f00 <__swsetup_r+0x70>
 8003eee:	0023      	movs	r3, r4
 8003ef0:	3344      	adds	r3, #68	; 0x44
 8003ef2:	4299      	cmp	r1, r3
 8003ef4:	d002      	beq.n	8003efc <__swsetup_r+0x6c>
 8003ef6:	0030      	movs	r0, r6
 8003ef8:	f000 fa38 	bl	800436c <_free_r>
 8003efc:	2300      	movs	r3, #0
 8003efe:	6363      	str	r3, [r4, #52]	; 0x34
 8003f00:	2224      	movs	r2, #36	; 0x24
 8003f02:	89a3      	ldrh	r3, [r4, #12]
 8003f04:	4393      	bics	r3, r2
 8003f06:	81a3      	strh	r3, [r4, #12]
 8003f08:	2300      	movs	r3, #0
 8003f0a:	6063      	str	r3, [r4, #4]
 8003f0c:	6923      	ldr	r3, [r4, #16]
 8003f0e:	6023      	str	r3, [r4, #0]
 8003f10:	2308      	movs	r3, #8
 8003f12:	89a2      	ldrh	r2, [r4, #12]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	81a3      	strh	r3, [r4, #12]
 8003f18:	6923      	ldr	r3, [r4, #16]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d10b      	bne.n	8003f36 <__swsetup_r+0xa6>
 8003f1e:	21a0      	movs	r1, #160	; 0xa0
 8003f20:	2280      	movs	r2, #128	; 0x80
 8003f22:	89a3      	ldrh	r3, [r4, #12]
 8003f24:	0089      	lsls	r1, r1, #2
 8003f26:	0092      	lsls	r2, r2, #2
 8003f28:	400b      	ands	r3, r1
 8003f2a:	4293      	cmp	r3, r2
 8003f2c:	d003      	beq.n	8003f36 <__swsetup_r+0xa6>
 8003f2e:	0021      	movs	r1, r4
 8003f30:	0030      	movs	r0, r6
 8003f32:	f000 f9d7 	bl	80042e4 <__smakebuf_r>
 8003f36:	2301      	movs	r3, #1
 8003f38:	89a2      	ldrh	r2, [r4, #12]
 8003f3a:	4013      	ands	r3, r2
 8003f3c:	d011      	beq.n	8003f62 <__swsetup_r+0xd2>
 8003f3e:	2300      	movs	r3, #0
 8003f40:	60a3      	str	r3, [r4, #8]
 8003f42:	6963      	ldr	r3, [r4, #20]
 8003f44:	425b      	negs	r3, r3
 8003f46:	61a3      	str	r3, [r4, #24]
 8003f48:	2000      	movs	r0, #0
 8003f4a:	6923      	ldr	r3, [r4, #16]
 8003f4c:	4283      	cmp	r3, r0
 8003f4e:	d1be      	bne.n	8003ece <__swsetup_r+0x3e>
 8003f50:	230c      	movs	r3, #12
 8003f52:	5ee2      	ldrsh	r2, [r4, r3]
 8003f54:	0613      	lsls	r3, r2, #24
 8003f56:	d5ba      	bpl.n	8003ece <__swsetup_r+0x3e>
 8003f58:	2340      	movs	r3, #64	; 0x40
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	81a3      	strh	r3, [r4, #12]
 8003f5e:	3801      	subs	r0, #1
 8003f60:	e7b5      	b.n	8003ece <__swsetup_r+0x3e>
 8003f62:	0792      	lsls	r2, r2, #30
 8003f64:	d400      	bmi.n	8003f68 <__swsetup_r+0xd8>
 8003f66:	6963      	ldr	r3, [r4, #20]
 8003f68:	60a3      	str	r3, [r4, #8]
 8003f6a:	e7ed      	b.n	8003f48 <__swsetup_r+0xb8>
 8003f6c:	2000000c 	.word	0x2000000c
 8003f70:	080050c0 	.word	0x080050c0
 8003f74:	080050e0 	.word	0x080050e0
 8003f78:	080050a0 	.word	0x080050a0

08003f7c <__sflush_r>:
 8003f7c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003f7e:	898a      	ldrh	r2, [r1, #12]
 8003f80:	0005      	movs	r5, r0
 8003f82:	000c      	movs	r4, r1
 8003f84:	0713      	lsls	r3, r2, #28
 8003f86:	d460      	bmi.n	800404a <__sflush_r+0xce>
 8003f88:	684b      	ldr	r3, [r1, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	dc04      	bgt.n	8003f98 <__sflush_r+0x1c>
 8003f8e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	dc01      	bgt.n	8003f98 <__sflush_r+0x1c>
 8003f94:	2000      	movs	r0, #0
 8003f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003f98:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003f9a:	2f00      	cmp	r7, #0
 8003f9c:	d0fa      	beq.n	8003f94 <__sflush_r+0x18>
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	682e      	ldr	r6, [r5, #0]
 8003fa2:	602b      	str	r3, [r5, #0]
 8003fa4:	2380      	movs	r3, #128	; 0x80
 8003fa6:	015b      	lsls	r3, r3, #5
 8003fa8:	6a21      	ldr	r1, [r4, #32]
 8003faa:	401a      	ands	r2, r3
 8003fac:	d034      	beq.n	8004018 <__sflush_r+0x9c>
 8003fae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003fb0:	89a3      	ldrh	r3, [r4, #12]
 8003fb2:	075b      	lsls	r3, r3, #29
 8003fb4:	d506      	bpl.n	8003fc4 <__sflush_r+0x48>
 8003fb6:	6863      	ldr	r3, [r4, #4]
 8003fb8:	1ac0      	subs	r0, r0, r3
 8003fba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <__sflush_r+0x48>
 8003fc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003fc2:	1ac0      	subs	r0, r0, r3
 8003fc4:	0002      	movs	r2, r0
 8003fc6:	6a21      	ldr	r1, [r4, #32]
 8003fc8:	2300      	movs	r3, #0
 8003fca:	0028      	movs	r0, r5
 8003fcc:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003fce:	47b8      	blx	r7
 8003fd0:	89a1      	ldrh	r1, [r4, #12]
 8003fd2:	1c43      	adds	r3, r0, #1
 8003fd4:	d106      	bne.n	8003fe4 <__sflush_r+0x68>
 8003fd6:	682b      	ldr	r3, [r5, #0]
 8003fd8:	2b1d      	cmp	r3, #29
 8003fda:	d830      	bhi.n	800403e <__sflush_r+0xc2>
 8003fdc:	4a2b      	ldr	r2, [pc, #172]	; (800408c <__sflush_r+0x110>)
 8003fde:	40da      	lsrs	r2, r3
 8003fe0:	07d3      	lsls	r3, r2, #31
 8003fe2:	d52c      	bpl.n	800403e <__sflush_r+0xc2>
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	6063      	str	r3, [r4, #4]
 8003fe8:	6923      	ldr	r3, [r4, #16]
 8003fea:	6023      	str	r3, [r4, #0]
 8003fec:	04cb      	lsls	r3, r1, #19
 8003fee:	d505      	bpl.n	8003ffc <__sflush_r+0x80>
 8003ff0:	1c43      	adds	r3, r0, #1
 8003ff2:	d102      	bne.n	8003ffa <__sflush_r+0x7e>
 8003ff4:	682b      	ldr	r3, [r5, #0]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d100      	bne.n	8003ffc <__sflush_r+0x80>
 8003ffa:	6560      	str	r0, [r4, #84]	; 0x54
 8003ffc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ffe:	602e      	str	r6, [r5, #0]
 8004000:	2900      	cmp	r1, #0
 8004002:	d0c7      	beq.n	8003f94 <__sflush_r+0x18>
 8004004:	0023      	movs	r3, r4
 8004006:	3344      	adds	r3, #68	; 0x44
 8004008:	4299      	cmp	r1, r3
 800400a:	d002      	beq.n	8004012 <__sflush_r+0x96>
 800400c:	0028      	movs	r0, r5
 800400e:	f000 f9ad 	bl	800436c <_free_r>
 8004012:	2000      	movs	r0, #0
 8004014:	6360      	str	r0, [r4, #52]	; 0x34
 8004016:	e7be      	b.n	8003f96 <__sflush_r+0x1a>
 8004018:	2301      	movs	r3, #1
 800401a:	0028      	movs	r0, r5
 800401c:	47b8      	blx	r7
 800401e:	1c43      	adds	r3, r0, #1
 8004020:	d1c6      	bne.n	8003fb0 <__sflush_r+0x34>
 8004022:	682b      	ldr	r3, [r5, #0]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d0c3      	beq.n	8003fb0 <__sflush_r+0x34>
 8004028:	2b1d      	cmp	r3, #29
 800402a:	d001      	beq.n	8004030 <__sflush_r+0xb4>
 800402c:	2b16      	cmp	r3, #22
 800402e:	d101      	bne.n	8004034 <__sflush_r+0xb8>
 8004030:	602e      	str	r6, [r5, #0]
 8004032:	e7af      	b.n	8003f94 <__sflush_r+0x18>
 8004034:	2340      	movs	r3, #64	; 0x40
 8004036:	89a2      	ldrh	r2, [r4, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	81a3      	strh	r3, [r4, #12]
 800403c:	e7ab      	b.n	8003f96 <__sflush_r+0x1a>
 800403e:	2340      	movs	r3, #64	; 0x40
 8004040:	430b      	orrs	r3, r1
 8004042:	2001      	movs	r0, #1
 8004044:	81a3      	strh	r3, [r4, #12]
 8004046:	4240      	negs	r0, r0
 8004048:	e7a5      	b.n	8003f96 <__sflush_r+0x1a>
 800404a:	690f      	ldr	r7, [r1, #16]
 800404c:	2f00      	cmp	r7, #0
 800404e:	d0a1      	beq.n	8003f94 <__sflush_r+0x18>
 8004050:	680b      	ldr	r3, [r1, #0]
 8004052:	600f      	str	r7, [r1, #0]
 8004054:	1bdb      	subs	r3, r3, r7
 8004056:	9301      	str	r3, [sp, #4]
 8004058:	2300      	movs	r3, #0
 800405a:	0792      	lsls	r2, r2, #30
 800405c:	d100      	bne.n	8004060 <__sflush_r+0xe4>
 800405e:	694b      	ldr	r3, [r1, #20]
 8004060:	60a3      	str	r3, [r4, #8]
 8004062:	9b01      	ldr	r3, [sp, #4]
 8004064:	2b00      	cmp	r3, #0
 8004066:	dc00      	bgt.n	800406a <__sflush_r+0xee>
 8004068:	e794      	b.n	8003f94 <__sflush_r+0x18>
 800406a:	9b01      	ldr	r3, [sp, #4]
 800406c:	003a      	movs	r2, r7
 800406e:	6a21      	ldr	r1, [r4, #32]
 8004070:	0028      	movs	r0, r5
 8004072:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004074:	47b0      	blx	r6
 8004076:	2800      	cmp	r0, #0
 8004078:	dc03      	bgt.n	8004082 <__sflush_r+0x106>
 800407a:	2340      	movs	r3, #64	; 0x40
 800407c:	89a2      	ldrh	r2, [r4, #12]
 800407e:	4313      	orrs	r3, r2
 8004080:	e7df      	b.n	8004042 <__sflush_r+0xc6>
 8004082:	9b01      	ldr	r3, [sp, #4]
 8004084:	183f      	adds	r7, r7, r0
 8004086:	1a1b      	subs	r3, r3, r0
 8004088:	9301      	str	r3, [sp, #4]
 800408a:	e7ea      	b.n	8004062 <__sflush_r+0xe6>
 800408c:	20400001 	.word	0x20400001

08004090 <_fflush_r>:
 8004090:	690b      	ldr	r3, [r1, #16]
 8004092:	b570      	push	{r4, r5, r6, lr}
 8004094:	0005      	movs	r5, r0
 8004096:	000c      	movs	r4, r1
 8004098:	2b00      	cmp	r3, #0
 800409a:	d101      	bne.n	80040a0 <_fflush_r+0x10>
 800409c:	2000      	movs	r0, #0
 800409e:	bd70      	pop	{r4, r5, r6, pc}
 80040a0:	2800      	cmp	r0, #0
 80040a2:	d004      	beq.n	80040ae <_fflush_r+0x1e>
 80040a4:	6983      	ldr	r3, [r0, #24]
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <_fflush_r+0x1e>
 80040aa:	f000 f85f 	bl	800416c <__sinit>
 80040ae:	4b0b      	ldr	r3, [pc, #44]	; (80040dc <_fflush_r+0x4c>)
 80040b0:	429c      	cmp	r4, r3
 80040b2:	d109      	bne.n	80040c8 <_fflush_r+0x38>
 80040b4:	686c      	ldr	r4, [r5, #4]
 80040b6:	220c      	movs	r2, #12
 80040b8:	5ea3      	ldrsh	r3, [r4, r2]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d0ee      	beq.n	800409c <_fflush_r+0xc>
 80040be:	0021      	movs	r1, r4
 80040c0:	0028      	movs	r0, r5
 80040c2:	f7ff ff5b 	bl	8003f7c <__sflush_r>
 80040c6:	e7ea      	b.n	800409e <_fflush_r+0xe>
 80040c8:	4b05      	ldr	r3, [pc, #20]	; (80040e0 <_fflush_r+0x50>)
 80040ca:	429c      	cmp	r4, r3
 80040cc:	d101      	bne.n	80040d2 <_fflush_r+0x42>
 80040ce:	68ac      	ldr	r4, [r5, #8]
 80040d0:	e7f1      	b.n	80040b6 <_fflush_r+0x26>
 80040d2:	4b04      	ldr	r3, [pc, #16]	; (80040e4 <_fflush_r+0x54>)
 80040d4:	429c      	cmp	r4, r3
 80040d6:	d1ee      	bne.n	80040b6 <_fflush_r+0x26>
 80040d8:	68ec      	ldr	r4, [r5, #12]
 80040da:	e7ec      	b.n	80040b6 <_fflush_r+0x26>
 80040dc:	080050c0 	.word	0x080050c0
 80040e0:	080050e0 	.word	0x080050e0
 80040e4:	080050a0 	.word	0x080050a0

080040e8 <std>:
 80040e8:	2300      	movs	r3, #0
 80040ea:	b510      	push	{r4, lr}
 80040ec:	0004      	movs	r4, r0
 80040ee:	6003      	str	r3, [r0, #0]
 80040f0:	6043      	str	r3, [r0, #4]
 80040f2:	6083      	str	r3, [r0, #8]
 80040f4:	8181      	strh	r1, [r0, #12]
 80040f6:	6643      	str	r3, [r0, #100]	; 0x64
 80040f8:	81c2      	strh	r2, [r0, #14]
 80040fa:	6103      	str	r3, [r0, #16]
 80040fc:	6143      	str	r3, [r0, #20]
 80040fe:	6183      	str	r3, [r0, #24]
 8004100:	0019      	movs	r1, r3
 8004102:	2208      	movs	r2, #8
 8004104:	305c      	adds	r0, #92	; 0x5c
 8004106:	f7ff fdc0 	bl	8003c8a <memset>
 800410a:	4b05      	ldr	r3, [pc, #20]	; (8004120 <std+0x38>)
 800410c:	6224      	str	r4, [r4, #32]
 800410e:	6263      	str	r3, [r4, #36]	; 0x24
 8004110:	4b04      	ldr	r3, [pc, #16]	; (8004124 <std+0x3c>)
 8004112:	62a3      	str	r3, [r4, #40]	; 0x28
 8004114:	4b04      	ldr	r3, [pc, #16]	; (8004128 <std+0x40>)
 8004116:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004118:	4b04      	ldr	r3, [pc, #16]	; (800412c <std+0x44>)
 800411a:	6323      	str	r3, [r4, #48]	; 0x30
 800411c:	bd10      	pop	{r4, pc}
 800411e:	46c0      	nop			; (mov r8, r8)
 8004120:	08004d09 	.word	0x08004d09
 8004124:	08004d31 	.word	0x08004d31
 8004128:	08004d69 	.word	0x08004d69
 800412c:	08004d95 	.word	0x08004d95

08004130 <_cleanup_r>:
 8004130:	b510      	push	{r4, lr}
 8004132:	4902      	ldr	r1, [pc, #8]	; (800413c <_cleanup_r+0xc>)
 8004134:	f000 f88c 	bl	8004250 <_fwalk_reent>
 8004138:	bd10      	pop	{r4, pc}
 800413a:	46c0      	nop			; (mov r8, r8)
 800413c:	08004091 	.word	0x08004091

08004140 <__sfmoreglue>:
 8004140:	b570      	push	{r4, r5, r6, lr}
 8004142:	2568      	movs	r5, #104	; 0x68
 8004144:	1e4a      	subs	r2, r1, #1
 8004146:	4355      	muls	r5, r2
 8004148:	000e      	movs	r6, r1
 800414a:	0029      	movs	r1, r5
 800414c:	3174      	adds	r1, #116	; 0x74
 800414e:	f000 f957 	bl	8004400 <_malloc_r>
 8004152:	1e04      	subs	r4, r0, #0
 8004154:	d008      	beq.n	8004168 <__sfmoreglue+0x28>
 8004156:	2100      	movs	r1, #0
 8004158:	002a      	movs	r2, r5
 800415a:	6001      	str	r1, [r0, #0]
 800415c:	6046      	str	r6, [r0, #4]
 800415e:	300c      	adds	r0, #12
 8004160:	60a0      	str	r0, [r4, #8]
 8004162:	3268      	adds	r2, #104	; 0x68
 8004164:	f7ff fd91 	bl	8003c8a <memset>
 8004168:	0020      	movs	r0, r4
 800416a:	bd70      	pop	{r4, r5, r6, pc}

0800416c <__sinit>:
 800416c:	6983      	ldr	r3, [r0, #24]
 800416e:	b513      	push	{r0, r1, r4, lr}
 8004170:	0004      	movs	r4, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d128      	bne.n	80041c8 <__sinit+0x5c>
 8004176:	6483      	str	r3, [r0, #72]	; 0x48
 8004178:	64c3      	str	r3, [r0, #76]	; 0x4c
 800417a:	6503      	str	r3, [r0, #80]	; 0x50
 800417c:	4b13      	ldr	r3, [pc, #76]	; (80041cc <__sinit+0x60>)
 800417e:	4a14      	ldr	r2, [pc, #80]	; (80041d0 <__sinit+0x64>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	6282      	str	r2, [r0, #40]	; 0x28
 8004184:	9301      	str	r3, [sp, #4]
 8004186:	4298      	cmp	r0, r3
 8004188:	d101      	bne.n	800418e <__sinit+0x22>
 800418a:	2301      	movs	r3, #1
 800418c:	6183      	str	r3, [r0, #24]
 800418e:	0020      	movs	r0, r4
 8004190:	f000 f820 	bl	80041d4 <__sfp>
 8004194:	6060      	str	r0, [r4, #4]
 8004196:	0020      	movs	r0, r4
 8004198:	f000 f81c 	bl	80041d4 <__sfp>
 800419c:	60a0      	str	r0, [r4, #8]
 800419e:	0020      	movs	r0, r4
 80041a0:	f000 f818 	bl	80041d4 <__sfp>
 80041a4:	2200      	movs	r2, #0
 80041a6:	60e0      	str	r0, [r4, #12]
 80041a8:	2104      	movs	r1, #4
 80041aa:	6860      	ldr	r0, [r4, #4]
 80041ac:	f7ff ff9c 	bl	80040e8 <std>
 80041b0:	2201      	movs	r2, #1
 80041b2:	2109      	movs	r1, #9
 80041b4:	68a0      	ldr	r0, [r4, #8]
 80041b6:	f7ff ff97 	bl	80040e8 <std>
 80041ba:	2202      	movs	r2, #2
 80041bc:	2112      	movs	r1, #18
 80041be:	68e0      	ldr	r0, [r4, #12]
 80041c0:	f7ff ff92 	bl	80040e8 <std>
 80041c4:	2301      	movs	r3, #1
 80041c6:	61a3      	str	r3, [r4, #24]
 80041c8:	bd13      	pop	{r0, r1, r4, pc}
 80041ca:	46c0      	nop			; (mov r8, r8)
 80041cc:	0800509c 	.word	0x0800509c
 80041d0:	08004131 	.word	0x08004131

080041d4 <__sfp>:
 80041d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d6:	4b1c      	ldr	r3, [pc, #112]	; (8004248 <__sfp+0x74>)
 80041d8:	0007      	movs	r7, r0
 80041da:	681e      	ldr	r6, [r3, #0]
 80041dc:	69b3      	ldr	r3, [r6, #24]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d102      	bne.n	80041e8 <__sfp+0x14>
 80041e2:	0030      	movs	r0, r6
 80041e4:	f7ff ffc2 	bl	800416c <__sinit>
 80041e8:	3648      	adds	r6, #72	; 0x48
 80041ea:	68b4      	ldr	r4, [r6, #8]
 80041ec:	6873      	ldr	r3, [r6, #4]
 80041ee:	3b01      	subs	r3, #1
 80041f0:	d504      	bpl.n	80041fc <__sfp+0x28>
 80041f2:	6833      	ldr	r3, [r6, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d007      	beq.n	8004208 <__sfp+0x34>
 80041f8:	6836      	ldr	r6, [r6, #0]
 80041fa:	e7f6      	b.n	80041ea <__sfp+0x16>
 80041fc:	220c      	movs	r2, #12
 80041fe:	5ea5      	ldrsh	r5, [r4, r2]
 8004200:	2d00      	cmp	r5, #0
 8004202:	d00d      	beq.n	8004220 <__sfp+0x4c>
 8004204:	3468      	adds	r4, #104	; 0x68
 8004206:	e7f2      	b.n	80041ee <__sfp+0x1a>
 8004208:	2104      	movs	r1, #4
 800420a:	0038      	movs	r0, r7
 800420c:	f7ff ff98 	bl	8004140 <__sfmoreglue>
 8004210:	6030      	str	r0, [r6, #0]
 8004212:	2800      	cmp	r0, #0
 8004214:	d1f0      	bne.n	80041f8 <__sfp+0x24>
 8004216:	230c      	movs	r3, #12
 8004218:	0004      	movs	r4, r0
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	0020      	movs	r0, r4
 800421e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004220:	0020      	movs	r0, r4
 8004222:	4b0a      	ldr	r3, [pc, #40]	; (800424c <__sfp+0x78>)
 8004224:	6665      	str	r5, [r4, #100]	; 0x64
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	6065      	str	r5, [r4, #4]
 800422a:	60a5      	str	r5, [r4, #8]
 800422c:	60e3      	str	r3, [r4, #12]
 800422e:	6125      	str	r5, [r4, #16]
 8004230:	6165      	str	r5, [r4, #20]
 8004232:	61a5      	str	r5, [r4, #24]
 8004234:	2208      	movs	r2, #8
 8004236:	0029      	movs	r1, r5
 8004238:	305c      	adds	r0, #92	; 0x5c
 800423a:	f7ff fd26 	bl	8003c8a <memset>
 800423e:	6365      	str	r5, [r4, #52]	; 0x34
 8004240:	63a5      	str	r5, [r4, #56]	; 0x38
 8004242:	64a5      	str	r5, [r4, #72]	; 0x48
 8004244:	64e5      	str	r5, [r4, #76]	; 0x4c
 8004246:	e7e9      	b.n	800421c <__sfp+0x48>
 8004248:	0800509c 	.word	0x0800509c
 800424c:	ffff0001 	.word	0xffff0001

08004250 <_fwalk_reent>:
 8004250:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004252:	0004      	movs	r4, r0
 8004254:	0007      	movs	r7, r0
 8004256:	2600      	movs	r6, #0
 8004258:	9101      	str	r1, [sp, #4]
 800425a:	3448      	adds	r4, #72	; 0x48
 800425c:	2c00      	cmp	r4, #0
 800425e:	d101      	bne.n	8004264 <_fwalk_reent+0x14>
 8004260:	0030      	movs	r0, r6
 8004262:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004264:	6863      	ldr	r3, [r4, #4]
 8004266:	68a5      	ldr	r5, [r4, #8]
 8004268:	9300      	str	r3, [sp, #0]
 800426a:	9b00      	ldr	r3, [sp, #0]
 800426c:	3b01      	subs	r3, #1
 800426e:	9300      	str	r3, [sp, #0]
 8004270:	d501      	bpl.n	8004276 <_fwalk_reent+0x26>
 8004272:	6824      	ldr	r4, [r4, #0]
 8004274:	e7f2      	b.n	800425c <_fwalk_reent+0xc>
 8004276:	89ab      	ldrh	r3, [r5, #12]
 8004278:	2b01      	cmp	r3, #1
 800427a:	d908      	bls.n	800428e <_fwalk_reent+0x3e>
 800427c:	220e      	movs	r2, #14
 800427e:	5eab      	ldrsh	r3, [r5, r2]
 8004280:	3301      	adds	r3, #1
 8004282:	d004      	beq.n	800428e <_fwalk_reent+0x3e>
 8004284:	0029      	movs	r1, r5
 8004286:	0038      	movs	r0, r7
 8004288:	9b01      	ldr	r3, [sp, #4]
 800428a:	4798      	blx	r3
 800428c:	4306      	orrs	r6, r0
 800428e:	3568      	adds	r5, #104	; 0x68
 8004290:	e7eb      	b.n	800426a <_fwalk_reent+0x1a>
	...

08004294 <__swhatbuf_r>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	000e      	movs	r6, r1
 8004298:	001d      	movs	r5, r3
 800429a:	230e      	movs	r3, #14
 800429c:	5ec9      	ldrsh	r1, [r1, r3]
 800429e:	b096      	sub	sp, #88	; 0x58
 80042a0:	0014      	movs	r4, r2
 80042a2:	2900      	cmp	r1, #0
 80042a4:	da07      	bge.n	80042b6 <__swhatbuf_r+0x22>
 80042a6:	2300      	movs	r3, #0
 80042a8:	602b      	str	r3, [r5, #0]
 80042aa:	89b3      	ldrh	r3, [r6, #12]
 80042ac:	061b      	lsls	r3, r3, #24
 80042ae:	d411      	bmi.n	80042d4 <__swhatbuf_r+0x40>
 80042b0:	2380      	movs	r3, #128	; 0x80
 80042b2:	00db      	lsls	r3, r3, #3
 80042b4:	e00f      	b.n	80042d6 <__swhatbuf_r+0x42>
 80042b6:	466a      	mov	r2, sp
 80042b8:	f000 fd98 	bl	8004dec <_fstat_r>
 80042bc:	2800      	cmp	r0, #0
 80042be:	dbf2      	blt.n	80042a6 <__swhatbuf_r+0x12>
 80042c0:	22f0      	movs	r2, #240	; 0xf0
 80042c2:	9b01      	ldr	r3, [sp, #4]
 80042c4:	0212      	lsls	r2, r2, #8
 80042c6:	4013      	ands	r3, r2
 80042c8:	4a05      	ldr	r2, [pc, #20]	; (80042e0 <__swhatbuf_r+0x4c>)
 80042ca:	189b      	adds	r3, r3, r2
 80042cc:	425a      	negs	r2, r3
 80042ce:	4153      	adcs	r3, r2
 80042d0:	602b      	str	r3, [r5, #0]
 80042d2:	e7ed      	b.n	80042b0 <__swhatbuf_r+0x1c>
 80042d4:	2340      	movs	r3, #64	; 0x40
 80042d6:	2000      	movs	r0, #0
 80042d8:	6023      	str	r3, [r4, #0]
 80042da:	b016      	add	sp, #88	; 0x58
 80042dc:	bd70      	pop	{r4, r5, r6, pc}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	ffffe000 	.word	0xffffe000

080042e4 <__smakebuf_r>:
 80042e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80042e6:	2602      	movs	r6, #2
 80042e8:	898b      	ldrh	r3, [r1, #12]
 80042ea:	0005      	movs	r5, r0
 80042ec:	000c      	movs	r4, r1
 80042ee:	4233      	tst	r3, r6
 80042f0:	d006      	beq.n	8004300 <__smakebuf_r+0x1c>
 80042f2:	0023      	movs	r3, r4
 80042f4:	3347      	adds	r3, #71	; 0x47
 80042f6:	6023      	str	r3, [r4, #0]
 80042f8:	6123      	str	r3, [r4, #16]
 80042fa:	2301      	movs	r3, #1
 80042fc:	6163      	str	r3, [r4, #20]
 80042fe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8004300:	ab01      	add	r3, sp, #4
 8004302:	466a      	mov	r2, sp
 8004304:	f7ff ffc6 	bl	8004294 <__swhatbuf_r>
 8004308:	9900      	ldr	r1, [sp, #0]
 800430a:	0007      	movs	r7, r0
 800430c:	0028      	movs	r0, r5
 800430e:	f000 f877 	bl	8004400 <_malloc_r>
 8004312:	2800      	cmp	r0, #0
 8004314:	d108      	bne.n	8004328 <__smakebuf_r+0x44>
 8004316:	220c      	movs	r2, #12
 8004318:	5ea3      	ldrsh	r3, [r4, r2]
 800431a:	059a      	lsls	r2, r3, #22
 800431c:	d4ef      	bmi.n	80042fe <__smakebuf_r+0x1a>
 800431e:	2203      	movs	r2, #3
 8004320:	4393      	bics	r3, r2
 8004322:	431e      	orrs	r6, r3
 8004324:	81a6      	strh	r6, [r4, #12]
 8004326:	e7e4      	b.n	80042f2 <__smakebuf_r+0xe>
 8004328:	4b0f      	ldr	r3, [pc, #60]	; (8004368 <__smakebuf_r+0x84>)
 800432a:	62ab      	str	r3, [r5, #40]	; 0x28
 800432c:	2380      	movs	r3, #128	; 0x80
 800432e:	89a2      	ldrh	r2, [r4, #12]
 8004330:	6020      	str	r0, [r4, #0]
 8004332:	4313      	orrs	r3, r2
 8004334:	81a3      	strh	r3, [r4, #12]
 8004336:	9b00      	ldr	r3, [sp, #0]
 8004338:	6120      	str	r0, [r4, #16]
 800433a:	6163      	str	r3, [r4, #20]
 800433c:	9b01      	ldr	r3, [sp, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d00d      	beq.n	800435e <__smakebuf_r+0x7a>
 8004342:	230e      	movs	r3, #14
 8004344:	5ee1      	ldrsh	r1, [r4, r3]
 8004346:	0028      	movs	r0, r5
 8004348:	f000 fd62 	bl	8004e10 <_isatty_r>
 800434c:	2800      	cmp	r0, #0
 800434e:	d006      	beq.n	800435e <__smakebuf_r+0x7a>
 8004350:	2203      	movs	r2, #3
 8004352:	89a3      	ldrh	r3, [r4, #12]
 8004354:	4393      	bics	r3, r2
 8004356:	001a      	movs	r2, r3
 8004358:	2301      	movs	r3, #1
 800435a:	4313      	orrs	r3, r2
 800435c:	81a3      	strh	r3, [r4, #12]
 800435e:	89a0      	ldrh	r0, [r4, #12]
 8004360:	4338      	orrs	r0, r7
 8004362:	81a0      	strh	r0, [r4, #12]
 8004364:	e7cb      	b.n	80042fe <__smakebuf_r+0x1a>
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	08004131 	.word	0x08004131

0800436c <_free_r>:
 800436c:	b570      	push	{r4, r5, r6, lr}
 800436e:	0005      	movs	r5, r0
 8004370:	2900      	cmp	r1, #0
 8004372:	d010      	beq.n	8004396 <_free_r+0x2a>
 8004374:	1f0c      	subs	r4, r1, #4
 8004376:	6823      	ldr	r3, [r4, #0]
 8004378:	2b00      	cmp	r3, #0
 800437a:	da00      	bge.n	800437e <_free_r+0x12>
 800437c:	18e4      	adds	r4, r4, r3
 800437e:	0028      	movs	r0, r5
 8004380:	f000 fd8a 	bl	8004e98 <__malloc_lock>
 8004384:	4a1d      	ldr	r2, [pc, #116]	; (80043fc <_free_r+0x90>)
 8004386:	6813      	ldr	r3, [r2, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d105      	bne.n	8004398 <_free_r+0x2c>
 800438c:	6063      	str	r3, [r4, #4]
 800438e:	6014      	str	r4, [r2, #0]
 8004390:	0028      	movs	r0, r5
 8004392:	f000 fd82 	bl	8004e9a <__malloc_unlock>
 8004396:	bd70      	pop	{r4, r5, r6, pc}
 8004398:	42a3      	cmp	r3, r4
 800439a:	d909      	bls.n	80043b0 <_free_r+0x44>
 800439c:	6821      	ldr	r1, [r4, #0]
 800439e:	1860      	adds	r0, r4, r1
 80043a0:	4283      	cmp	r3, r0
 80043a2:	d1f3      	bne.n	800438c <_free_r+0x20>
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	1841      	adds	r1, r0, r1
 80043aa:	6021      	str	r1, [r4, #0]
 80043ac:	e7ee      	b.n	800438c <_free_r+0x20>
 80043ae:	0013      	movs	r3, r2
 80043b0:	685a      	ldr	r2, [r3, #4]
 80043b2:	2a00      	cmp	r2, #0
 80043b4:	d001      	beq.n	80043ba <_free_r+0x4e>
 80043b6:	42a2      	cmp	r2, r4
 80043b8:	d9f9      	bls.n	80043ae <_free_r+0x42>
 80043ba:	6819      	ldr	r1, [r3, #0]
 80043bc:	1858      	adds	r0, r3, r1
 80043be:	42a0      	cmp	r0, r4
 80043c0:	d10b      	bne.n	80043da <_free_r+0x6e>
 80043c2:	6820      	ldr	r0, [r4, #0]
 80043c4:	1809      	adds	r1, r1, r0
 80043c6:	1858      	adds	r0, r3, r1
 80043c8:	6019      	str	r1, [r3, #0]
 80043ca:	4282      	cmp	r2, r0
 80043cc:	d1e0      	bne.n	8004390 <_free_r+0x24>
 80043ce:	6810      	ldr	r0, [r2, #0]
 80043d0:	6852      	ldr	r2, [r2, #4]
 80043d2:	1841      	adds	r1, r0, r1
 80043d4:	6019      	str	r1, [r3, #0]
 80043d6:	605a      	str	r2, [r3, #4]
 80043d8:	e7da      	b.n	8004390 <_free_r+0x24>
 80043da:	42a0      	cmp	r0, r4
 80043dc:	d902      	bls.n	80043e4 <_free_r+0x78>
 80043de:	230c      	movs	r3, #12
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	e7d5      	b.n	8004390 <_free_r+0x24>
 80043e4:	6821      	ldr	r1, [r4, #0]
 80043e6:	1860      	adds	r0, r4, r1
 80043e8:	4282      	cmp	r2, r0
 80043ea:	d103      	bne.n	80043f4 <_free_r+0x88>
 80043ec:	6810      	ldr	r0, [r2, #0]
 80043ee:	6852      	ldr	r2, [r2, #4]
 80043f0:	1841      	adds	r1, r0, r1
 80043f2:	6021      	str	r1, [r4, #0]
 80043f4:	6062      	str	r2, [r4, #4]
 80043f6:	605c      	str	r4, [r3, #4]
 80043f8:	e7ca      	b.n	8004390 <_free_r+0x24>
 80043fa:	46c0      	nop			; (mov r8, r8)
 80043fc:	20000090 	.word	0x20000090

08004400 <_malloc_r>:
 8004400:	2303      	movs	r3, #3
 8004402:	b570      	push	{r4, r5, r6, lr}
 8004404:	1ccd      	adds	r5, r1, #3
 8004406:	439d      	bics	r5, r3
 8004408:	3508      	adds	r5, #8
 800440a:	0006      	movs	r6, r0
 800440c:	2d0c      	cmp	r5, #12
 800440e:	d21e      	bcs.n	800444e <_malloc_r+0x4e>
 8004410:	250c      	movs	r5, #12
 8004412:	42a9      	cmp	r1, r5
 8004414:	d81d      	bhi.n	8004452 <_malloc_r+0x52>
 8004416:	0030      	movs	r0, r6
 8004418:	f000 fd3e 	bl	8004e98 <__malloc_lock>
 800441c:	4a25      	ldr	r2, [pc, #148]	; (80044b4 <_malloc_r+0xb4>)
 800441e:	6814      	ldr	r4, [r2, #0]
 8004420:	0021      	movs	r1, r4
 8004422:	2900      	cmp	r1, #0
 8004424:	d119      	bne.n	800445a <_malloc_r+0x5a>
 8004426:	4c24      	ldr	r4, [pc, #144]	; (80044b8 <_malloc_r+0xb8>)
 8004428:	6823      	ldr	r3, [r4, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <_malloc_r+0x36>
 800442e:	0030      	movs	r0, r6
 8004430:	f000 fc58 	bl	8004ce4 <_sbrk_r>
 8004434:	6020      	str	r0, [r4, #0]
 8004436:	0029      	movs	r1, r5
 8004438:	0030      	movs	r0, r6
 800443a:	f000 fc53 	bl	8004ce4 <_sbrk_r>
 800443e:	1c43      	adds	r3, r0, #1
 8004440:	d12b      	bne.n	800449a <_malloc_r+0x9a>
 8004442:	230c      	movs	r3, #12
 8004444:	0030      	movs	r0, r6
 8004446:	6033      	str	r3, [r6, #0]
 8004448:	f000 fd27 	bl	8004e9a <__malloc_unlock>
 800444c:	e003      	b.n	8004456 <_malloc_r+0x56>
 800444e:	2d00      	cmp	r5, #0
 8004450:	dadf      	bge.n	8004412 <_malloc_r+0x12>
 8004452:	230c      	movs	r3, #12
 8004454:	6033      	str	r3, [r6, #0]
 8004456:	2000      	movs	r0, #0
 8004458:	bd70      	pop	{r4, r5, r6, pc}
 800445a:	680b      	ldr	r3, [r1, #0]
 800445c:	1b5b      	subs	r3, r3, r5
 800445e:	d419      	bmi.n	8004494 <_malloc_r+0x94>
 8004460:	2b0b      	cmp	r3, #11
 8004462:	d903      	bls.n	800446c <_malloc_r+0x6c>
 8004464:	600b      	str	r3, [r1, #0]
 8004466:	18cc      	adds	r4, r1, r3
 8004468:	6025      	str	r5, [r4, #0]
 800446a:	e003      	b.n	8004474 <_malloc_r+0x74>
 800446c:	684b      	ldr	r3, [r1, #4]
 800446e:	428c      	cmp	r4, r1
 8004470:	d10d      	bne.n	800448e <_malloc_r+0x8e>
 8004472:	6013      	str	r3, [r2, #0]
 8004474:	0030      	movs	r0, r6
 8004476:	f000 fd10 	bl	8004e9a <__malloc_unlock>
 800447a:	0020      	movs	r0, r4
 800447c:	2207      	movs	r2, #7
 800447e:	300b      	adds	r0, #11
 8004480:	1d23      	adds	r3, r4, #4
 8004482:	4390      	bics	r0, r2
 8004484:	1ac3      	subs	r3, r0, r3
 8004486:	d0e7      	beq.n	8004458 <_malloc_r+0x58>
 8004488:	425a      	negs	r2, r3
 800448a:	50e2      	str	r2, [r4, r3]
 800448c:	e7e4      	b.n	8004458 <_malloc_r+0x58>
 800448e:	6063      	str	r3, [r4, #4]
 8004490:	000c      	movs	r4, r1
 8004492:	e7ef      	b.n	8004474 <_malloc_r+0x74>
 8004494:	000c      	movs	r4, r1
 8004496:	6849      	ldr	r1, [r1, #4]
 8004498:	e7c3      	b.n	8004422 <_malloc_r+0x22>
 800449a:	2303      	movs	r3, #3
 800449c:	1cc4      	adds	r4, r0, #3
 800449e:	439c      	bics	r4, r3
 80044a0:	42a0      	cmp	r0, r4
 80044a2:	d0e1      	beq.n	8004468 <_malloc_r+0x68>
 80044a4:	1a21      	subs	r1, r4, r0
 80044a6:	0030      	movs	r0, r6
 80044a8:	f000 fc1c 	bl	8004ce4 <_sbrk_r>
 80044ac:	1c43      	adds	r3, r0, #1
 80044ae:	d1db      	bne.n	8004468 <_malloc_r+0x68>
 80044b0:	e7c7      	b.n	8004442 <_malloc_r+0x42>
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	20000090 	.word	0x20000090
 80044b8:	20000094 	.word	0x20000094

080044bc <__ssputs_r>:
 80044bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80044be:	688e      	ldr	r6, [r1, #8]
 80044c0:	b085      	sub	sp, #20
 80044c2:	0007      	movs	r7, r0
 80044c4:	000c      	movs	r4, r1
 80044c6:	9203      	str	r2, [sp, #12]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	429e      	cmp	r6, r3
 80044cc:	d83c      	bhi.n	8004548 <__ssputs_r+0x8c>
 80044ce:	2390      	movs	r3, #144	; 0x90
 80044d0:	898a      	ldrh	r2, [r1, #12]
 80044d2:	00db      	lsls	r3, r3, #3
 80044d4:	421a      	tst	r2, r3
 80044d6:	d034      	beq.n	8004542 <__ssputs_r+0x86>
 80044d8:	2503      	movs	r5, #3
 80044da:	6909      	ldr	r1, [r1, #16]
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	1a5b      	subs	r3, r3, r1
 80044e0:	9302      	str	r3, [sp, #8]
 80044e2:	6963      	ldr	r3, [r4, #20]
 80044e4:	9802      	ldr	r0, [sp, #8]
 80044e6:	435d      	muls	r5, r3
 80044e8:	0feb      	lsrs	r3, r5, #31
 80044ea:	195d      	adds	r5, r3, r5
 80044ec:	9b01      	ldr	r3, [sp, #4]
 80044ee:	106d      	asrs	r5, r5, #1
 80044f0:	3301      	adds	r3, #1
 80044f2:	181b      	adds	r3, r3, r0
 80044f4:	42ab      	cmp	r3, r5
 80044f6:	d900      	bls.n	80044fa <__ssputs_r+0x3e>
 80044f8:	001d      	movs	r5, r3
 80044fa:	0553      	lsls	r3, r2, #21
 80044fc:	d532      	bpl.n	8004564 <__ssputs_r+0xa8>
 80044fe:	0029      	movs	r1, r5
 8004500:	0038      	movs	r0, r7
 8004502:	f7ff ff7d 	bl	8004400 <_malloc_r>
 8004506:	1e06      	subs	r6, r0, #0
 8004508:	d109      	bne.n	800451e <__ssputs_r+0x62>
 800450a:	230c      	movs	r3, #12
 800450c:	603b      	str	r3, [r7, #0]
 800450e:	2340      	movs	r3, #64	; 0x40
 8004510:	2001      	movs	r0, #1
 8004512:	89a2      	ldrh	r2, [r4, #12]
 8004514:	4240      	negs	r0, r0
 8004516:	4313      	orrs	r3, r2
 8004518:	81a3      	strh	r3, [r4, #12]
 800451a:	b005      	add	sp, #20
 800451c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800451e:	9a02      	ldr	r2, [sp, #8]
 8004520:	6921      	ldr	r1, [r4, #16]
 8004522:	f7ff fba9 	bl	8003c78 <memcpy>
 8004526:	89a3      	ldrh	r3, [r4, #12]
 8004528:	4a14      	ldr	r2, [pc, #80]	; (800457c <__ssputs_r+0xc0>)
 800452a:	401a      	ands	r2, r3
 800452c:	2380      	movs	r3, #128	; 0x80
 800452e:	4313      	orrs	r3, r2
 8004530:	81a3      	strh	r3, [r4, #12]
 8004532:	9b02      	ldr	r3, [sp, #8]
 8004534:	6126      	str	r6, [r4, #16]
 8004536:	18f6      	adds	r6, r6, r3
 8004538:	6026      	str	r6, [r4, #0]
 800453a:	6165      	str	r5, [r4, #20]
 800453c:	9e01      	ldr	r6, [sp, #4]
 800453e:	1aed      	subs	r5, r5, r3
 8004540:	60a5      	str	r5, [r4, #8]
 8004542:	9b01      	ldr	r3, [sp, #4]
 8004544:	429e      	cmp	r6, r3
 8004546:	d900      	bls.n	800454a <__ssputs_r+0x8e>
 8004548:	9e01      	ldr	r6, [sp, #4]
 800454a:	0032      	movs	r2, r6
 800454c:	9903      	ldr	r1, [sp, #12]
 800454e:	6820      	ldr	r0, [r4, #0]
 8004550:	f000 fc8f 	bl	8004e72 <memmove>
 8004554:	68a3      	ldr	r3, [r4, #8]
 8004556:	2000      	movs	r0, #0
 8004558:	1b9b      	subs	r3, r3, r6
 800455a:	60a3      	str	r3, [r4, #8]
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	199e      	adds	r6, r3, r6
 8004560:	6026      	str	r6, [r4, #0]
 8004562:	e7da      	b.n	800451a <__ssputs_r+0x5e>
 8004564:	002a      	movs	r2, r5
 8004566:	0038      	movs	r0, r7
 8004568:	f000 fc98 	bl	8004e9c <_realloc_r>
 800456c:	1e06      	subs	r6, r0, #0
 800456e:	d1e0      	bne.n	8004532 <__ssputs_r+0x76>
 8004570:	6921      	ldr	r1, [r4, #16]
 8004572:	0038      	movs	r0, r7
 8004574:	f7ff fefa 	bl	800436c <_free_r>
 8004578:	e7c7      	b.n	800450a <__ssputs_r+0x4e>
 800457a:	46c0      	nop			; (mov r8, r8)
 800457c:	fffffb7f 	.word	0xfffffb7f

08004580 <_svfiprintf_r>:
 8004580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004582:	b0a1      	sub	sp, #132	; 0x84
 8004584:	9003      	str	r0, [sp, #12]
 8004586:	001d      	movs	r5, r3
 8004588:	898b      	ldrh	r3, [r1, #12]
 800458a:	000f      	movs	r7, r1
 800458c:	0016      	movs	r6, r2
 800458e:	061b      	lsls	r3, r3, #24
 8004590:	d511      	bpl.n	80045b6 <_svfiprintf_r+0x36>
 8004592:	690b      	ldr	r3, [r1, #16]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d10e      	bne.n	80045b6 <_svfiprintf_r+0x36>
 8004598:	2140      	movs	r1, #64	; 0x40
 800459a:	f7ff ff31 	bl	8004400 <_malloc_r>
 800459e:	6038      	str	r0, [r7, #0]
 80045a0:	6138      	str	r0, [r7, #16]
 80045a2:	2800      	cmp	r0, #0
 80045a4:	d105      	bne.n	80045b2 <_svfiprintf_r+0x32>
 80045a6:	230c      	movs	r3, #12
 80045a8:	9a03      	ldr	r2, [sp, #12]
 80045aa:	3801      	subs	r0, #1
 80045ac:	6013      	str	r3, [r2, #0]
 80045ae:	b021      	add	sp, #132	; 0x84
 80045b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045b2:	2340      	movs	r3, #64	; 0x40
 80045b4:	617b      	str	r3, [r7, #20]
 80045b6:	2300      	movs	r3, #0
 80045b8:	ac08      	add	r4, sp, #32
 80045ba:	6163      	str	r3, [r4, #20]
 80045bc:	3320      	adds	r3, #32
 80045be:	7663      	strb	r3, [r4, #25]
 80045c0:	3310      	adds	r3, #16
 80045c2:	76a3      	strb	r3, [r4, #26]
 80045c4:	9507      	str	r5, [sp, #28]
 80045c6:	0035      	movs	r5, r6
 80045c8:	782b      	ldrb	r3, [r5, #0]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d001      	beq.n	80045d2 <_svfiprintf_r+0x52>
 80045ce:	2b25      	cmp	r3, #37	; 0x25
 80045d0:	d146      	bne.n	8004660 <_svfiprintf_r+0xe0>
 80045d2:	1bab      	subs	r3, r5, r6
 80045d4:	9305      	str	r3, [sp, #20]
 80045d6:	d00c      	beq.n	80045f2 <_svfiprintf_r+0x72>
 80045d8:	0032      	movs	r2, r6
 80045da:	0039      	movs	r1, r7
 80045dc:	9803      	ldr	r0, [sp, #12]
 80045de:	f7ff ff6d 	bl	80044bc <__ssputs_r>
 80045e2:	1c43      	adds	r3, r0, #1
 80045e4:	d100      	bne.n	80045e8 <_svfiprintf_r+0x68>
 80045e6:	e0ae      	b.n	8004746 <_svfiprintf_r+0x1c6>
 80045e8:	6962      	ldr	r2, [r4, #20]
 80045ea:	9b05      	ldr	r3, [sp, #20]
 80045ec:	4694      	mov	ip, r2
 80045ee:	4463      	add	r3, ip
 80045f0:	6163      	str	r3, [r4, #20]
 80045f2:	782b      	ldrb	r3, [r5, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d100      	bne.n	80045fa <_svfiprintf_r+0x7a>
 80045f8:	e0a5      	b.n	8004746 <_svfiprintf_r+0x1c6>
 80045fa:	2201      	movs	r2, #1
 80045fc:	2300      	movs	r3, #0
 80045fe:	4252      	negs	r2, r2
 8004600:	6062      	str	r2, [r4, #4]
 8004602:	a904      	add	r1, sp, #16
 8004604:	3254      	adds	r2, #84	; 0x54
 8004606:	1852      	adds	r2, r2, r1
 8004608:	1c6e      	adds	r6, r5, #1
 800460a:	6023      	str	r3, [r4, #0]
 800460c:	60e3      	str	r3, [r4, #12]
 800460e:	60a3      	str	r3, [r4, #8]
 8004610:	7013      	strb	r3, [r2, #0]
 8004612:	65a3      	str	r3, [r4, #88]	; 0x58
 8004614:	7831      	ldrb	r1, [r6, #0]
 8004616:	2205      	movs	r2, #5
 8004618:	4853      	ldr	r0, [pc, #332]	; (8004768 <_svfiprintf_r+0x1e8>)
 800461a:	f000 fc1f 	bl	8004e5c <memchr>
 800461e:	1c75      	adds	r5, r6, #1
 8004620:	2800      	cmp	r0, #0
 8004622:	d11f      	bne.n	8004664 <_svfiprintf_r+0xe4>
 8004624:	6822      	ldr	r2, [r4, #0]
 8004626:	06d3      	lsls	r3, r2, #27
 8004628:	d504      	bpl.n	8004634 <_svfiprintf_r+0xb4>
 800462a:	2353      	movs	r3, #83	; 0x53
 800462c:	a904      	add	r1, sp, #16
 800462e:	185b      	adds	r3, r3, r1
 8004630:	2120      	movs	r1, #32
 8004632:	7019      	strb	r1, [r3, #0]
 8004634:	0713      	lsls	r3, r2, #28
 8004636:	d504      	bpl.n	8004642 <_svfiprintf_r+0xc2>
 8004638:	2353      	movs	r3, #83	; 0x53
 800463a:	a904      	add	r1, sp, #16
 800463c:	185b      	adds	r3, r3, r1
 800463e:	212b      	movs	r1, #43	; 0x2b
 8004640:	7019      	strb	r1, [r3, #0]
 8004642:	7833      	ldrb	r3, [r6, #0]
 8004644:	2b2a      	cmp	r3, #42	; 0x2a
 8004646:	d016      	beq.n	8004676 <_svfiprintf_r+0xf6>
 8004648:	0035      	movs	r5, r6
 800464a:	2100      	movs	r1, #0
 800464c:	200a      	movs	r0, #10
 800464e:	68e3      	ldr	r3, [r4, #12]
 8004650:	782a      	ldrb	r2, [r5, #0]
 8004652:	1c6e      	adds	r6, r5, #1
 8004654:	3a30      	subs	r2, #48	; 0x30
 8004656:	2a09      	cmp	r2, #9
 8004658:	d94e      	bls.n	80046f8 <_svfiprintf_r+0x178>
 800465a:	2900      	cmp	r1, #0
 800465c:	d018      	beq.n	8004690 <_svfiprintf_r+0x110>
 800465e:	e010      	b.n	8004682 <_svfiprintf_r+0x102>
 8004660:	3501      	adds	r5, #1
 8004662:	e7b1      	b.n	80045c8 <_svfiprintf_r+0x48>
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <_svfiprintf_r+0x1e8>)
 8004666:	6822      	ldr	r2, [r4, #0]
 8004668:	1ac0      	subs	r0, r0, r3
 800466a:	2301      	movs	r3, #1
 800466c:	4083      	lsls	r3, r0
 800466e:	4313      	orrs	r3, r2
 8004670:	6023      	str	r3, [r4, #0]
 8004672:	002e      	movs	r6, r5
 8004674:	e7ce      	b.n	8004614 <_svfiprintf_r+0x94>
 8004676:	9b07      	ldr	r3, [sp, #28]
 8004678:	1d19      	adds	r1, r3, #4
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	9107      	str	r1, [sp, #28]
 800467e:	2b00      	cmp	r3, #0
 8004680:	db01      	blt.n	8004686 <_svfiprintf_r+0x106>
 8004682:	930b      	str	r3, [sp, #44]	; 0x2c
 8004684:	e004      	b.n	8004690 <_svfiprintf_r+0x110>
 8004686:	425b      	negs	r3, r3
 8004688:	60e3      	str	r3, [r4, #12]
 800468a:	2302      	movs	r3, #2
 800468c:	4313      	orrs	r3, r2
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	782b      	ldrb	r3, [r5, #0]
 8004692:	2b2e      	cmp	r3, #46	; 0x2e
 8004694:	d10a      	bne.n	80046ac <_svfiprintf_r+0x12c>
 8004696:	786b      	ldrb	r3, [r5, #1]
 8004698:	2b2a      	cmp	r3, #42	; 0x2a
 800469a:	d135      	bne.n	8004708 <_svfiprintf_r+0x188>
 800469c:	9b07      	ldr	r3, [sp, #28]
 800469e:	3502      	adds	r5, #2
 80046a0:	1d1a      	adds	r2, r3, #4
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	9207      	str	r2, [sp, #28]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	db2b      	blt.n	8004702 <_svfiprintf_r+0x182>
 80046aa:	9309      	str	r3, [sp, #36]	; 0x24
 80046ac:	4e2f      	ldr	r6, [pc, #188]	; (800476c <_svfiprintf_r+0x1ec>)
 80046ae:	7829      	ldrb	r1, [r5, #0]
 80046b0:	2203      	movs	r2, #3
 80046b2:	0030      	movs	r0, r6
 80046b4:	f000 fbd2 	bl	8004e5c <memchr>
 80046b8:	2800      	cmp	r0, #0
 80046ba:	d006      	beq.n	80046ca <_svfiprintf_r+0x14a>
 80046bc:	2340      	movs	r3, #64	; 0x40
 80046be:	1b80      	subs	r0, r0, r6
 80046c0:	4083      	lsls	r3, r0
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	3501      	adds	r5, #1
 80046c6:	4313      	orrs	r3, r2
 80046c8:	6023      	str	r3, [r4, #0]
 80046ca:	7829      	ldrb	r1, [r5, #0]
 80046cc:	2206      	movs	r2, #6
 80046ce:	4828      	ldr	r0, [pc, #160]	; (8004770 <_svfiprintf_r+0x1f0>)
 80046d0:	1c6e      	adds	r6, r5, #1
 80046d2:	7621      	strb	r1, [r4, #24]
 80046d4:	f000 fbc2 	bl	8004e5c <memchr>
 80046d8:	2800      	cmp	r0, #0
 80046da:	d03c      	beq.n	8004756 <_svfiprintf_r+0x1d6>
 80046dc:	4b25      	ldr	r3, [pc, #148]	; (8004774 <_svfiprintf_r+0x1f4>)
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d125      	bne.n	800472e <_svfiprintf_r+0x1ae>
 80046e2:	2207      	movs	r2, #7
 80046e4:	9b07      	ldr	r3, [sp, #28]
 80046e6:	3307      	adds	r3, #7
 80046e8:	4393      	bics	r3, r2
 80046ea:	3308      	adds	r3, #8
 80046ec:	9307      	str	r3, [sp, #28]
 80046ee:	6963      	ldr	r3, [r4, #20]
 80046f0:	9a04      	ldr	r2, [sp, #16]
 80046f2:	189b      	adds	r3, r3, r2
 80046f4:	6163      	str	r3, [r4, #20]
 80046f6:	e766      	b.n	80045c6 <_svfiprintf_r+0x46>
 80046f8:	4343      	muls	r3, r0
 80046fa:	2101      	movs	r1, #1
 80046fc:	189b      	adds	r3, r3, r2
 80046fe:	0035      	movs	r5, r6
 8004700:	e7a6      	b.n	8004650 <_svfiprintf_r+0xd0>
 8004702:	2301      	movs	r3, #1
 8004704:	425b      	negs	r3, r3
 8004706:	e7d0      	b.n	80046aa <_svfiprintf_r+0x12a>
 8004708:	2300      	movs	r3, #0
 800470a:	200a      	movs	r0, #10
 800470c:	001a      	movs	r2, r3
 800470e:	3501      	adds	r5, #1
 8004710:	6063      	str	r3, [r4, #4]
 8004712:	7829      	ldrb	r1, [r5, #0]
 8004714:	1c6e      	adds	r6, r5, #1
 8004716:	3930      	subs	r1, #48	; 0x30
 8004718:	2909      	cmp	r1, #9
 800471a:	d903      	bls.n	8004724 <_svfiprintf_r+0x1a4>
 800471c:	2b00      	cmp	r3, #0
 800471e:	d0c5      	beq.n	80046ac <_svfiprintf_r+0x12c>
 8004720:	9209      	str	r2, [sp, #36]	; 0x24
 8004722:	e7c3      	b.n	80046ac <_svfiprintf_r+0x12c>
 8004724:	4342      	muls	r2, r0
 8004726:	2301      	movs	r3, #1
 8004728:	1852      	adds	r2, r2, r1
 800472a:	0035      	movs	r5, r6
 800472c:	e7f1      	b.n	8004712 <_svfiprintf_r+0x192>
 800472e:	ab07      	add	r3, sp, #28
 8004730:	9300      	str	r3, [sp, #0]
 8004732:	003a      	movs	r2, r7
 8004734:	4b10      	ldr	r3, [pc, #64]	; (8004778 <_svfiprintf_r+0x1f8>)
 8004736:	0021      	movs	r1, r4
 8004738:	9803      	ldr	r0, [sp, #12]
 800473a:	e000      	b.n	800473e <_svfiprintf_r+0x1be>
 800473c:	bf00      	nop
 800473e:	9004      	str	r0, [sp, #16]
 8004740:	9b04      	ldr	r3, [sp, #16]
 8004742:	3301      	adds	r3, #1
 8004744:	d1d3      	bne.n	80046ee <_svfiprintf_r+0x16e>
 8004746:	89bb      	ldrh	r3, [r7, #12]
 8004748:	980d      	ldr	r0, [sp, #52]	; 0x34
 800474a:	065b      	lsls	r3, r3, #25
 800474c:	d400      	bmi.n	8004750 <_svfiprintf_r+0x1d0>
 800474e:	e72e      	b.n	80045ae <_svfiprintf_r+0x2e>
 8004750:	2001      	movs	r0, #1
 8004752:	4240      	negs	r0, r0
 8004754:	e72b      	b.n	80045ae <_svfiprintf_r+0x2e>
 8004756:	ab07      	add	r3, sp, #28
 8004758:	9300      	str	r3, [sp, #0]
 800475a:	003a      	movs	r2, r7
 800475c:	4b06      	ldr	r3, [pc, #24]	; (8004778 <_svfiprintf_r+0x1f8>)
 800475e:	0021      	movs	r1, r4
 8004760:	9803      	ldr	r0, [sp, #12]
 8004762:	f000 f9b7 	bl	8004ad4 <_printf_i>
 8004766:	e7ea      	b.n	800473e <_svfiprintf_r+0x1be>
 8004768:	08005100 	.word	0x08005100
 800476c:	08005106 	.word	0x08005106
 8004770:	0800510a 	.word	0x0800510a
 8004774:	00000000 	.word	0x00000000
 8004778:	080044bd 	.word	0x080044bd

0800477c <__sfputc_r>:
 800477c:	6893      	ldr	r3, [r2, #8]
 800477e:	b510      	push	{r4, lr}
 8004780:	3b01      	subs	r3, #1
 8004782:	6093      	str	r3, [r2, #8]
 8004784:	2b00      	cmp	r3, #0
 8004786:	da04      	bge.n	8004792 <__sfputc_r+0x16>
 8004788:	6994      	ldr	r4, [r2, #24]
 800478a:	42a3      	cmp	r3, r4
 800478c:	db07      	blt.n	800479e <__sfputc_r+0x22>
 800478e:	290a      	cmp	r1, #10
 8004790:	d005      	beq.n	800479e <__sfputc_r+0x22>
 8004792:	6813      	ldr	r3, [r2, #0]
 8004794:	1c58      	adds	r0, r3, #1
 8004796:	6010      	str	r0, [r2, #0]
 8004798:	7019      	strb	r1, [r3, #0]
 800479a:	0008      	movs	r0, r1
 800479c:	bd10      	pop	{r4, pc}
 800479e:	f7ff fb21 	bl	8003de4 <__swbuf_r>
 80047a2:	0001      	movs	r1, r0
 80047a4:	e7f9      	b.n	800479a <__sfputc_r+0x1e>

080047a6 <__sfputs_r>:
 80047a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047a8:	0006      	movs	r6, r0
 80047aa:	000f      	movs	r7, r1
 80047ac:	0014      	movs	r4, r2
 80047ae:	18d5      	adds	r5, r2, r3
 80047b0:	42ac      	cmp	r4, r5
 80047b2:	d101      	bne.n	80047b8 <__sfputs_r+0x12>
 80047b4:	2000      	movs	r0, #0
 80047b6:	e007      	b.n	80047c8 <__sfputs_r+0x22>
 80047b8:	7821      	ldrb	r1, [r4, #0]
 80047ba:	003a      	movs	r2, r7
 80047bc:	0030      	movs	r0, r6
 80047be:	f7ff ffdd 	bl	800477c <__sfputc_r>
 80047c2:	3401      	adds	r4, #1
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d1f3      	bne.n	80047b0 <__sfputs_r+0xa>
 80047c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080047cc <_vfiprintf_r>:
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b0a1      	sub	sp, #132	; 0x84
 80047d0:	9003      	str	r0, [sp, #12]
 80047d2:	000f      	movs	r7, r1
 80047d4:	0016      	movs	r6, r2
 80047d6:	001d      	movs	r5, r3
 80047d8:	2800      	cmp	r0, #0
 80047da:	d005      	beq.n	80047e8 <_vfiprintf_r+0x1c>
 80047dc:	6983      	ldr	r3, [r0, #24]
 80047de:	9305      	str	r3, [sp, #20]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d101      	bne.n	80047e8 <_vfiprintf_r+0x1c>
 80047e4:	f7ff fcc2 	bl	800416c <__sinit>
 80047e8:	4b7b      	ldr	r3, [pc, #492]	; (80049d8 <_vfiprintf_r+0x20c>)
 80047ea:	429f      	cmp	r7, r3
 80047ec:	d15c      	bne.n	80048a8 <_vfiprintf_r+0xdc>
 80047ee:	9b03      	ldr	r3, [sp, #12]
 80047f0:	685f      	ldr	r7, [r3, #4]
 80047f2:	89bb      	ldrh	r3, [r7, #12]
 80047f4:	071b      	lsls	r3, r3, #28
 80047f6:	d563      	bpl.n	80048c0 <_vfiprintf_r+0xf4>
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d060      	beq.n	80048c0 <_vfiprintf_r+0xf4>
 80047fe:	2300      	movs	r3, #0
 8004800:	ac08      	add	r4, sp, #32
 8004802:	6163      	str	r3, [r4, #20]
 8004804:	3320      	adds	r3, #32
 8004806:	7663      	strb	r3, [r4, #25]
 8004808:	3310      	adds	r3, #16
 800480a:	76a3      	strb	r3, [r4, #26]
 800480c:	9507      	str	r5, [sp, #28]
 800480e:	0035      	movs	r5, r6
 8004810:	782b      	ldrb	r3, [r5, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d001      	beq.n	800481a <_vfiprintf_r+0x4e>
 8004816:	2b25      	cmp	r3, #37	; 0x25
 8004818:	d15c      	bne.n	80048d4 <_vfiprintf_r+0x108>
 800481a:	1bab      	subs	r3, r5, r6
 800481c:	9305      	str	r3, [sp, #20]
 800481e:	d00c      	beq.n	800483a <_vfiprintf_r+0x6e>
 8004820:	0032      	movs	r2, r6
 8004822:	0039      	movs	r1, r7
 8004824:	9803      	ldr	r0, [sp, #12]
 8004826:	f7ff ffbe 	bl	80047a6 <__sfputs_r>
 800482a:	1c43      	adds	r3, r0, #1
 800482c:	d100      	bne.n	8004830 <_vfiprintf_r+0x64>
 800482e:	e0c4      	b.n	80049ba <_vfiprintf_r+0x1ee>
 8004830:	6962      	ldr	r2, [r4, #20]
 8004832:	9b05      	ldr	r3, [sp, #20]
 8004834:	4694      	mov	ip, r2
 8004836:	4463      	add	r3, ip
 8004838:	6163      	str	r3, [r4, #20]
 800483a:	782b      	ldrb	r3, [r5, #0]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d100      	bne.n	8004842 <_vfiprintf_r+0x76>
 8004840:	e0bb      	b.n	80049ba <_vfiprintf_r+0x1ee>
 8004842:	2201      	movs	r2, #1
 8004844:	2300      	movs	r3, #0
 8004846:	4252      	negs	r2, r2
 8004848:	6062      	str	r2, [r4, #4]
 800484a:	a904      	add	r1, sp, #16
 800484c:	3254      	adds	r2, #84	; 0x54
 800484e:	1852      	adds	r2, r2, r1
 8004850:	1c6e      	adds	r6, r5, #1
 8004852:	6023      	str	r3, [r4, #0]
 8004854:	60e3      	str	r3, [r4, #12]
 8004856:	60a3      	str	r3, [r4, #8]
 8004858:	7013      	strb	r3, [r2, #0]
 800485a:	65a3      	str	r3, [r4, #88]	; 0x58
 800485c:	7831      	ldrb	r1, [r6, #0]
 800485e:	2205      	movs	r2, #5
 8004860:	485e      	ldr	r0, [pc, #376]	; (80049dc <_vfiprintf_r+0x210>)
 8004862:	f000 fafb 	bl	8004e5c <memchr>
 8004866:	1c75      	adds	r5, r6, #1
 8004868:	2800      	cmp	r0, #0
 800486a:	d135      	bne.n	80048d8 <_vfiprintf_r+0x10c>
 800486c:	6822      	ldr	r2, [r4, #0]
 800486e:	06d3      	lsls	r3, r2, #27
 8004870:	d504      	bpl.n	800487c <_vfiprintf_r+0xb0>
 8004872:	2353      	movs	r3, #83	; 0x53
 8004874:	a904      	add	r1, sp, #16
 8004876:	185b      	adds	r3, r3, r1
 8004878:	2120      	movs	r1, #32
 800487a:	7019      	strb	r1, [r3, #0]
 800487c:	0713      	lsls	r3, r2, #28
 800487e:	d504      	bpl.n	800488a <_vfiprintf_r+0xbe>
 8004880:	2353      	movs	r3, #83	; 0x53
 8004882:	a904      	add	r1, sp, #16
 8004884:	185b      	adds	r3, r3, r1
 8004886:	212b      	movs	r1, #43	; 0x2b
 8004888:	7019      	strb	r1, [r3, #0]
 800488a:	7833      	ldrb	r3, [r6, #0]
 800488c:	2b2a      	cmp	r3, #42	; 0x2a
 800488e:	d02c      	beq.n	80048ea <_vfiprintf_r+0x11e>
 8004890:	0035      	movs	r5, r6
 8004892:	2100      	movs	r1, #0
 8004894:	200a      	movs	r0, #10
 8004896:	68e3      	ldr	r3, [r4, #12]
 8004898:	782a      	ldrb	r2, [r5, #0]
 800489a:	1c6e      	adds	r6, r5, #1
 800489c:	3a30      	subs	r2, #48	; 0x30
 800489e:	2a09      	cmp	r2, #9
 80048a0:	d964      	bls.n	800496c <_vfiprintf_r+0x1a0>
 80048a2:	2900      	cmp	r1, #0
 80048a4:	d02e      	beq.n	8004904 <_vfiprintf_r+0x138>
 80048a6:	e026      	b.n	80048f6 <_vfiprintf_r+0x12a>
 80048a8:	4b4d      	ldr	r3, [pc, #308]	; (80049e0 <_vfiprintf_r+0x214>)
 80048aa:	429f      	cmp	r7, r3
 80048ac:	d102      	bne.n	80048b4 <_vfiprintf_r+0xe8>
 80048ae:	9b03      	ldr	r3, [sp, #12]
 80048b0:	689f      	ldr	r7, [r3, #8]
 80048b2:	e79e      	b.n	80047f2 <_vfiprintf_r+0x26>
 80048b4:	4b4b      	ldr	r3, [pc, #300]	; (80049e4 <_vfiprintf_r+0x218>)
 80048b6:	429f      	cmp	r7, r3
 80048b8:	d19b      	bne.n	80047f2 <_vfiprintf_r+0x26>
 80048ba:	9b03      	ldr	r3, [sp, #12]
 80048bc:	68df      	ldr	r7, [r3, #12]
 80048be:	e798      	b.n	80047f2 <_vfiprintf_r+0x26>
 80048c0:	0039      	movs	r1, r7
 80048c2:	9803      	ldr	r0, [sp, #12]
 80048c4:	f7ff fae4 	bl	8003e90 <__swsetup_r>
 80048c8:	2800      	cmp	r0, #0
 80048ca:	d098      	beq.n	80047fe <_vfiprintf_r+0x32>
 80048cc:	2001      	movs	r0, #1
 80048ce:	4240      	negs	r0, r0
 80048d0:	b021      	add	sp, #132	; 0x84
 80048d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048d4:	3501      	adds	r5, #1
 80048d6:	e79b      	b.n	8004810 <_vfiprintf_r+0x44>
 80048d8:	4b40      	ldr	r3, [pc, #256]	; (80049dc <_vfiprintf_r+0x210>)
 80048da:	6822      	ldr	r2, [r4, #0]
 80048dc:	1ac0      	subs	r0, r0, r3
 80048de:	2301      	movs	r3, #1
 80048e0:	4083      	lsls	r3, r0
 80048e2:	4313      	orrs	r3, r2
 80048e4:	6023      	str	r3, [r4, #0]
 80048e6:	002e      	movs	r6, r5
 80048e8:	e7b8      	b.n	800485c <_vfiprintf_r+0x90>
 80048ea:	9b07      	ldr	r3, [sp, #28]
 80048ec:	1d19      	adds	r1, r3, #4
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	9107      	str	r1, [sp, #28]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	db01      	blt.n	80048fa <_vfiprintf_r+0x12e>
 80048f6:	930b      	str	r3, [sp, #44]	; 0x2c
 80048f8:	e004      	b.n	8004904 <_vfiprintf_r+0x138>
 80048fa:	425b      	negs	r3, r3
 80048fc:	60e3      	str	r3, [r4, #12]
 80048fe:	2302      	movs	r3, #2
 8004900:	4313      	orrs	r3, r2
 8004902:	6023      	str	r3, [r4, #0]
 8004904:	782b      	ldrb	r3, [r5, #0]
 8004906:	2b2e      	cmp	r3, #46	; 0x2e
 8004908:	d10a      	bne.n	8004920 <_vfiprintf_r+0x154>
 800490a:	786b      	ldrb	r3, [r5, #1]
 800490c:	2b2a      	cmp	r3, #42	; 0x2a
 800490e:	d135      	bne.n	800497c <_vfiprintf_r+0x1b0>
 8004910:	9b07      	ldr	r3, [sp, #28]
 8004912:	3502      	adds	r5, #2
 8004914:	1d1a      	adds	r2, r3, #4
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	9207      	str	r2, [sp, #28]
 800491a:	2b00      	cmp	r3, #0
 800491c:	db2b      	blt.n	8004976 <_vfiprintf_r+0x1aa>
 800491e:	9309      	str	r3, [sp, #36]	; 0x24
 8004920:	4e31      	ldr	r6, [pc, #196]	; (80049e8 <_vfiprintf_r+0x21c>)
 8004922:	7829      	ldrb	r1, [r5, #0]
 8004924:	2203      	movs	r2, #3
 8004926:	0030      	movs	r0, r6
 8004928:	f000 fa98 	bl	8004e5c <memchr>
 800492c:	2800      	cmp	r0, #0
 800492e:	d006      	beq.n	800493e <_vfiprintf_r+0x172>
 8004930:	2340      	movs	r3, #64	; 0x40
 8004932:	1b80      	subs	r0, r0, r6
 8004934:	4083      	lsls	r3, r0
 8004936:	6822      	ldr	r2, [r4, #0]
 8004938:	3501      	adds	r5, #1
 800493a:	4313      	orrs	r3, r2
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	7829      	ldrb	r1, [r5, #0]
 8004940:	2206      	movs	r2, #6
 8004942:	482a      	ldr	r0, [pc, #168]	; (80049ec <_vfiprintf_r+0x220>)
 8004944:	1c6e      	adds	r6, r5, #1
 8004946:	7621      	strb	r1, [r4, #24]
 8004948:	f000 fa88 	bl	8004e5c <memchr>
 800494c:	2800      	cmp	r0, #0
 800494e:	d03a      	beq.n	80049c6 <_vfiprintf_r+0x1fa>
 8004950:	4b27      	ldr	r3, [pc, #156]	; (80049f0 <_vfiprintf_r+0x224>)
 8004952:	2b00      	cmp	r3, #0
 8004954:	d125      	bne.n	80049a2 <_vfiprintf_r+0x1d6>
 8004956:	2207      	movs	r2, #7
 8004958:	9b07      	ldr	r3, [sp, #28]
 800495a:	3307      	adds	r3, #7
 800495c:	4393      	bics	r3, r2
 800495e:	3308      	adds	r3, #8
 8004960:	9307      	str	r3, [sp, #28]
 8004962:	6963      	ldr	r3, [r4, #20]
 8004964:	9a04      	ldr	r2, [sp, #16]
 8004966:	189b      	adds	r3, r3, r2
 8004968:	6163      	str	r3, [r4, #20]
 800496a:	e750      	b.n	800480e <_vfiprintf_r+0x42>
 800496c:	4343      	muls	r3, r0
 800496e:	2101      	movs	r1, #1
 8004970:	189b      	adds	r3, r3, r2
 8004972:	0035      	movs	r5, r6
 8004974:	e790      	b.n	8004898 <_vfiprintf_r+0xcc>
 8004976:	2301      	movs	r3, #1
 8004978:	425b      	negs	r3, r3
 800497a:	e7d0      	b.n	800491e <_vfiprintf_r+0x152>
 800497c:	2300      	movs	r3, #0
 800497e:	200a      	movs	r0, #10
 8004980:	001a      	movs	r2, r3
 8004982:	3501      	adds	r5, #1
 8004984:	6063      	str	r3, [r4, #4]
 8004986:	7829      	ldrb	r1, [r5, #0]
 8004988:	1c6e      	adds	r6, r5, #1
 800498a:	3930      	subs	r1, #48	; 0x30
 800498c:	2909      	cmp	r1, #9
 800498e:	d903      	bls.n	8004998 <_vfiprintf_r+0x1cc>
 8004990:	2b00      	cmp	r3, #0
 8004992:	d0c5      	beq.n	8004920 <_vfiprintf_r+0x154>
 8004994:	9209      	str	r2, [sp, #36]	; 0x24
 8004996:	e7c3      	b.n	8004920 <_vfiprintf_r+0x154>
 8004998:	4342      	muls	r2, r0
 800499a:	2301      	movs	r3, #1
 800499c:	1852      	adds	r2, r2, r1
 800499e:	0035      	movs	r5, r6
 80049a0:	e7f1      	b.n	8004986 <_vfiprintf_r+0x1ba>
 80049a2:	ab07      	add	r3, sp, #28
 80049a4:	9300      	str	r3, [sp, #0]
 80049a6:	003a      	movs	r2, r7
 80049a8:	4b12      	ldr	r3, [pc, #72]	; (80049f4 <_vfiprintf_r+0x228>)
 80049aa:	0021      	movs	r1, r4
 80049ac:	9803      	ldr	r0, [sp, #12]
 80049ae:	e000      	b.n	80049b2 <_vfiprintf_r+0x1e6>
 80049b0:	bf00      	nop
 80049b2:	9004      	str	r0, [sp, #16]
 80049b4:	9b04      	ldr	r3, [sp, #16]
 80049b6:	3301      	adds	r3, #1
 80049b8:	d1d3      	bne.n	8004962 <_vfiprintf_r+0x196>
 80049ba:	89bb      	ldrh	r3, [r7, #12]
 80049bc:	065b      	lsls	r3, r3, #25
 80049be:	d500      	bpl.n	80049c2 <_vfiprintf_r+0x1f6>
 80049c0:	e784      	b.n	80048cc <_vfiprintf_r+0x100>
 80049c2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80049c4:	e784      	b.n	80048d0 <_vfiprintf_r+0x104>
 80049c6:	ab07      	add	r3, sp, #28
 80049c8:	9300      	str	r3, [sp, #0]
 80049ca:	003a      	movs	r2, r7
 80049cc:	4b09      	ldr	r3, [pc, #36]	; (80049f4 <_vfiprintf_r+0x228>)
 80049ce:	0021      	movs	r1, r4
 80049d0:	9803      	ldr	r0, [sp, #12]
 80049d2:	f000 f87f 	bl	8004ad4 <_printf_i>
 80049d6:	e7ec      	b.n	80049b2 <_vfiprintf_r+0x1e6>
 80049d8:	080050c0 	.word	0x080050c0
 80049dc:	08005100 	.word	0x08005100
 80049e0:	080050e0 	.word	0x080050e0
 80049e4:	080050a0 	.word	0x080050a0
 80049e8:	08005106 	.word	0x08005106
 80049ec:	0800510a 	.word	0x0800510a
 80049f0:	00000000 	.word	0x00000000
 80049f4:	080047a7 	.word	0x080047a7

080049f8 <_printf_common>:
 80049f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049fa:	0015      	movs	r5, r2
 80049fc:	9301      	str	r3, [sp, #4]
 80049fe:	688a      	ldr	r2, [r1, #8]
 8004a00:	690b      	ldr	r3, [r1, #16]
 8004a02:	9000      	str	r0, [sp, #0]
 8004a04:	000c      	movs	r4, r1
 8004a06:	4293      	cmp	r3, r2
 8004a08:	da00      	bge.n	8004a0c <_printf_common+0x14>
 8004a0a:	0013      	movs	r3, r2
 8004a0c:	0022      	movs	r2, r4
 8004a0e:	602b      	str	r3, [r5, #0]
 8004a10:	3243      	adds	r2, #67	; 0x43
 8004a12:	7812      	ldrb	r2, [r2, #0]
 8004a14:	2a00      	cmp	r2, #0
 8004a16:	d001      	beq.n	8004a1c <_printf_common+0x24>
 8004a18:	3301      	adds	r3, #1
 8004a1a:	602b      	str	r3, [r5, #0]
 8004a1c:	6823      	ldr	r3, [r4, #0]
 8004a1e:	069b      	lsls	r3, r3, #26
 8004a20:	d502      	bpl.n	8004a28 <_printf_common+0x30>
 8004a22:	682b      	ldr	r3, [r5, #0]
 8004a24:	3302      	adds	r3, #2
 8004a26:	602b      	str	r3, [r5, #0]
 8004a28:	2706      	movs	r7, #6
 8004a2a:	6823      	ldr	r3, [r4, #0]
 8004a2c:	401f      	ands	r7, r3
 8004a2e:	d027      	beq.n	8004a80 <_printf_common+0x88>
 8004a30:	0023      	movs	r3, r4
 8004a32:	3343      	adds	r3, #67	; 0x43
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	1e5a      	subs	r2, r3, #1
 8004a38:	4193      	sbcs	r3, r2
 8004a3a:	6822      	ldr	r2, [r4, #0]
 8004a3c:	0692      	lsls	r2, r2, #26
 8004a3e:	d430      	bmi.n	8004aa2 <_printf_common+0xaa>
 8004a40:	0022      	movs	r2, r4
 8004a42:	9901      	ldr	r1, [sp, #4]
 8004a44:	3243      	adds	r2, #67	; 0x43
 8004a46:	9800      	ldr	r0, [sp, #0]
 8004a48:	9e08      	ldr	r6, [sp, #32]
 8004a4a:	47b0      	blx	r6
 8004a4c:	1c43      	adds	r3, r0, #1
 8004a4e:	d025      	beq.n	8004a9c <_printf_common+0xa4>
 8004a50:	2306      	movs	r3, #6
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	682a      	ldr	r2, [r5, #0]
 8004a56:	68e1      	ldr	r1, [r4, #12]
 8004a58:	4003      	ands	r3, r0
 8004a5a:	2500      	movs	r5, #0
 8004a5c:	2b04      	cmp	r3, #4
 8004a5e:	d103      	bne.n	8004a68 <_printf_common+0x70>
 8004a60:	1a8d      	subs	r5, r1, r2
 8004a62:	43eb      	mvns	r3, r5
 8004a64:	17db      	asrs	r3, r3, #31
 8004a66:	401d      	ands	r5, r3
 8004a68:	68a3      	ldr	r3, [r4, #8]
 8004a6a:	6922      	ldr	r2, [r4, #16]
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	dd01      	ble.n	8004a74 <_printf_common+0x7c>
 8004a70:	1a9b      	subs	r3, r3, r2
 8004a72:	18ed      	adds	r5, r5, r3
 8004a74:	2700      	movs	r7, #0
 8004a76:	42bd      	cmp	r5, r7
 8004a78:	d120      	bne.n	8004abc <_printf_common+0xc4>
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	e010      	b.n	8004aa0 <_printf_common+0xa8>
 8004a7e:	3701      	adds	r7, #1
 8004a80:	68e3      	ldr	r3, [r4, #12]
 8004a82:	682a      	ldr	r2, [r5, #0]
 8004a84:	1a9b      	subs	r3, r3, r2
 8004a86:	42bb      	cmp	r3, r7
 8004a88:	ddd2      	ble.n	8004a30 <_printf_common+0x38>
 8004a8a:	0022      	movs	r2, r4
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	3219      	adds	r2, #25
 8004a90:	9901      	ldr	r1, [sp, #4]
 8004a92:	9800      	ldr	r0, [sp, #0]
 8004a94:	9e08      	ldr	r6, [sp, #32]
 8004a96:	47b0      	blx	r6
 8004a98:	1c43      	adds	r3, r0, #1
 8004a9a:	d1f0      	bne.n	8004a7e <_printf_common+0x86>
 8004a9c:	2001      	movs	r0, #1
 8004a9e:	4240      	negs	r0, r0
 8004aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004aa2:	2030      	movs	r0, #48	; 0x30
 8004aa4:	18e1      	adds	r1, r4, r3
 8004aa6:	3143      	adds	r1, #67	; 0x43
 8004aa8:	7008      	strb	r0, [r1, #0]
 8004aaa:	0021      	movs	r1, r4
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	3145      	adds	r1, #69	; 0x45
 8004ab0:	7809      	ldrb	r1, [r1, #0]
 8004ab2:	18a2      	adds	r2, r4, r2
 8004ab4:	3243      	adds	r2, #67	; 0x43
 8004ab6:	3302      	adds	r3, #2
 8004ab8:	7011      	strb	r1, [r2, #0]
 8004aba:	e7c1      	b.n	8004a40 <_printf_common+0x48>
 8004abc:	0022      	movs	r2, r4
 8004abe:	2301      	movs	r3, #1
 8004ac0:	321a      	adds	r2, #26
 8004ac2:	9901      	ldr	r1, [sp, #4]
 8004ac4:	9800      	ldr	r0, [sp, #0]
 8004ac6:	9e08      	ldr	r6, [sp, #32]
 8004ac8:	47b0      	blx	r6
 8004aca:	1c43      	adds	r3, r0, #1
 8004acc:	d0e6      	beq.n	8004a9c <_printf_common+0xa4>
 8004ace:	3701      	adds	r7, #1
 8004ad0:	e7d1      	b.n	8004a76 <_printf_common+0x7e>
	...

08004ad4 <_printf_i>:
 8004ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ad6:	b089      	sub	sp, #36	; 0x24
 8004ad8:	9204      	str	r2, [sp, #16]
 8004ada:	000a      	movs	r2, r1
 8004adc:	3243      	adds	r2, #67	; 0x43
 8004ade:	9305      	str	r3, [sp, #20]
 8004ae0:	9003      	str	r0, [sp, #12]
 8004ae2:	9202      	str	r2, [sp, #8]
 8004ae4:	7e0a      	ldrb	r2, [r1, #24]
 8004ae6:	000c      	movs	r4, r1
 8004ae8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004aea:	2a6e      	cmp	r2, #110	; 0x6e
 8004aec:	d100      	bne.n	8004af0 <_printf_i+0x1c>
 8004aee:	e086      	b.n	8004bfe <_printf_i+0x12a>
 8004af0:	d81f      	bhi.n	8004b32 <_printf_i+0x5e>
 8004af2:	2a63      	cmp	r2, #99	; 0x63
 8004af4:	d033      	beq.n	8004b5e <_printf_i+0x8a>
 8004af6:	d808      	bhi.n	8004b0a <_printf_i+0x36>
 8004af8:	2a00      	cmp	r2, #0
 8004afa:	d100      	bne.n	8004afe <_printf_i+0x2a>
 8004afc:	e08c      	b.n	8004c18 <_printf_i+0x144>
 8004afe:	2a58      	cmp	r2, #88	; 0x58
 8004b00:	d04d      	beq.n	8004b9e <_printf_i+0xca>
 8004b02:	0025      	movs	r5, r4
 8004b04:	3542      	adds	r5, #66	; 0x42
 8004b06:	702a      	strb	r2, [r5, #0]
 8004b08:	e030      	b.n	8004b6c <_printf_i+0x98>
 8004b0a:	2a64      	cmp	r2, #100	; 0x64
 8004b0c:	d001      	beq.n	8004b12 <_printf_i+0x3e>
 8004b0e:	2a69      	cmp	r2, #105	; 0x69
 8004b10:	d1f7      	bne.n	8004b02 <_printf_i+0x2e>
 8004b12:	6819      	ldr	r1, [r3, #0]
 8004b14:	6825      	ldr	r5, [r4, #0]
 8004b16:	1d0a      	adds	r2, r1, #4
 8004b18:	0628      	lsls	r0, r5, #24
 8004b1a:	d529      	bpl.n	8004b70 <_printf_i+0x9c>
 8004b1c:	6808      	ldr	r0, [r1, #0]
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	2800      	cmp	r0, #0
 8004b22:	da03      	bge.n	8004b2c <_printf_i+0x58>
 8004b24:	232d      	movs	r3, #45	; 0x2d
 8004b26:	9a02      	ldr	r2, [sp, #8]
 8004b28:	4240      	negs	r0, r0
 8004b2a:	7013      	strb	r3, [r2, #0]
 8004b2c:	4e6b      	ldr	r6, [pc, #428]	; (8004cdc <_printf_i+0x208>)
 8004b2e:	270a      	movs	r7, #10
 8004b30:	e04f      	b.n	8004bd2 <_printf_i+0xfe>
 8004b32:	2a73      	cmp	r2, #115	; 0x73
 8004b34:	d074      	beq.n	8004c20 <_printf_i+0x14c>
 8004b36:	d808      	bhi.n	8004b4a <_printf_i+0x76>
 8004b38:	2a6f      	cmp	r2, #111	; 0x6f
 8004b3a:	d01f      	beq.n	8004b7c <_printf_i+0xa8>
 8004b3c:	2a70      	cmp	r2, #112	; 0x70
 8004b3e:	d1e0      	bne.n	8004b02 <_printf_i+0x2e>
 8004b40:	2220      	movs	r2, #32
 8004b42:	6809      	ldr	r1, [r1, #0]
 8004b44:	430a      	orrs	r2, r1
 8004b46:	6022      	str	r2, [r4, #0]
 8004b48:	e003      	b.n	8004b52 <_printf_i+0x7e>
 8004b4a:	2a75      	cmp	r2, #117	; 0x75
 8004b4c:	d016      	beq.n	8004b7c <_printf_i+0xa8>
 8004b4e:	2a78      	cmp	r2, #120	; 0x78
 8004b50:	d1d7      	bne.n	8004b02 <_printf_i+0x2e>
 8004b52:	0022      	movs	r2, r4
 8004b54:	2178      	movs	r1, #120	; 0x78
 8004b56:	3245      	adds	r2, #69	; 0x45
 8004b58:	7011      	strb	r1, [r2, #0]
 8004b5a:	4e61      	ldr	r6, [pc, #388]	; (8004ce0 <_printf_i+0x20c>)
 8004b5c:	e022      	b.n	8004ba4 <_printf_i+0xd0>
 8004b5e:	0025      	movs	r5, r4
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	3542      	adds	r5, #66	; 0x42
 8004b64:	1d11      	adds	r1, r2, #4
 8004b66:	6019      	str	r1, [r3, #0]
 8004b68:	6813      	ldr	r3, [r2, #0]
 8004b6a:	702b      	strb	r3, [r5, #0]
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e065      	b.n	8004c3c <_printf_i+0x168>
 8004b70:	6808      	ldr	r0, [r1, #0]
 8004b72:	601a      	str	r2, [r3, #0]
 8004b74:	0669      	lsls	r1, r5, #25
 8004b76:	d5d3      	bpl.n	8004b20 <_printf_i+0x4c>
 8004b78:	b200      	sxth	r0, r0
 8004b7a:	e7d1      	b.n	8004b20 <_printf_i+0x4c>
 8004b7c:	6819      	ldr	r1, [r3, #0]
 8004b7e:	6825      	ldr	r5, [r4, #0]
 8004b80:	1d08      	adds	r0, r1, #4
 8004b82:	6018      	str	r0, [r3, #0]
 8004b84:	6808      	ldr	r0, [r1, #0]
 8004b86:	062e      	lsls	r6, r5, #24
 8004b88:	d505      	bpl.n	8004b96 <_printf_i+0xc2>
 8004b8a:	4e54      	ldr	r6, [pc, #336]	; (8004cdc <_printf_i+0x208>)
 8004b8c:	2708      	movs	r7, #8
 8004b8e:	2a6f      	cmp	r2, #111	; 0x6f
 8004b90:	d01b      	beq.n	8004bca <_printf_i+0xf6>
 8004b92:	270a      	movs	r7, #10
 8004b94:	e019      	b.n	8004bca <_printf_i+0xf6>
 8004b96:	066d      	lsls	r5, r5, #25
 8004b98:	d5f7      	bpl.n	8004b8a <_printf_i+0xb6>
 8004b9a:	b280      	uxth	r0, r0
 8004b9c:	e7f5      	b.n	8004b8a <_printf_i+0xb6>
 8004b9e:	3145      	adds	r1, #69	; 0x45
 8004ba0:	4e4e      	ldr	r6, [pc, #312]	; (8004cdc <_printf_i+0x208>)
 8004ba2:	700a      	strb	r2, [r1, #0]
 8004ba4:	6818      	ldr	r0, [r3, #0]
 8004ba6:	6822      	ldr	r2, [r4, #0]
 8004ba8:	1d01      	adds	r1, r0, #4
 8004baa:	6800      	ldr	r0, [r0, #0]
 8004bac:	6019      	str	r1, [r3, #0]
 8004bae:	0615      	lsls	r5, r2, #24
 8004bb0:	d521      	bpl.n	8004bf6 <_printf_i+0x122>
 8004bb2:	07d3      	lsls	r3, r2, #31
 8004bb4:	d502      	bpl.n	8004bbc <_printf_i+0xe8>
 8004bb6:	2320      	movs	r3, #32
 8004bb8:	431a      	orrs	r2, r3
 8004bba:	6022      	str	r2, [r4, #0]
 8004bbc:	2710      	movs	r7, #16
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	d103      	bne.n	8004bca <_printf_i+0xf6>
 8004bc2:	2320      	movs	r3, #32
 8004bc4:	6822      	ldr	r2, [r4, #0]
 8004bc6:	439a      	bics	r2, r3
 8004bc8:	6022      	str	r2, [r4, #0]
 8004bca:	0023      	movs	r3, r4
 8004bcc:	2200      	movs	r2, #0
 8004bce:	3343      	adds	r3, #67	; 0x43
 8004bd0:	701a      	strb	r2, [r3, #0]
 8004bd2:	6863      	ldr	r3, [r4, #4]
 8004bd4:	60a3      	str	r3, [r4, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	db58      	blt.n	8004c8c <_printf_i+0x1b8>
 8004bda:	2204      	movs	r2, #4
 8004bdc:	6821      	ldr	r1, [r4, #0]
 8004bde:	4391      	bics	r1, r2
 8004be0:	6021      	str	r1, [r4, #0]
 8004be2:	2800      	cmp	r0, #0
 8004be4:	d154      	bne.n	8004c90 <_printf_i+0x1bc>
 8004be6:	9d02      	ldr	r5, [sp, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d05a      	beq.n	8004ca2 <_printf_i+0x1ce>
 8004bec:	0025      	movs	r5, r4
 8004bee:	7833      	ldrb	r3, [r6, #0]
 8004bf0:	3542      	adds	r5, #66	; 0x42
 8004bf2:	702b      	strb	r3, [r5, #0]
 8004bf4:	e055      	b.n	8004ca2 <_printf_i+0x1ce>
 8004bf6:	0655      	lsls	r5, r2, #25
 8004bf8:	d5db      	bpl.n	8004bb2 <_printf_i+0xde>
 8004bfa:	b280      	uxth	r0, r0
 8004bfc:	e7d9      	b.n	8004bb2 <_printf_i+0xde>
 8004bfe:	681a      	ldr	r2, [r3, #0]
 8004c00:	680d      	ldr	r5, [r1, #0]
 8004c02:	1d10      	adds	r0, r2, #4
 8004c04:	6949      	ldr	r1, [r1, #20]
 8004c06:	6018      	str	r0, [r3, #0]
 8004c08:	6813      	ldr	r3, [r2, #0]
 8004c0a:	062e      	lsls	r6, r5, #24
 8004c0c:	d501      	bpl.n	8004c12 <_printf_i+0x13e>
 8004c0e:	6019      	str	r1, [r3, #0]
 8004c10:	e002      	b.n	8004c18 <_printf_i+0x144>
 8004c12:	066d      	lsls	r5, r5, #25
 8004c14:	d5fb      	bpl.n	8004c0e <_printf_i+0x13a>
 8004c16:	8019      	strh	r1, [r3, #0]
 8004c18:	2300      	movs	r3, #0
 8004c1a:	9d02      	ldr	r5, [sp, #8]
 8004c1c:	6123      	str	r3, [r4, #16]
 8004c1e:	e04f      	b.n	8004cc0 <_printf_i+0x1ec>
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	1d11      	adds	r1, r2, #4
 8004c24:	6019      	str	r1, [r3, #0]
 8004c26:	6815      	ldr	r5, [r2, #0]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	6862      	ldr	r2, [r4, #4]
 8004c2c:	0028      	movs	r0, r5
 8004c2e:	f000 f915 	bl	8004e5c <memchr>
 8004c32:	2800      	cmp	r0, #0
 8004c34:	d001      	beq.n	8004c3a <_printf_i+0x166>
 8004c36:	1b40      	subs	r0, r0, r5
 8004c38:	6060      	str	r0, [r4, #4]
 8004c3a:	6863      	ldr	r3, [r4, #4]
 8004c3c:	6123      	str	r3, [r4, #16]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	9a02      	ldr	r2, [sp, #8]
 8004c42:	7013      	strb	r3, [r2, #0]
 8004c44:	e03c      	b.n	8004cc0 <_printf_i+0x1ec>
 8004c46:	6923      	ldr	r3, [r4, #16]
 8004c48:	002a      	movs	r2, r5
 8004c4a:	9904      	ldr	r1, [sp, #16]
 8004c4c:	9803      	ldr	r0, [sp, #12]
 8004c4e:	9d05      	ldr	r5, [sp, #20]
 8004c50:	47a8      	blx	r5
 8004c52:	1c43      	adds	r3, r0, #1
 8004c54:	d03e      	beq.n	8004cd4 <_printf_i+0x200>
 8004c56:	6823      	ldr	r3, [r4, #0]
 8004c58:	079b      	lsls	r3, r3, #30
 8004c5a:	d415      	bmi.n	8004c88 <_printf_i+0x1b4>
 8004c5c:	9b07      	ldr	r3, [sp, #28]
 8004c5e:	68e0      	ldr	r0, [r4, #12]
 8004c60:	4298      	cmp	r0, r3
 8004c62:	da39      	bge.n	8004cd8 <_printf_i+0x204>
 8004c64:	0018      	movs	r0, r3
 8004c66:	e037      	b.n	8004cd8 <_printf_i+0x204>
 8004c68:	0022      	movs	r2, r4
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	3219      	adds	r2, #25
 8004c6e:	9904      	ldr	r1, [sp, #16]
 8004c70:	9803      	ldr	r0, [sp, #12]
 8004c72:	9e05      	ldr	r6, [sp, #20]
 8004c74:	47b0      	blx	r6
 8004c76:	1c43      	adds	r3, r0, #1
 8004c78:	d02c      	beq.n	8004cd4 <_printf_i+0x200>
 8004c7a:	3501      	adds	r5, #1
 8004c7c:	68e3      	ldr	r3, [r4, #12]
 8004c7e:	9a07      	ldr	r2, [sp, #28]
 8004c80:	1a9b      	subs	r3, r3, r2
 8004c82:	42ab      	cmp	r3, r5
 8004c84:	dcf0      	bgt.n	8004c68 <_printf_i+0x194>
 8004c86:	e7e9      	b.n	8004c5c <_printf_i+0x188>
 8004c88:	2500      	movs	r5, #0
 8004c8a:	e7f7      	b.n	8004c7c <_printf_i+0x1a8>
 8004c8c:	2800      	cmp	r0, #0
 8004c8e:	d0ad      	beq.n	8004bec <_printf_i+0x118>
 8004c90:	9d02      	ldr	r5, [sp, #8]
 8004c92:	0039      	movs	r1, r7
 8004c94:	f7fb fabe 	bl	8000214 <__aeabi_uidivmod>
 8004c98:	5c73      	ldrb	r3, [r6, r1]
 8004c9a:	3d01      	subs	r5, #1
 8004c9c:	702b      	strb	r3, [r5, #0]
 8004c9e:	2800      	cmp	r0, #0
 8004ca0:	d1f7      	bne.n	8004c92 <_printf_i+0x1be>
 8004ca2:	2f08      	cmp	r7, #8
 8004ca4:	d109      	bne.n	8004cba <_printf_i+0x1e6>
 8004ca6:	6823      	ldr	r3, [r4, #0]
 8004ca8:	07db      	lsls	r3, r3, #31
 8004caa:	d506      	bpl.n	8004cba <_printf_i+0x1e6>
 8004cac:	6863      	ldr	r3, [r4, #4]
 8004cae:	6922      	ldr	r2, [r4, #16]
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	dc02      	bgt.n	8004cba <_printf_i+0x1e6>
 8004cb4:	2330      	movs	r3, #48	; 0x30
 8004cb6:	3d01      	subs	r5, #1
 8004cb8:	702b      	strb	r3, [r5, #0]
 8004cba:	9b02      	ldr	r3, [sp, #8]
 8004cbc:	1b5b      	subs	r3, r3, r5
 8004cbe:	6123      	str	r3, [r4, #16]
 8004cc0:	9b05      	ldr	r3, [sp, #20]
 8004cc2:	aa07      	add	r2, sp, #28
 8004cc4:	9300      	str	r3, [sp, #0]
 8004cc6:	0021      	movs	r1, r4
 8004cc8:	9b04      	ldr	r3, [sp, #16]
 8004cca:	9803      	ldr	r0, [sp, #12]
 8004ccc:	f7ff fe94 	bl	80049f8 <_printf_common>
 8004cd0:	1c43      	adds	r3, r0, #1
 8004cd2:	d1b8      	bne.n	8004c46 <_printf_i+0x172>
 8004cd4:	2001      	movs	r0, #1
 8004cd6:	4240      	negs	r0, r0
 8004cd8:	b009      	add	sp, #36	; 0x24
 8004cda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004cdc:	08005111 	.word	0x08005111
 8004ce0:	08005122 	.word	0x08005122

08004ce4 <_sbrk_r>:
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	b570      	push	{r4, r5, r6, lr}
 8004ce8:	4c06      	ldr	r4, [pc, #24]	; (8004d04 <_sbrk_r+0x20>)
 8004cea:	0005      	movs	r5, r0
 8004cec:	0008      	movs	r0, r1
 8004cee:	6023      	str	r3, [r4, #0]
 8004cf0:	f7fb ff12 	bl	8000b18 <_sbrk>
 8004cf4:	1c43      	adds	r3, r0, #1
 8004cf6:	d103      	bne.n	8004d00 <_sbrk_r+0x1c>
 8004cf8:	6823      	ldr	r3, [r4, #0]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d000      	beq.n	8004d00 <_sbrk_r+0x1c>
 8004cfe:	602b      	str	r3, [r5, #0]
 8004d00:	bd70      	pop	{r4, r5, r6, pc}
 8004d02:	46c0      	nop			; (mov r8, r8)
 8004d04:	200004c4 	.word	0x200004c4

08004d08 <__sread>:
 8004d08:	b570      	push	{r4, r5, r6, lr}
 8004d0a:	000c      	movs	r4, r1
 8004d0c:	250e      	movs	r5, #14
 8004d0e:	5f49      	ldrsh	r1, [r1, r5]
 8004d10:	f000 f8ea 	bl	8004ee8 <_read_r>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	db03      	blt.n	8004d20 <__sread+0x18>
 8004d18:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8004d1a:	181b      	adds	r3, r3, r0
 8004d1c:	6563      	str	r3, [r4, #84]	; 0x54
 8004d1e:	bd70      	pop	{r4, r5, r6, pc}
 8004d20:	89a3      	ldrh	r3, [r4, #12]
 8004d22:	4a02      	ldr	r2, [pc, #8]	; (8004d2c <__sread+0x24>)
 8004d24:	4013      	ands	r3, r2
 8004d26:	81a3      	strh	r3, [r4, #12]
 8004d28:	e7f9      	b.n	8004d1e <__sread+0x16>
 8004d2a:	46c0      	nop			; (mov r8, r8)
 8004d2c:	ffffefff 	.word	0xffffefff

08004d30 <__swrite>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	001f      	movs	r7, r3
 8004d34:	898b      	ldrh	r3, [r1, #12]
 8004d36:	0005      	movs	r5, r0
 8004d38:	000c      	movs	r4, r1
 8004d3a:	0016      	movs	r6, r2
 8004d3c:	05db      	lsls	r3, r3, #23
 8004d3e:	d505      	bpl.n	8004d4c <__swrite+0x1c>
 8004d40:	230e      	movs	r3, #14
 8004d42:	5ec9      	ldrsh	r1, [r1, r3]
 8004d44:	2200      	movs	r2, #0
 8004d46:	2302      	movs	r3, #2
 8004d48:	f000 f874 	bl	8004e34 <_lseek_r>
 8004d4c:	89a3      	ldrh	r3, [r4, #12]
 8004d4e:	4a05      	ldr	r2, [pc, #20]	; (8004d64 <__swrite+0x34>)
 8004d50:	0028      	movs	r0, r5
 8004d52:	4013      	ands	r3, r2
 8004d54:	81a3      	strh	r3, [r4, #12]
 8004d56:	0032      	movs	r2, r6
 8004d58:	230e      	movs	r3, #14
 8004d5a:	5ee1      	ldrsh	r1, [r4, r3]
 8004d5c:	003b      	movs	r3, r7
 8004d5e:	f000 f81f 	bl	8004da0 <_write_r>
 8004d62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d64:	ffffefff 	.word	0xffffefff

08004d68 <__sseek>:
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	000c      	movs	r4, r1
 8004d6c:	250e      	movs	r5, #14
 8004d6e:	5f49      	ldrsh	r1, [r1, r5]
 8004d70:	f000 f860 	bl	8004e34 <_lseek_r>
 8004d74:	89a3      	ldrh	r3, [r4, #12]
 8004d76:	1c42      	adds	r2, r0, #1
 8004d78:	d103      	bne.n	8004d82 <__sseek+0x1a>
 8004d7a:	4a05      	ldr	r2, [pc, #20]	; (8004d90 <__sseek+0x28>)
 8004d7c:	4013      	ands	r3, r2
 8004d7e:	81a3      	strh	r3, [r4, #12]
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	2280      	movs	r2, #128	; 0x80
 8004d84:	0152      	lsls	r2, r2, #5
 8004d86:	4313      	orrs	r3, r2
 8004d88:	81a3      	strh	r3, [r4, #12]
 8004d8a:	6560      	str	r0, [r4, #84]	; 0x54
 8004d8c:	e7f8      	b.n	8004d80 <__sseek+0x18>
 8004d8e:	46c0      	nop			; (mov r8, r8)
 8004d90:	ffffefff 	.word	0xffffefff

08004d94 <__sclose>:
 8004d94:	b510      	push	{r4, lr}
 8004d96:	230e      	movs	r3, #14
 8004d98:	5ec9      	ldrsh	r1, [r1, r3]
 8004d9a:	f000 f815 	bl	8004dc8 <_close_r>
 8004d9e:	bd10      	pop	{r4, pc}

08004da0 <_write_r>:
 8004da0:	b570      	push	{r4, r5, r6, lr}
 8004da2:	0005      	movs	r5, r0
 8004da4:	0008      	movs	r0, r1
 8004da6:	0011      	movs	r1, r2
 8004da8:	2200      	movs	r2, #0
 8004daa:	4c06      	ldr	r4, [pc, #24]	; (8004dc4 <_write_r+0x24>)
 8004dac:	6022      	str	r2, [r4, #0]
 8004dae:	001a      	movs	r2, r3
 8004db0:	f7fb fe6a 	bl	8000a88 <_write>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d103      	bne.n	8004dc0 <_write_r+0x20>
 8004db8:	6823      	ldr	r3, [r4, #0]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d000      	beq.n	8004dc0 <_write_r+0x20>
 8004dbe:	602b      	str	r3, [r5, #0]
 8004dc0:	bd70      	pop	{r4, r5, r6, pc}
 8004dc2:	46c0      	nop			; (mov r8, r8)
 8004dc4:	200004c4 	.word	0x200004c4

08004dc8 <_close_r>:
 8004dc8:	2300      	movs	r3, #0
 8004dca:	b570      	push	{r4, r5, r6, lr}
 8004dcc:	4c06      	ldr	r4, [pc, #24]	; (8004de8 <_close_r+0x20>)
 8004dce:	0005      	movs	r5, r0
 8004dd0:	0008      	movs	r0, r1
 8004dd2:	6023      	str	r3, [r4, #0]
 8004dd4:	f7fb fe74 	bl	8000ac0 <_close>
 8004dd8:	1c43      	adds	r3, r0, #1
 8004dda:	d103      	bne.n	8004de4 <_close_r+0x1c>
 8004ddc:	6823      	ldr	r3, [r4, #0]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d000      	beq.n	8004de4 <_close_r+0x1c>
 8004de2:	602b      	str	r3, [r5, #0]
 8004de4:	bd70      	pop	{r4, r5, r6, pc}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	200004c4 	.word	0x200004c4

08004dec <_fstat_r>:
 8004dec:	2300      	movs	r3, #0
 8004dee:	b570      	push	{r4, r5, r6, lr}
 8004df0:	4c06      	ldr	r4, [pc, #24]	; (8004e0c <_fstat_r+0x20>)
 8004df2:	0005      	movs	r5, r0
 8004df4:	0008      	movs	r0, r1
 8004df6:	0011      	movs	r1, r2
 8004df8:	6023      	str	r3, [r4, #0]
 8004dfa:	f7fb fe6b 	bl	8000ad4 <_fstat>
 8004dfe:	1c43      	adds	r3, r0, #1
 8004e00:	d103      	bne.n	8004e0a <_fstat_r+0x1e>
 8004e02:	6823      	ldr	r3, [r4, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d000      	beq.n	8004e0a <_fstat_r+0x1e>
 8004e08:	602b      	str	r3, [r5, #0]
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
 8004e0c:	200004c4 	.word	0x200004c4

08004e10 <_isatty_r>:
 8004e10:	2300      	movs	r3, #0
 8004e12:	b570      	push	{r4, r5, r6, lr}
 8004e14:	4c06      	ldr	r4, [pc, #24]	; (8004e30 <_isatty_r+0x20>)
 8004e16:	0005      	movs	r5, r0
 8004e18:	0008      	movs	r0, r1
 8004e1a:	6023      	str	r3, [r4, #0]
 8004e1c:	f7fb fe68 	bl	8000af0 <_isatty>
 8004e20:	1c43      	adds	r3, r0, #1
 8004e22:	d103      	bne.n	8004e2c <_isatty_r+0x1c>
 8004e24:	6823      	ldr	r3, [r4, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d000      	beq.n	8004e2c <_isatty_r+0x1c>
 8004e2a:	602b      	str	r3, [r5, #0]
 8004e2c:	bd70      	pop	{r4, r5, r6, pc}
 8004e2e:	46c0      	nop			; (mov r8, r8)
 8004e30:	200004c4 	.word	0x200004c4

08004e34 <_lseek_r>:
 8004e34:	b570      	push	{r4, r5, r6, lr}
 8004e36:	0005      	movs	r5, r0
 8004e38:	0008      	movs	r0, r1
 8004e3a:	0011      	movs	r1, r2
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	4c06      	ldr	r4, [pc, #24]	; (8004e58 <_lseek_r+0x24>)
 8004e40:	6022      	str	r2, [r4, #0]
 8004e42:	001a      	movs	r2, r3
 8004e44:	f7fb fe5d 	bl	8000b02 <_lseek>
 8004e48:	1c43      	adds	r3, r0, #1
 8004e4a:	d103      	bne.n	8004e54 <_lseek_r+0x20>
 8004e4c:	6823      	ldr	r3, [r4, #0]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d000      	beq.n	8004e54 <_lseek_r+0x20>
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	bd70      	pop	{r4, r5, r6, pc}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	200004c4 	.word	0x200004c4

08004e5c <memchr>:
 8004e5c:	b2c9      	uxtb	r1, r1
 8004e5e:	1882      	adds	r2, r0, r2
 8004e60:	4290      	cmp	r0, r2
 8004e62:	d101      	bne.n	8004e68 <memchr+0xc>
 8004e64:	2000      	movs	r0, #0
 8004e66:	4770      	bx	lr
 8004e68:	7803      	ldrb	r3, [r0, #0]
 8004e6a:	428b      	cmp	r3, r1
 8004e6c:	d0fb      	beq.n	8004e66 <memchr+0xa>
 8004e6e:	3001      	adds	r0, #1
 8004e70:	e7f6      	b.n	8004e60 <memchr+0x4>

08004e72 <memmove>:
 8004e72:	b510      	push	{r4, lr}
 8004e74:	4288      	cmp	r0, r1
 8004e76:	d902      	bls.n	8004e7e <memmove+0xc>
 8004e78:	188b      	adds	r3, r1, r2
 8004e7a:	4298      	cmp	r0, r3
 8004e7c:	d303      	bcc.n	8004e86 <memmove+0x14>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	e007      	b.n	8004e92 <memmove+0x20>
 8004e82:	5c8b      	ldrb	r3, [r1, r2]
 8004e84:	5483      	strb	r3, [r0, r2]
 8004e86:	3a01      	subs	r2, #1
 8004e88:	d2fb      	bcs.n	8004e82 <memmove+0x10>
 8004e8a:	bd10      	pop	{r4, pc}
 8004e8c:	5ccc      	ldrb	r4, [r1, r3]
 8004e8e:	54c4      	strb	r4, [r0, r3]
 8004e90:	3301      	adds	r3, #1
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d1fa      	bne.n	8004e8c <memmove+0x1a>
 8004e96:	e7f8      	b.n	8004e8a <memmove+0x18>

08004e98 <__malloc_lock>:
 8004e98:	4770      	bx	lr

08004e9a <__malloc_unlock>:
 8004e9a:	4770      	bx	lr

08004e9c <_realloc_r>:
 8004e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e9e:	0007      	movs	r7, r0
 8004ea0:	000d      	movs	r5, r1
 8004ea2:	0016      	movs	r6, r2
 8004ea4:	2900      	cmp	r1, #0
 8004ea6:	d105      	bne.n	8004eb4 <_realloc_r+0x18>
 8004ea8:	0011      	movs	r1, r2
 8004eaa:	f7ff faa9 	bl	8004400 <_malloc_r>
 8004eae:	0004      	movs	r4, r0
 8004eb0:	0020      	movs	r0, r4
 8004eb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004eb4:	2a00      	cmp	r2, #0
 8004eb6:	d103      	bne.n	8004ec0 <_realloc_r+0x24>
 8004eb8:	f7ff fa58 	bl	800436c <_free_r>
 8004ebc:	0034      	movs	r4, r6
 8004ebe:	e7f7      	b.n	8004eb0 <_realloc_r+0x14>
 8004ec0:	f000 f826 	bl	8004f10 <_malloc_usable_size_r>
 8004ec4:	002c      	movs	r4, r5
 8004ec6:	42b0      	cmp	r0, r6
 8004ec8:	d2f2      	bcs.n	8004eb0 <_realloc_r+0x14>
 8004eca:	0031      	movs	r1, r6
 8004ecc:	0038      	movs	r0, r7
 8004ece:	f7ff fa97 	bl	8004400 <_malloc_r>
 8004ed2:	1e04      	subs	r4, r0, #0
 8004ed4:	d0ec      	beq.n	8004eb0 <_realloc_r+0x14>
 8004ed6:	0029      	movs	r1, r5
 8004ed8:	0032      	movs	r2, r6
 8004eda:	f7fe fecd 	bl	8003c78 <memcpy>
 8004ede:	0029      	movs	r1, r5
 8004ee0:	0038      	movs	r0, r7
 8004ee2:	f7ff fa43 	bl	800436c <_free_r>
 8004ee6:	e7e3      	b.n	8004eb0 <_realloc_r+0x14>

08004ee8 <_read_r>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	0005      	movs	r5, r0
 8004eec:	0008      	movs	r0, r1
 8004eee:	0011      	movs	r1, r2
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	4c06      	ldr	r4, [pc, #24]	; (8004f0c <_read_r+0x24>)
 8004ef4:	6022      	str	r2, [r4, #0]
 8004ef6:	001a      	movs	r2, r3
 8004ef8:	f7fb fda9 	bl	8000a4e <_read>
 8004efc:	1c43      	adds	r3, r0, #1
 8004efe:	d103      	bne.n	8004f08 <_read_r+0x20>
 8004f00:	6823      	ldr	r3, [r4, #0]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d000      	beq.n	8004f08 <_read_r+0x20>
 8004f06:	602b      	str	r3, [r5, #0]
 8004f08:	bd70      	pop	{r4, r5, r6, pc}
 8004f0a:	46c0      	nop			; (mov r8, r8)
 8004f0c:	200004c4 	.word	0x200004c4

08004f10 <_malloc_usable_size_r>:
 8004f10:	1f0b      	subs	r3, r1, #4
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	1f18      	subs	r0, r3, #4
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	da01      	bge.n	8004f1e <_malloc_usable_size_r+0xe>
 8004f1a:	580b      	ldr	r3, [r1, r0]
 8004f1c:	18c0      	adds	r0, r0, r3
 8004f1e:	4770      	bx	lr

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	46c0      	nop			; (mov r8, r8)
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	46c0      	nop			; (mov r8, r8)
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
